/***********************************************
 * COMMON FUNCTIONS
 ***********************************************/

var delay = (function () {
    //To be used for delaying some functions
    var timer = 0;
    return function (callback, ms) {
        clearTimeout(timer);
        timer = setTimeout(callback, ms);
    };
})();

var dates = {
    convert: function (d) {
        // Converts the date in d to a date-object. The input can be:
        //   a date object: returned without modification
        //  an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.
        //   a number     : Interpreted as number of milliseconds
        //                  since 1 Jan 1970 (a timestamp)
        //   a string     : Any format supported by the javascript engine, like
        //                  "YYYY/MM/DD", "MM/DD/YYYY", "Jan 31 2009" etc.
        //  an object     : Interpreted as an object with year, month and date
        //                  attributes.  **NOTE** month is 0-11.
        return (
            d.constructor === Date ? d :
                d.constructor === Array ? new Date(d[0], d[1], d[2]) :
                    d.constructor === Number ? new Date(d) :
                        d.constructor === String ? new Date(d) :
                            typeof d === "object" ? new Date(d.year, d.month, d.date) :
                                NaN
        );
    },
    compare: function (a, b) {
        // Compare two dates (could be of any type supported by the convert
        // function above) and returns:
        //  -1 : if a < b
        //   0 : if a = b
        //   1 : if a > b
        // NaN : if a or b is an illegal date
        // NOTE: The code inside isFinite does an assignment (=).
        return (
            isFinite(a = this.convert(a).valueOf()) &&
                isFinite(b = this.convert(b).valueOf()) ?
                (a > b) - (a < b) :
                NaN
        );
    },
    inRange: function (d, start, end) {
        // Checks if date in d is between dates in start and end.
        // Returns a boolean or NaN:
        //    true  : if d is between start and end (inclusive)
        //    false : if d is before start or after end
        //    NaN   : if one or more of the dates is illegal.
        // NOTE: The code inside isFinite does an assignment (=).
        return (
            isFinite(d = this.convert(d).valueOf()) &&
                isFinite(start = this.convert(start).valueOf()) &&
                isFinite(end = this.convert(end).valueOf()) ?
                start <= d && d <= end :
                NaN
        );
    }
}

function initialize_save_buttons() {

    $('.save_sub_location_button').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                save_sub_location(button);
            });
            button.attr('active', 'true');
        }
    });

    $('.save_tools_and_equipment_type_button').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                save_tools_and_equipment_type($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.save_material_opening_stock').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                save_material_opening_stock($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.save_external_material_transfer').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                save_external_material_transfer($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.receive_external_material_transfer').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                receive_external_material_transfer($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.save_internal_material_transfer').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                save_internal_material_transfer($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.save_requisition, .suspend_requisition').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                save_requisition($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.approve_requisition, .reject_requisition').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                approve_requisition($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.revert_requisition_btn').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {

                var modal = button.closest('.modal');
                var chain_levels = modal.find('.revert_form');

                chain_levels.show();

                button.hide();
            });

            button.attr('active', 'true');
        }
    });

    $('.save_purchase_order').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                save_purchase_order($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.save_pre_ordered_purchase_order').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                save_pre_ordered_purchase_order($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.receive_purchase_order, .preview_purchase_order_grn').each(function () {
        var button = $(this);
        if (button.attr('initialized') != 'true') {
            button.click(function () {
                receive_purchase_order($(this));
            });
            button.attr('initialized', 'true');
        }
    });

    $('.grn_preview_submit').on('click', function () {
        window.location.replace(base_url + "procurements/purchase_orders");
    });

    $('.save_task_progress_update').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                save_task_progress_update($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.save_project_miscellaneous_cost').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                save_project_miscellaneous_cost($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.delete_material_cost').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                delete_material_cost($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.delete_miscellaneous_cost').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                delete_miscellaneous_cost($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.upload_project_excel').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                upload_project_excel($(this));
            });
            button.attr('active', 'true');
        }
    });

    $('.save_bulk_material_cost').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {

                save_bulk_material_cost($(this));
            });
            button.attr('active', 'true');
        }
    });
}

function initialize_common_js() {

    $(function () {
        var viewer = ImageViewer();
        $('.gallery-items').click(function () {
            var imgSrc = this.src,
                highResolutionImage = $(this).data('high-res-img');

            viewer.show(imgSrc, highResolutionImage);
        });
    });

    $('.datepicker').datepicker({ format: 'yyyy-mm-dd' });

    $('.datetime_picker').datetimepicker({
        todayBtn: 1
    });

    $('.searchable').select2({
        width: '100%'
    });
    $('.number_format').priceFormat();

    $('#activity_keyword').keyup(function () {
        var project = $(this).attr('project');
        project = project == 'true';
        delay(function () {
            load_project_activities(project);
        }, 500);
    });

    $('#sub_location_keyword').keyup(function () {
        delay(function () {
            load_location_sub_locations();
        }, 500);
    });

    initialize_save_buttons();

    $(' .dataTables_wrapper').removeClass(' form-inline');

    $('.dt-buttons').addClass('pull-right');
    $('.table').css('width', '100%');

    $('.specific_modal_hide').click(function () {
        var button = $(this);
        if (button.attr('initialized') != 'true') {
            button.closest('.modal').modal('hide');
        }
    });

    // $('.specific_modal_hide').each(function(){
    //     var inner_modal = $(this).closest('.modal .fade');
    //
    //     var outer_modal = inner_modal.parent().parent().parent().closest('.modal');
    //
    //     outer_modal.on('hidden.bs.modal', function (e) {
    //         inner_modal.modal('hide');
    //     });
    // });

    $('.money').priceFormat();

}

function pad(num, size) {
    var s = num + "";
    while (s.length < size) s = "0" + s;
    return s;
}

function formatDate(date) {
    var monthNos = [
        "01", "02", "03",
        "04", "05", "06", "07",
        "08", "09", "10",
        "11", "12"
    ];

    var day = date.getDate();
    var monthIndex = date.getMonth();
    var year = date.getFullYear();

    return year + '-' + monthNos[monthIndex] + '-' + pad(day, 2);
}

function hasOneDayPassed() {
    var date = new Date().toLocaleDateString();
    if (localStorage.getItem('date') == date) {
        return false;
    } else {
        localStorage.setItem('date', date);
        return true;
    }
}

function DaysOfMonth(nYear, nMonth) {
    switch (nMonth) {
        case 0:     // January
            return 31; break;
        case 1:     // February
            if ((nYear % 4) == 0) {
                return 29;
            }
            else {
                return 28;
            };
            break;
        case 2:     // March
            return 31; break;
        case 3:     // April
            return 30; break;
        case 4:     // May
            return 31; break;
        case 5:     // June
            return 30; break;
        case 6:     // July
            return 31; break;
        case 7:     // August
            return 31; break;
        case 8:     // September
            return 30; break;
        case 9:     // October
            return 31; break;
        case 10:     // November
            return 30; break;
        case 11:     // December
            return 31; break;
    }
};

function SkipDate(dDate, skipDays) {
    var nYear = dDate.getFullYear();
    var nMonth = dDate.getMonth();
    var nDate = dDate.getDate();
    var remainDays = skipDays;
    var dRunDate = dDate;

    while (remainDays > 0) {
        remainDays_month = DaysOfMonth(nYear, nMonth) - nDate;
        if (remainDays > remainDays_month) {
            remainDays = remainDays - remainDays_month - 1;
            nDate = 1;
            if (nMonth < 11) { nMonth = nMonth + 1; }
            else {
                nMonth = 0;
                nYear = nYear + 1;
            };
        }
        else {
            nDate = nDate + remainDays;
            remainDays = 0;
        };
        dRunDate = Date(nYear, nMonth, nDate);
    }
    return new Date(nYear, nMonth, nDate);
};

var toast = function (type, message, title) {
    if (type == 'error') {
        title = typeof title !== 'undefined' ? title : 'Error';
        iziToast.error({
            title: title,
            message: message,
            position: 'topRight'
        });
    } else if (type == 'warning') {
        typeof title !== 'undefined' ? title : 'Caution';
        iziToast.warning({
            title: title,
            message: message,
            position: 'topRight'
        });
    } else if (type == 'success') {
        title = typeof title !== 'undefined' ? title : 'Success';
        iziToast.success({
            title: title,
            message: message,
            position: 'topRight'
        });
    } else if (type == 'info') {
        title = typeof title !== 'undefined' ? title : 'Hi';
        iziToast.info({
            title: title,
            message: message,
            position: 'topRight'
        });
    } else {
        iziToast.show({
            title: title,
            message: message,
            position: 'topRight'
        });
    }
};

var display_form_fields_error = function () {
    toast('error', 'Make sure all fields are correctly filled');
};

var successfully_saved_message = function () {

};

initialize_common_js();

$('.save_company_details').click(function () {
    var container_box = $(this).closest('.box');

    var company_name = container_box.find('input[name="company_name"]').val();
    var telephone = container_box.find('input[name="telephone"]').val();
    var address = container_box.find('textarea[name="address"]').val();
    var email = container_box.find('input[name="email"]').val();
    if (company_name != '' && email != '' && address != '') {
        start_spinner();
        var mobile = container_box.find('input[name="mobile"]').val();
        var fax = container_box.find('input[name="fax"]').val();
        var tin = container_box.find('input[name="tin"]').val();
        var vrn = container_box.find('input[name="vrn"]').val();
        var website = container_box.find('input[name="website"]').val();
        var corporate_color = container_box.find('input[name="corporate_color"]').val();
        var tagline = container_box.find('textarea[name="tagline"]').val();
        var captured = container_box.find('input[name="company_logo"]')[0];
        var file = captured.files[0], form_data = false;

        if (window.FormData) {
            form_data = new FormData();
            if (form_data) {
                form_data.append("company_logo", file);
                form_data.append("company_name", company_name);
                form_data.append("telephone", telephone);
                form_data.append("address", address);
                form_data.append("mobile", mobile);
                form_data.append("fax", fax);
                form_data.append("email", email);
                form_data.append("tin", tin);
                form_data.append("vrn", vrn);
                form_data.append("website", website);
                form_data.append("corporate_color", corporate_color);
                form_data.append("tagline", tagline);

                $.ajax({
                    url: base_url + 'administrative_actions/save_company_details/',
                    type: "POST",
                    timeout: 250000,
                    cache: false,
                    data: form_data,
                    processData: false,
                    contentType: false,
                    complete: function () {
                        container_box.find('.box-header').html(
                            '<div class=" col-xs-12 alert bg-green-gradient alert-dismissable">' +
                            '<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>' +
                            'Your Company Details have saved' +
                            '</div>'
                        );
                        stop_spinner();
                    }
                });
            }
        }
    }
});

$('a[href="#company_attachments"]').on('shown.bs.tab', function (e) {
    $('#company_attachment_list').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {

            table.DataTable({
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "attachments/company_attachments_list/",
                    type: 'POST',
                    data: {
                        company_detail_id: table.attr('company_detail_id')
                    }
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No attachments found</div>",
                    "emptyTable": "<div class='alert alert-info'>No attachments found</div>"

                },
                "drawCallback": function () {
                    $('.company_attachment').each(function () {
                        var button = $(this);
                        var button = $(this);
                        var modal = button.closest('.modal');
                        if (button.attr('active') != 'true') {
                            button.click(function () {
                                start_spinner();
                                var form = $(this).closest('form')[0];

                                if (window.FormData) {
                                    formdata = new FormData(form);

                                    if (formdata) {

                                        $.ajax({
                                            url: base_url + 'attachments/save_company_attachment/',
                                            type: "POST",
                                            timeout: 250000,
                                            cache: false,
                                            data: formdata,
                                            processData: false,
                                            contentType: false,
                                            success: function (data) {
                                                modal.find('button').removeAttr('disabled');
                                                form.reset();
                                                modal.modal('hide');
                                                modal.find('.artificial_row').remove();
                                                table.DataTable().draw('page');
                                            },
                                            complete: function () {
                                                stop_spinner();
                                            }
                                        });

                                    }
                                }
                            });
                            button.attr('active', 'true');
                        }
                    });

                    $('.add_upload_attach').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.attr('initialized', 'true');
                            var modal = button.closest('.modal');
                            button.click(function () {
                                var new_row = modal.find('.row_template').clone().removeAttr('style')
                                    .removeClass('row_template hidden').addClass('artificial_row').appendTo(modal.find('tbody'));

                                new_row.find('.row_remover').click(function () {
                                    $(this).closest('tr').remove();
                                });
                            });
                        }
                    });

                    table.find('.delete_attachment').each(function () {
                        delete_attachment($(this), 'company_document');
                    });

                }
            });
            table.attr('initialized', 'true');
        } else {
            table.DataTable().draw('page');
        }
    });
});

$('#audit_trail_report_generator').click(function () {

    var table_container = $('#audit_trail_report_container');
    table_container.html('<div class="alert alert-info">Generating Report..</div>');
    var form_container = $(this).closest('form');
    var action_type = form_container.find(' select[name="action_type"]').val();
    var project_id = form_container.find(' select[name="project_id"]').val();
    var from = form_container.find(' input[name="from"]').val();
    var to = form_container.find(' input[name="to"]').val();

    $.post(
        base_url + "administrative_actions/audit_trail_report",
        {
            action_type: action_type,
            project_id: project_id,
            from: from,
            to: to
        }, function (data) {
            table_container.html(data)
        }
    );


});

function initialize_form_amount_calculator(form, amount_decimal_places) {
    var amount_decimal_places = typeof amount_decimal_places !== 'undefined' ? amount_decimal_places : '';
    form.delegate(' input[name="rate"],  input[name="quantity"]', 'change keyup', function () {
        var rate = form.find(' input[name="rate"]').unmask();
        var quantity = form.find(' input[name="quantity"]').val();
        var amount = parseFloat(rate) * parseFloat(quantity);
        form.find(' input[name="amount"]').val(amount).priceFormat();
    });
}

function calculate_table_total_amount(table) {
    var total_amount = 0;
    table.find('tbody input[name="amount"]').each(function () {
        $(this).priceFormat();
        var amount = $(this).val();
        amount = amount != '' ? parseFloat($(this).unmask()) : 0;
        total_amount += amount;
    });
    table.find('.total_amount_display').html((total_amount).toFixed(2)).priceFormat();
}

/****************************************************
 * HUMAN RESOURCES
 ****************************************************/

$('#employees_list').DataTable({
    colReorder: true,
    "processing": true,
    "serverSide": true,
    "ajax": {
        url: base_url + "human_resources/employees_list/",
        type: 'POST'
    },
    "columns": [
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": true }
    ],
    "language": {
        "zeroRecords": "<div class='alert alert-info'>No matching employees found</div>",
        "emptyTable": "<div class='alert alert-info'>No employees found</div>"
    }
});

$('#user_account_details').each(function () {
    var tab_pane = $(this);
    if (tab_pane.attr('initialized') != 'true') {
        var approval_levels_table = tab_pane.find('.approval_levels_table');
        function initialize_levels_row_adder(container) {
            container.find('.add_approval_level_row').each(function () {
                var button = $(this);
                button.click(function () {
                    var tbody = approval_levels_table.find('tbody');
                    var new_row = tbody.closest('table').find('.row_template').clone().removeAttr('style')
                        .removeClass('row_template').addClass('artificial_row');
                    new_row.find('select').select2({ width: '390px' });
                    if (tbody.attr('has_levels') == 'true') {
                        new_row.appendTo(tbody);
                    } else {
                        tbody.html(new_row);
                        tbody.attr('has_levels', 'true');
                    }
                    new_row.find('.row_remover').click(function () {
                        new_row.closest('tr').remove();
                    });

                    new_row.find('select[name="approval_module_id"]').change(function () {
                        $.post(
                            base_url + "administrative_actions/approval_chain_level_dropdown_options/all",
                            {
                                approval_module_id: $(this).val()
                            }, function (data) {
                                new_row.find('select[name="approval_chain_level_id"]').html(data);
                            }
                        );
                    });

                    new_row.find('select[name="approval_chain_level_id"]').change(function () {
                        var current_selector = $(this);
                        if (current_selector.val() != '') {
                            var selected_level_ids = Array();
                            tbody.find('select[name="approval_chain_level_id"]').each(function () {
                                if (current_selector[0] !== $(this)[0]) {
                                    selected_level_ids.push($(this).val())
                                }
                            });
                            if (selected_level_ids.indexOf(current_selector.val()) != -1) {
                                current_selector.select2('val', '');
                            }
                        }
                    });
                })

            });

            container.find(' .row_remover').click(function () {
                $(this).closest('tr').remove();
            });
        };

        tab_pane.find('.permission_privileges').each(function () {
            var container = $(this);
            var privilege_table = container.find('#user_previlege_table');
            container.find('.checkAll').change(function () {
                if ($(this).is(":checked")) {
                    container.find('.user_permission').prop('checked', $(this).prop("checked"));
                    privilege_table.find("input:checkbox").prop('checked', $(this).prop("checked"));
                }
            });

            container.find('.user_permission').change(function () {
                var user_permission = $(this);
                if (user_permission.not(':checked').length) {
                    container.find('.checkAll').prop('checked', false);
                    privilege_table.find("input:checkbox").prop('checked', false);
                }
            });

            privilege_table.find('.permission_privilege').each(function () {
                var permission_privilege = $(this);
                var user_permission = container.find('.user_permission');
                permission_privilege.change(function () {
                    if (permission_privilege.is(':checked')) {
                        user_permission.is(':checked') ? '' : user_permission.prop('checked', $(this).prop("checked"));
                    }
                });
            });


        });

        initialize_levels_row_adder(approval_levels_table);

        tab_pane.find('.save_employee_credentials').click(function () {

            var password = tab_pane.find('  input[name="password"]').val();
            var confirm_password = tab_pane.find('  input[name="confirm_password"]').val();
            if (password == confirm_password) {
                var username = tab_pane.find('  input[name="username"]').val();
                var user_id = tab_pane.find('  input[name="user_id"]').val();
                var employee_id = tab_pane.find('  input[name="employee_id"]').val();
                var permissions_ids = Array(), permission_privilege_ids = Array(), approval_chain_level_ids = Array();
                var active = tab_pane.find('  input[name="active"]').is(":checked") ? 1 : 0;

                var i = 0;
                tab_pane.find('.permission_privileges').each(function () {
                    var container = $(this);
                    var privilege_table = container.find('#user_previlege_table');
                    var user_permission = container.find('.user_permission');
                    permissions_ids[i] = user_permission.is(":checked") ? user_permission.val() : null;
                    permission_privilege_ids[i] = [];
                    var j = 0;
                    privilege_table.find('.permission_privilege').each(function () {
                        var permission_privilege = $(this);
                        if (permission_privilege.is(":checked")) {
                            permission_privilege_ids[i][j] = permission_privilege.val();
                        } else {
                            permission_privilege_ids[i][j] = null;
                        }
                        j++;
                    });
                    i++;
                });

                tab_pane.find('tbody select[name="approval_chain_level_id"]').each(function () {
                    if ($(this).val()) {
                        approval_chain_level_ids.push($(this).val());
                    }
                });

                $.post(
                    base_url + "human_resource/human_resources/save_user/",
                    {
                        username: username,
                        user_id: user_id,
                        employee_id: employee_id,
                        password: password,
                        active: active,
                        permission_ids: permissions_ids,
                        permission_privilege_ids: permission_privilege_ids,
                        approval_chain_level_ids: approval_chain_level_ids,
                        confidentiality_level_id: tab_pane.find('select[name="confidentiality_level"]').val()

                    }, function (data) {
                        tab_pane.find('#username_and_password_form').html(data.username_and_password_form);
                        tab_pane.find('#user_permissions').html(data.user_permissions);
                        tab_pane.find('#authorised_approvals').html(data.authorised_approvals);
                        toast('success', 'User details were saved successfully');
                    }
                );

            }

        });

        tab_pane.attr('initialized', 'true');
    }
});

$('a[href="#job_positions"]').on('shown.bs.tab', function (e) {
    $('#job_positions_list').DataTable().draw('page');
});

$('a[href="#casual_labour_types"]').on('shown.bs.tab', function (e) {
    $('#casual_labour_type_list').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {

            table.DataTable({
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "human_resources/casual_labour_types_list/",
                    type: 'POST'
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching types found</div>",
                    "emptyTable": "<div class='alert alert-info'>No types found</div>"
                }, "drawCallback": function () {
                    //Save Category
                    $('.save_casual_labour_type_button').each(function () {
                        var button = $(this);
                        if (button.attr('active') != 'true') {
                            var modal = button.closest('.modal');
                            var type_id = modal.find('input[name="type_id"]').val();

                            button.click(function () {
                                var name = modal.find('input[name="name"]').val();

                                if (name != '') {
                                    modal.modal('hide');
                                    var description = modal.find('textarea[name="description"]').val();

                                    $.post(
                                        base_url + "human_resources/save_casual_labour_type",
                                        {
                                            type_id: type_id,
                                            name: name,
                                            description: description
                                        }, function () {
                                            modal.find('form')[0].reset();
                                            table.DataTable().draw('page');
                                        }
                                    );
                                }
                            });
                            button.attr('active', 'true');
                        }
                    });

                    //Delete Category
                    $('.delete_casual_labour_type').each(function () {
                        var button = $(this);
                        var type_id = button.attr('type_id');
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                if (confirm('Are you sure?')) {
                                    $.post(
                                        base_url + "human_resources/delete_casual_labour_type/",
                                        {
                                            type_id: type_id
                                        }
                                    ).complete(function () {
                                        table.DataTable().draw('page');
                                    });
                                }
                            });
                        }
                    });

                    initialize_common_js();
                }
            });

            table.attr('initialized', 'true');
        } else {
            table.DataTable().draw('page');
        }
    });
});

/***************************************************
 * TENDERS
 ***************************************************/

function draw_tender_categorized_datatable(table, level, id) {
    if (table.attr('initialized') != 'true') {
        var columns = level == 'client' || level == '' ? [
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": false }
        ] : [
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": false }
        ];
        table.DataTable({
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "order": [[0, 'desc']],
            "ajax": {
                url: base_url + "tenders/tenders_categorized/" + level + "/" + id,
                type: 'POST'
            },
            "columns": columns,
            "language": {
                "infoFiltered": "",
                "zeroRecords": "<div class='alert alert-info'>No matching tenders found for this client</div>",
                "emptyTable": "<div class='alert alert-info'>No tenders found for this client</div>"
            },
            "drawCallback": function () {
                $('.delete_tender').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete This Tender',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(base_url + "tenders/delete_tender",
                                                {
                                                    tender_id: button.attr('tender_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                });
                                        }
                                    },
                                    cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                                }
                            });
                        });
                    }
                });
            }
        });
        table.attr('initialized', 'true');
    } else {
        table.DataTable().draw('page');
    }
}

$('#tenders_categorized_list').each(function () {
    var table = $(this);
    var category_id = table.attr('category_id');
    draw_tender_categorized_datatable(table, 'project_category', category_id);
});

$('#tenders_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[0, 'desc']],
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "tenders/tenders_list/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching Tender has been found</div>",
                "emptyTable": "<div class='alert alert-info'>No Tenders found</div>"
            }, "drawCallback": function () {

                $('.save_tender').each(function () {
                    var button = $(this);
                    if (button.attr('initilized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');
                            var project_category_id = modal.find('select[name="project_category_id"]').val();
                            var client_id = modal.find('select[name="client_id"]').val();
                            var tender_name = modal.find('input[name="tender_name"]').val();
                            var date_announced = modal.find('input[name="date_announced"]').val();
                            var submission_deadline = modal.find('input[name="submission_deadline"]').val();
                            var date_procured = modal.find('input[name="date_procured"]').val();
                            var procurement_cost = modal.find('input[name="procurement_cost"]').unmask();
                            var procurement_currency_id = modal.find('select[name="procurement_currency_id"]').val();
                            var supervisor_id = modal.find('select[name="supervisor_id"]').val();


                            if (client_id != '' && tender_name != '' && submission_deadline != '' && supervisor_id != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "tenders/save_tenders",
                                    {
                                        project_category_id: project_category_id,
                                        client_id: client_id,
                                        tender_name: tender_name,
                                        date_announced: date_announced,
                                        submission_deadline: submission_deadline,
                                        date_procured: date_procured,
                                        procurement_cost: procurement_cost,
                                        procurement_currency_id: procurement_currency_id,
                                        supervisor_id: supervisor_id
                                    }, function (data) {
                                        toast('success', 'Tender saved!')
                                        modal.find('form')[0].reset();
                                        initialize_common_js();
                                    }
                                ).complete(function () {
                                    modal.find('form')[0].reset();
                                    table.DataTable().draw('page');
                                    initialize_common_js();
                                    stop_spinner();
                                });

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_tender').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete This Tender',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(base_url + "tenders/delete_tender",
                                                {
                                                    tender_id: button.attr('tender_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                });
                                        }
                                    },
                                    cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                                }
                            });
                        });
                    }
                });

                initialize_common_js();
            }
        });
    } else {
        table.attr('initialized', 'true');
        table.DataTable().draw('page');
    }
});

$('#requirement_type_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "Tenders/requirement_type_list/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching requirement type found</div>",
                "emptyTable": "<div class='alert alert-info'>No requirement type found</div>"
            }, "drawCallback": function () {

                $('.save_requirement_type').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');

                            var requirement_type_id = modal.find('input[name="requirement_type_id"]').val();
                            var requirement_name = modal.find('input[name="requirement_name"]').val();
                            var description = modal.find('textarea[name="description"]').val();

                            if (requirement_name != '' && description != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "Tenders/save_requirement_type",
                                    {
                                        requirement_type_id: requirement_type_id,
                                        requirement_name: requirement_name,
                                        description: description
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Tender requirement type saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_requirement_type').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Requirement Type.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "Tenders/delete_requirement_type",
                                                {
                                                    requirement_type_number: button.attr('requirement_type_number')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });

                initialize_common_js();

            }
        });
    }
});

$('a[href="#tender_components"]').each(function () {
    var tab_link = $(this);
    if (tab_link.attr('initialized') != 'true') {
        var load_tender_components = function () {
            var components_container = $('#components_container');
            var tender_id = components_container.attr('tender_id');
            var keyword = $('#component_keyword').val();
            $.post(
                base_url + "tenders/components_list/",
                {
                    keyword: keyword,
                    tender_id: tender_id
                }, function (data) {
                    components_container.html(data);
                    $('.save_tender_component').each(function () {
                        var button = $(this);

                        if (button.attr('initialized') != 'true') {

                            button.click(function () {
                                var modal = button.closest('.modal');
                                var component_name = modal.find('input[name="component_name"]').val();
                                var tender_id = modal.find('input[name="tender_id"]').val();
                                var tender_component_id = modal.find('input[name="tender_component_id"]').val();
                                var lumpsum_price = modal.find('input[name="lumpsum_price"]').unmask();
                                if (component_name != '') {
                                    start_spinner();
                                    modal.modal('hide');
                                    $.post(
                                        base_url + "tenders/save_tender_component/",
                                        {
                                            component_name: component_name,
                                            tender_id: tender_id,
                                            tender_component_id: tender_component_id,
                                            lumpsum_price: lumpsum_price
                                        }, function () {
                                            modal.find('form')[0].reset();
                                            load_tender_components();
                                            stop_spinner();
                                        }
                                    );
                                } else {
                                    display_form_fields_error();
                                }
                            });
                            button.attr('initialized', 'true');
                        }
                    });

                    $('.delete_tender_component').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                $.confirm({
                                    title: 'Delete This Component',
                                    content: 'This action is irreversible! Are you sure?',
                                    buttons: {
                                        confirm: {
                                            text: 'Confirm Delete',
                                            btnClass: 'btn btn-danger',
                                            action: function () {
                                                start_spinner();
                                                $.post(base_url + "tenders/delete_tender_component",
                                                    {
                                                        component_id: button.attr('component_id')
                                                    }, function () {
                                                        load_tender_components();
                                                        stop_spinner();
                                                    });
                                            }
                                        },
                                        cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                                    }
                                });
                            });
                            button.attr('initialized', 'true');
                        }
                    });

                    $('.tender_subcomponents_list').each(function () {
                        var table = $(this);
                        if (table.attr('initialized') != 'true') {
                            var tender_component_id = table.attr('tender_component_id');
                            table.DataTable({
                                "order": [[1, "asc"]],
                                colReorder: true,
                                "processing": true,
                                "serverSide": true,
                                "ajax": {
                                    url: base_url + "tenders/tender_sub_components/" + tender_component_id,
                                    type: 'POST'
                                },
                                "columns": [
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": false }
                                ],
                                "language": {
                                    "infoFiltered": "",
                                    "zeroRecords": "<div class='alert alert-info'>No matching subcomponent has been found</div>",
                                    "emptyTable": "<div class='alert alert-info'>No subcomponents found</div>"
                                },
                                "drawCallback": function () {

                                    table.find('tr td:last-child').attr('nowrap', 'nowrap');

                                    table.closest('.box').find('.save_sub_component').each(function () {
                                        var button = $(this);
                                        if (button.attr('initialized') != 'true') {
                                            button.click(function () {
                                                var modal = button.closest('.modal');
                                                var sub_component_name = modal.find('input[name="sub_component_name"]').val();
                                                var sub_component_id = modal.find('input[name="sub_component_id"]').val();
                                                var lumpsum_price = modal.find('input[name="lumpsum_price"]').unmask();
                                                if (sub_component_name != '') {
                                                    start_spinner();
                                                    modal.modal('hide');
                                                    $.post(
                                                        base_url + "tenders/save_tender_sub_components/",
                                                        {
                                                            sub_component_name: sub_component_name,
                                                            tender_component_id: tender_component_id,
                                                            sub_component_id: sub_component_id,
                                                            lumpsum_price: lumpsum_price
                                                        }, function () {
                                                            stop_spinner();
                                                            modal.find('form')[0].reset();
                                                            table.DataTable().draw('page');
                                                        }
                                                    );
                                                } else {
                                                    display_form_fields_error();
                                                }
                                            });
                                            button.attr('initialized', 'true');
                                        }
                                    });

                                    $('.delete_sub_component').each(function () {
                                        var button = $(this);
                                        if (button.attr('initialized') != 'true') {
                                            button.click(function () {
                                                $.confirm({
                                                    title: 'Delete Subcomponent',
                                                    content: 'This action is irreversible! Are you sure?',
                                                    buttons: {
                                                        confirm: {
                                                            text: 'Confirm Delete',
                                                            btnClass: 'btn btn-danger',
                                                            action: function () {
                                                                start_spinner();
                                                                $.post(base_url + "tenders/delete_tender_sub_component",
                                                                    {
                                                                        sub_component_id: button.attr('sub_component_id')
                                                                    }, function (data) {
                                                                        stop_spinner();
                                                                        table.DataTable().draw('page');
                                                                    });
                                                            }
                                                        },
                                                        cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                                                    }
                                                });
                                            });
                                            button.attr('initialized', 'true');
                                        }
                                    });

                                    $('a[href="#tender_material_price_' + tender_component_id + '"]').each(function () {
                                        var tab_link = $(this);
                                        tab_link.on('shown.bs.tab', function (e) {
                                            $(tab_link.attr('href')).find('#material_price_list').each(function () {
                                                table = $(this);

                                                if (table.attr('initialized') != 'true') {
                                                    table.each(function () {
                                                        var table = $(this);
                                                        if (table.attr('initialized') != 'true') {
                                                            table.DataTable({
                                                                "order": [[1, "desc"]],
                                                                colReorder: true,
                                                                "processing": true,
                                                                "serverSide": true,
                                                                "ajax": {
                                                                    url: base_url + "Tenders/material_price_list/" + tender_component_id,
                                                                    type: 'POST'
                                                                },
                                                                "columns": [
                                                                    { "orderable": true },
                                                                    { "orderable": true },
                                                                    { "orderable": true },
                                                                    { "orderable": true },
                                                                    { "orderable": false }
                                                                ],
                                                                "language": {
                                                                    "zeroRecords": "<div class='alert alert-info'>No matching material price found</div>",
                                                                    "emptyTable": "<div class='alert alert-info'>No material price found</div>"
                                                                }, "drawCallback": function () {

                                                                    table.find('td:last-child').attr('nowrap', 'nowrap');
                                                                    table.closest('.box').find('.material_price_form').each(function () {
                                                                        var modal = $(this);

                                                                        function initialize_remove_button(button) {
                                                                            button.click(function () {
                                                                                $(this).closest('tr').remove();
                                                                            });

                                                                        }

                                                                        initialize_remove_button(modal.find('.remove_row'));

                                                                        modal.find('.material_price_row_adder').click(function () {
                                                                            var tbody = modal.find('tbody');
                                                                            var new_row = modal.find('.material_price_row_template').clone();
                                                                            new_row.removeAttr('style').removeClass('material_price_row_template').addClass('artificial_row').appendTo(tbody);

                                                                            new_row.find('select').select2();

                                                                            initialize_remove_button(modal.find('.remove_row'));

                                                                            new_row.find('select[name="material_id"]').each(function () {
                                                                                var selector = $(this);
                                                                                selector.change(function () {
                                                                                    if (selector.val() != '') {
                                                                                        load_material_unit(selector, 'tr');
                                                                                    } else {
                                                                                        selector.closest('.modal').find('.display_unit').val();
                                                                                    }
                                                                                });
                                                                                load_material_last_approved_price(selector);
                                                                            });
                                                                        });

                                                                        $('.save_material_price').each(function () {
                                                                            var button = $(this);
                                                                            if (button.attr('initialized') != '') {
                                                                                button.click(function () {
                                                                                    var modal = button.closest('.modal');
                                                                                    var tender_component_id = modal.find('input[name="tender_component_id"]').val();
                                                                                    var material_ids = new Array(), remarks = new Array(), quantities = new Array(), prices = new Array();
                                                                                    var i = 0;
                                                                                    var tbody = modal.find('tbody');

                                                                                    tbody.find('select[name="material_id"]').each(function () {
                                                                                        var material_id_select = $(this).val();
                                                                                        var row = $(this).closest('tr');
                                                                                        material_ids[i] = material_id_select;
                                                                                        remarks[i] = row.find('textarea[name="remarks"]').val();
                                                                                        quantities[i] = row.find('input[name="quantity"]').val();
                                                                                        prices[i] = row.find('input[name="rate"]').unmask();
                                                                                        i++;
                                                                                    });

                                                                                    modal.modal('hide');
                                                                                    start_spinner();
                                                                                    $.post(
                                                                                        base_url + "tenders/save_material_price",
                                                                                        {
                                                                                            material_ids: material_ids,
                                                                                            remarks: remarks,
                                                                                            tender_component_id: tender_component_id,
                                                                                            quantities: quantities,
                                                                                            prices: prices
                                                                                        }, function (data) {
                                                                                            stop_spinner();
                                                                                            modal.find('form')[0].reset();
                                                                                            modal.find('.artificial_row').remove();
                                                                                            table.DataTable().draw('page');
                                                                                        }

                                                                                    ).complete();

                                                                                });
                                                                                button.attr('initialized', 'true');
                                                                            }
                                                                        });

                                                                        modal.find('select[name="material_id"]').each(function () {
                                                                            var selector = $(this);
                                                                            load_material_last_approved_price(selector);
                                                                            selector.change(function () {
                                                                                if (selector.val() != '') {
                                                                                    load_material_unit(selector, 'tr');
                                                                                } else {
                                                                                    selector.closest('.modal').find('.display_unit').val();
                                                                                }
                                                                            });
                                                                        });


                                                                    });

                                                                    $('.save_edit_material_price').each(function () {
                                                                        var button = $(this);
                                                                        if (button.attr('initialized') != 'true') {
                                                                            button.click(function () {
                                                                                var modal = button.closest('.modal');

                                                                                var material_id = modal.find('select[name="material_id"]').val();
                                                                                var quantity = modal.find('input[name="quantity"]').val();
                                                                                var price = modal.find('input[name="price"]').unmask();
                                                                                var description = modal.find('textarea[name="remarks"]').val();

                                                                                modal.modal('hide');
                                                                                start_spinner();
                                                                                $.post(
                                                                                    base_url + "Tenders/save_edit_material_price",
                                                                                    {
                                                                                        material_id: material_id,
                                                                                        quantity: quantity,
                                                                                        price: price,
                                                                                        description: description
                                                                                    }, function (data) {

                                                                                        modal.find('form')[0].reset();
                                                                                        table.DataTable().draw('page');
                                                                                        stop_spinner();
                                                                                        toast('success', 'Tender material price edited successfuly!');

                                                                                    }
                                                                                )
                                                                            });
                                                                            button.attr('initialized', 'true');
                                                                        }

                                                                    });

                                                                    $('.delete_material_price').each(function () {
                                                                        var button = $(this);
                                                                        if (button.attr('initialized') != 'true') {
                                                                            button.click(function () {
                                                                                $.confirm({
                                                                                    title: 'Delete Material Price.',
                                                                                    content: 'This action is irreversible! Are you sure?',
                                                                                    buttons: {
                                                                                        confirm: {
                                                                                            text: 'Confirm Delete',
                                                                                            btnClass: 'btn btn-danger',
                                                                                            action: function () {
                                                                                                start_spinner();
                                                                                                $.post(
                                                                                                    base_url + "Tenders/delete_material_price",
                                                                                                    {
                                                                                                        material_price_id: button.attr('material_price_number')
                                                                                                    }, function (data) {
                                                                                                        table.DataTable().draw('page');
                                                                                                        stop_spinner();
                                                                                                        toast('success', 'Tender material price deleted successfuly!');
                                                                                                    }
                                                                                                );
                                                                                            }
                                                                                        },
                                                                                        cancel: {
                                                                                            text: "Cancel",
                                                                                            btnClass: 'btn btn-default'
                                                                                        }
                                                                                    }
                                                                                });
                                                                            });
                                                                            button.attr('initialized', 'true')
                                                                        }
                                                                    });

                                                                    initialize_common_js();

                                                                }
                                                            });
                                                        }
                                                    });
                                                    table.attr('initialized', 'true');
                                                } else {
                                                    table.DataTable().draw('page')
                                                }
                                            });
                                        });
                                    });

                                    $('a[href="#tender_lumpsum_price_' + tender_component_id + '"]').each(function () {
                                        var tab_link = $(this);
                                        tab_link.on('shown.bs.tab', function (e) {
                                            $(tab_link.attr('href')).find('.lumpsum_price_list').each(function () {
                                                table = $(this);
                                                if (table.attr('initialized') != 'true') {
                                                    table.each(function () {
                                                        var table = $(this);
                                                        if (table.attr('initialized') != 'true') {
                                                            table.DataTable({
                                                                "order": [[1, "desc"]],
                                                                colReorder: true,
                                                                "processing": true,
                                                                "serverSide": true,
                                                                "ajax": {
                                                                    url: base_url + "Tenders/lumpsum_price_list/" + tender_component_id,
                                                                    type: 'POST'
                                                                },
                                                                "columns": [
                                                                    { "orderable": true },
                                                                    { "orderable": true },
                                                                    { "orderable": false }
                                                                ],
                                                                "language": {
                                                                    "zeroRecords": "<div class='alert alert-info'>No matching material price found</div>",
                                                                    "emptyTable": "<div class='alert alert-info'>No material price found</div>"
                                                                }, "drawCallback": function () {

                                                                    $('.lumpsum_price_form').each(function () {
                                                                        var modal = $(this);

                                                                        var initialize_remove_button = function (button) {
                                                                            button.click(function () {
                                                                                $(this).closest('tr').remove();
                                                                            });

                                                                        }

                                                                        initialize_remove_button(modal.find('.remove_row'));

                                                                        modal.find('.lumpsum_price_row_adder').each(function () {
                                                                            var button = $(this);
                                                                            if (button.attr('initialized') != 'true') {

                                                                                button.click(function () {
                                                                                    var tbody = modal.find('tbody');
                                                                                    var new_row = modal.find('.lumpsum_price_row_template').clone();
                                                                                    new_row.removeAttr('style').removeClass('lumpsum_price_row_template').addClass('artificial_row').appendTo(tbody);

                                                                                    new_row.find('.number_format').priceFormat();
                                                                                    new_row.find('select').addClass('searchable');

                                                                                    initialize_remove_button(modal.find('.remove_row'));


                                                                                });

                                                                                button.attr('initialized', 'true');
                                                                            }

                                                                        });

                                                                        table.closest('.box').find('.save_lumpsum_price').each(function () {
                                                                            var button = $(this);
                                                                            var modal = button.closest('.modal');
                                                                            if (button.attr('initialized') != 'true') {
                                                                                button.click(function () {

                                                                                    modal.modal('hide');
                                                                                    start_spinner();
                                                                                    var description = new Array(),
                                                                                        amount = new Array();
                                                                                    var i = 0;
                                                                                    modal.find('tbody tr').each(function () {
                                                                                        var row = $(this);
                                                                                        description[i] = row.find('input[name="description"]').val();
                                                                                        tender_component_id[i] = row.find('input[name="tender_component_id"]').val();
                                                                                        amount[i] = row.find('input[name="amount"]').unmask();
                                                                                        i++;
                                                                                    });
                                                                                    $.post(
                                                                                        base_url + "tenders/save_lumpsum_price",
                                                                                        {

                                                                                            description: description,
                                                                                            amount: amount,
                                                                                            tender_component_id: tender_component_id
                                                                                        }, function (data) {
                                                                                            stop_spinner();
                                                                                            modal.find('form')[0].reset();
                                                                                            modal.find('.artificial_row').remove();
                                                                                            table.DataTable().draw('page');
                                                                                        }
                                                                                    ).complete();

                                                                                });

                                                                                button.attr('initialized', 'true');
                                                                            }

                                                                        });


                                                                    });

                                                                    $('.save_edit_lumpsum_price').each(function () {
                                                                        var button = $(this);
                                                                        if (button.attr('initialized') != 'true') {
                                                                            button.click(function () {
                                                                                var modal = button.closest('.modal');

                                                                                var tender_lumpsum_price_id = modal.find('input[name="tender_lumpsum_price_id"]').val();
                                                                                var description = modal.find('input[name="description"]').val();
                                                                                var amount = modal.find('input[name="amount"]').unmask();

                                                                                modal.modal('hide');
                                                                                start_spinner();
                                                                                $.post(
                                                                                    base_url + "Tenders/save_edit_lumpsum_price",
                                                                                    {

                                                                                        tender_lumpsum_price_id: tender_lumpsum_price_id,
                                                                                        description: description,
                                                                                        amount: amount,

                                                                                    }, function (data) {

                                                                                        modal.find('form')[0].reset();
                                                                                        stop_spinner();
                                                                                        toast('success', 'Tender lumpsum price edited successfuly!');
                                                                                        table.DataTable().draw('page');
                                                                                    }
                                                                                )
                                                                            });
                                                                            button.attr('initialized', 'true');
                                                                        }

                                                                    });

                                                                    $('.delete_lumpsum_price').each(function () {
                                                                        var button = $(this);
                                                                        if (button.attr('initialized') != 'true') {
                                                                            button.click(function () {
                                                                                $.confirm({
                                                                                    title: 'Delete Lumpsum Price.',
                                                                                    content: 'This action is irreversible! Are you sure?',
                                                                                    buttons: {
                                                                                        confirm: {
                                                                                            text: 'Confirm Delete',
                                                                                            btnClass: 'btn btn-danger',
                                                                                            action: function () {
                                                                                                start_spinner();
                                                                                                $.post(
                                                                                                    base_url + "Tenders/delete_lumpsum_price",
                                                                                                    {
                                                                                                        lumpsum_price_number: button.attr('lumpsum_price_number')
                                                                                                    }, function (data) {
                                                                                                        stop_spinner();
                                                                                                        table.DataTable().draw('page');

                                                                                                        toast('success', 'Tender lumpsum price deleted successfuly!');
                                                                                                    }
                                                                                                );
                                                                                            }
                                                                                        },
                                                                                        cancel: {
                                                                                            text: "Cancel",
                                                                                            btnClass: 'btn btn-default'
                                                                                        }
                                                                                    }
                                                                                });
                                                                            });
                                                                            button.attr('initialized', 'true')
                                                                        }
                                                                    });


                                                                    initialize_common_js();

                                                                }
                                                            });
                                                        }
                                                    });
                                                    table.attr('initialized', 'true');
                                                } else {
                                                    table.DataTable().draw('page')
                                                }
                                            });
                                        });
                                    });

                                    initialize_common_js();
                                }
                            });
                            table.attr('initialized', 'true');
                        } else {
                            table.DataTable().draw('page');
                        }
                    });


                    initialize_common_js();
                }
            );
        }
        tab_link.on('shown.bs.tab', function (e) {
            load_tender_components();
        });
        tab_link.attr('initialized', 'true');
    }
});

$('a[href="#tender_requirements"]').on('shown.bs.tab', function (e) {
    $('#requirements_list').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                "order": [[1, "desc"]],
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "Tenders/requirement_list/",
                    type: 'POST'
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching requirement found</div>",
                    "emptyTable": "<div class='alert alert-info'>No requirement found</div>"
                }, "drawCallback": function () {

                    $('.save_requirement').each(function () {
                        var button = $(this);
                        if (button.attr('initilized') != 'true') {
                            button.click(function () {
                                var modal = button.closest('.modal');
                                var tender_requirement_id = modal.find('select[name="tender_requirement_id"]').val();
                                var tender_id = modal.find('input[name="tender_id"]').val();
                                var description = modal.find('textarea[name="description"]').val();

                                if (tender_requirement_id != '' && tender_id != '') {
                                    modal.modal('hide');
                                    start_spinner();
                                    $.post(
                                        base_url + "Tenders/save_requirement",
                                        {
                                            tender_requirement_id: tender_requirement_id,
                                            tender_id: tender_id,
                                            description: description
                                        }, function (data) {
                                            toast('success', 'Tender requirement saved!')
                                            modal.find('form')[0].reset();
                                            table.DataTable().draw('page');
                                            stop_spinner();
                                        }
                                    )

                                } else {
                                    display_form_fields_error()
                                }

                            });
                            button.attr('initialized', 'true');
                        }
                    });

                    initialize_common_js();

                }
            });
            table.attr('initialized', 'true');
        } else {
            table.DataTable().draw('page');
        }
    });
});

$('a[href="#tender_attachments"]').on('shown.bs.tab', function (e) {
    $('#tender_attachment_list').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {

            table.DataTable({
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "attachments/tender_attachments_list/",
                    type: 'POST',
                    data: {
                        tender_id: table.attr('tender_id')
                    }
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No attachments found</div>",
                    "emptyTable": "<div class='alert alert-info'>No attachments found</div>"

                },
                "drawCallback": function () {
                    $('.tender_attach').each(function () {
                        var button = $(this);
                        var modal = button.closest('.modal');
                        if (button.attr('active') != 'true') {
                            button.click(function () {
                                start_spinner();
                                var form = $(this).closest('form')[0];

                                if (window.FormData) {
                                    formdata = new FormData(form);

                                    if (formdata) {

                                        $.ajax({
                                            url: base_url + 'attachments/save_tender_attachment/',
                                            type: "POST",
                                            timeout: 250000,
                                            cache: false,
                                            data: formdata,
                                            processData: false,
                                            contentType: false,
                                            success: function (data) {
                                                modal.find('button').removeAttr('disabled');
                                                form.reset();
                                                modal.modal('hide');
                                                modal.find('.artificial_row').remove();
                                                table.DataTable().draw('page');
                                            },
                                            complete: function () {
                                                stop_spinner();
                                            }
                                        });

                                    }
                                }
                            });
                            button.attr('active', 'true');
                        }
                    });

                    table.find('.delete_attachment').each(function () {
                        delete_attachment($(this), 'tender_attachment');
                    });

                }
            });
            table.attr('initialized', 'true');
        } else {
            table.DataTable().draw('page');
        }
    });
});

$('.add_upload_file').each(function () {
    var button = $(this);
    if (button.attr('initialized') != 'true') {
        button.attr('initialized', 'true');
        var modal = button.closest('.modal');
        button.click(function () {
            var new_row = modal.find('.row_template').clone().removeAttr('style')
                .removeClass('row_template hidden').addClass('artificial_row').appendTo(modal.find('tbody'));

            new_row.find('.row_remover').click(function () {
                $(this).closest('tr').remove();
            });
        });
    }
});

/***************************************************
 * PROJECTS
 ***************************************************/

$('#projects_list').each(function () {
    var table = $(this);
    var category_id = table.attr('category_id');
    table.DataTable({
        colReorder: true,
        "processing": true,
        "serverSide": true,
        "ajax": {
            url: base_url + "projects/projects_list/" + category_id,
            type: 'POST'
        },
        "columns": [
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": false }
        ],
        "language": {
            "zeroRecords": "<div class='alert alert-info'>No matching projects found</div>",
            "emptyTable": "<div class='alert alert-info'>No projects found</div>"
        }
    });
});

$('a[href="#project_details"]').on('shown.bs.tab', function (e) {
    start_spinner();
    var project_id = $(this).attr('project_id');
    $.post(
        base_url + "projects/project_summary",
        {
            project_id: project_id
        }, function (data) {
            $('#project_summary').html(data);
        }
    ).complete(function () {
        stop_spinner();
    });
});

$('a[href="#project_budgets"]').on('shown.bs.tab', function (e) {
    var level = "project";
    $('#project_tasks_budget_table').each(function () {
        var table = $(this);
        var project_id = table.attr('project_id');
        var activity_field = table.closest('.box ').find('select[name="activity_id"]');
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                'processing': true,
                'serverSide': true,
                'ajax': {
                    url: base_url + "Tasks/tasks_list/" + level,
                    type: 'POST',
                    data: function (d) {
                        d.project_id = project_id;
                        d.activity_id = activity_field.val();
                    }
                },
                'columns': [
                    { 'orderable': true },
                    { 'orderable': true },
                    { 'orderable': true },
                    { 'orderable': true },
                    { 'orderable': false },
                    { 'orderable': false },
                    { 'orderable': false }
                ],
                'language': {
                    "zeroRecords": "<div class='alert alert-info'>No tasks found</div>",
                    "emptyTable": "<div class='alert alert-info'>No task found</div>"
                },
                'drawCallback': function () {
                    table.find('tr').each(function () {
                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                    });

                    activity_field.each(function () {
                        if (activity_field.attr('initialized') != 'true') {
                            activity_field.change(function () {
                                table.DataTable().draw('page');
                            });
                            activity_field.attr('initialized', 'true');
                        }
                    });

                    $('.task_budget_form').each(function () {
                        var modal = $(this);

                        if (modal.attr('initialized') != 'true') {
                            modal.on('shown.bs.modal', function (e) {
                                var controller = base_url + "budgets/budget_items_list/";
                                var initialize_budget_datatable = function (budget_type, table_columns, additional_call_back_function) {
                                    var table_class = modal.find('.' + budget_type + '_budget_items');
                                    table_class.each(function () {
                                        var table = $(this);
                                        if (table.attr('initialized') != 'true') {

                                            var cost_center_id = table.attr('task_id');
                                            var cost_center_level = "task";
                                            cost_center_id = cost_center_id == '' ? $(this).attr('project_id') : cost_center_id;
                                            var url = controller + cost_center_level + '/' + cost_center_id;

                                            table.DataTable({
                                                colReorder: true,
                                                "processing": true,
                                                "serverSide": true,
                                                "ajax": {
                                                    url: url,
                                                    type: 'POST',
                                                    data: { 'budget_type': budget_type },
                                                },
                                                "columns": table_columns,
                                                "language": {
                                                    "zeroRecords": "<div class='alert alert-info'>No matching budget items found</div>",
                                                    "emptyTable": "<div class='alert alert-info'>No budget items found</div>"
                                                }, "drawCallback": function (settings) {

                                                    //Update budget total at the footer
                                                    table.find('#total_budget_amount_display').text(settings.json.budget_total).priceFormat();

                                                    table.find('tr').each(function () {
                                                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                                                    });

                                                    //Initialize material budget form
                                                    additional_call_back_function();

                                                    //Delete material budget item delete
                                                    table.find('.budget_item_delete').each(function () {
                                                        var button = $(this);
                                                        if (button.attr('active') != 'true') {
                                                            button.click(function () {
                                                                if (confirm('Are you sure?')) {
                                                                    start_spinner();
                                                                    $.post(
                                                                        base_url + "budgets/budget_item_delete/",
                                                                        {
                                                                            budget_type: budget_type,
                                                                            item_id: button.attr('item_id')
                                                                        }
                                                                    ).complete(function () {
                                                                        stop_spinner();
                                                                        table.DataTable().draw('page');
                                                                    });
                                                                }
                                                                button.attr('active', true);
                                                            });
                                                        }
                                                    });
                                                    initialize_common_js();

                                                }
                                            });

                                            initialize_common_js();
                                            table.attr('initialized', 'true');
                                        } else {
                                            table.DataTable().draw('page');
                                        }
                                    });
                                };

                                var material_form_initializer = function () {
                                    $('.material_budget_form').each(function () {
                                        var modal = $(this);
                                        if (modal.attr('initialized') != 'true') {
                                            modal.on('show.bs.modal', function (e) {
                                                var container_box = modal.closest('.box');
                                                var form_cost_center_selector = modal.find('input[name="cost_center_id"]');
                                                var material_selector = modal.find('.budget_material_selector');

                                                var load_material_options = function () {
                                                    form_cost_center_selector = modal.find('input[name="cost_center_id"]');
                                                    var cost_center_id = form_cost_center_selector.val();
                                                    var cost_center_level = cost_center_id.trim() != '' ? 'task' : 'project';
                                                    cost_center_id = cost_center_id.trim() != '' ? cost_center_id : modal.find('input[name="project_id"]').val();

                                                    if (material_selector) {
                                                        start_spinner();
                                                        material_selector.val('');
                                                        $.post(
                                                            base_url + "budgets/budget_material_options",
                                                            {
                                                                cost_center_level: cost_center_level,
                                                                cost_center_id: cost_center_id
                                                            }, function (data) {
                                                                material_selector.html(data);
                                                            }
                                                        ).complete(function () {
                                                            stop_spinner();
                                                        });
                                                    }
                                                };

                                                load_material_options();

                                                initialize_form_amount_calculator(modal.find('form'));

                                                if (material_selector.attr('initialized') != 'true') {
                                                    material_selector.change(function () {
                                                        load_material_unit($(this), 'form');
                                                    });
                                                    material_selector.attr('initialized', 'true');
                                                }

                                                //Save material budget item

                                                modal.find('.save_material_budget_item').each(function () {
                                                    var button = $(this);
                                                    if (button.attr('initialized') != 'true') {
                                                        button.click(function () {
                                                            var modal = button.closest('.modal');
                                                            var material_item_id = modal.find('select[name="material_item_id"]').val();
                                                            var quantity = modal.find('input[name="quantity"]').val();
                                                            var project_id = modal.find('input[name="project_id"]').val();
                                                            if (quantity > 0 && material_item_id != '') {
                                                                start_spinner();
                                                                modal.modal('hide');
                                                                var item_id = modal.find('input[name="item_id"]').val();
                                                                var rate = modal.find('input[name="rate"]').unmask();
                                                                var description = modal.find('textarea[name="description"]').val();
                                                                var cost_center_id = form_cost_center_selector.val().trim();

                                                                $.post(
                                                                    base_url + "budgets/save_material_budget_item/",
                                                                    {
                                                                        item_id: item_id,
                                                                        project_id: project_id,
                                                                        cost_center_id: cost_center_id,
                                                                        material_item_id: material_item_id,
                                                                        rate: rate,
                                                                        quantity: quantity,
                                                                        description: description
                                                                    }
                                                                ).complete(function () {
                                                                    //reset form
                                                                    var form = button.closest('form');
                                                                    form[0].reset();
                                                                    if (item_id.trim() == '') {
                                                                        material_selector.select2('val', '');
                                                                    }
                                                                    container_box.find('select[name="cost_center_id"]').val(cost_center_id);

                                                                    //Notify
                                                                    toast('success', 'Material Budget has been successfully saved');

                                                                    //Redraw table
                                                                    var cost_center_level = cost_center_id == '' ? 'project' : 'task';
                                                                    var table = container_box.find('.material_budget_items');
                                                                    cost_center_id = cost_center_id == '' ? table.attr('project_id') : cost_center_id;
                                                                    var url = controller + cost_center_level + '/' + cost_center_id;
                                                                    table.DataTable().ajax.url(url).load();
                                                                    stop_spinner();
                                                                });
                                                            } else {
                                                                display_form_fields_error();
                                                            }
                                                        });
                                                        button.attr('initialized', 'true');
                                                    }
                                                });
                                            });
                                            modal.attr('initialized', 'true');
                                        }
                                    });
                                };

                                var initialize_permanent_labour_tab = function () {
                                    initialize_budget_datatable(
                                        'permanent_labour',
                                        [
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": false }
                                        ],
                                        function () {
                                            $('.permanent_labour_budget_form').each(function () {
                                                var modal = $(this);
                                                if (modal.attr('initialized') != 'true') {
                                                    modal.on('show.bs.modal', function (e) {
                                                        var container_box = modal.closest('.box');
                                                        var form_cost_center_selector = modal.find('input[name="cost_center_id"]');
                                                        var rate_mode_selector = modal.find('select[name="rate_mode"]');
                                                        var job_position_selector = modal.find('.budget_job_position_selector');

                                                        var load_job_position_options = function () {
                                                            form_cost_center_selector = modal.find('input[name="cost_center_id"]');
                                                            var cost_center_id = form_cost_center_selector.val();
                                                            var cost_center_level = cost_center_id.trim() != '' ? 'task' : 'project';
                                                            cost_center_id = cost_center_id.trim() != '' ? cost_center_id : modal.find('input[name="project_id"]').val();

                                                            if (job_position_selector) {
                                                                start_spinner();
                                                                job_position_selector.val('');
                                                                $.post(
                                                                    base_url + "budgets/budget_job_position_options",
                                                                    {
                                                                        cost_center_level: cost_center_level,
                                                                        cost_center_id: cost_center_id,
                                                                        rate_mode: rate_mode_selector.val()
                                                                    }, function (data) {
                                                                        job_position_selector.html(data);
                                                                    }
                                                                ).complete(function () {
                                                                    stop_spinner();
                                                                });
                                                            }
                                                        };

                                                        load_job_position_options();

                                                        if (form_cost_center_selector.attr('initialized') != 'true') {
                                                            form_cost_center_selector.change(load_job_position_options);
                                                            form_cost_center_selector.attr('initialized', 'true');
                                                        }

                                                        if (rate_mode_selector.attr('initialized') != 'true') {
                                                            rate_mode_selector.change(load_job_position_options);
                                                            rate_mode_selector.attr('initialized', 'true');
                                                        }
                                                        ;

                                                        job_position_selector.change(function () {
                                                            start_spinner();

                                                            $.post(
                                                                base_url + "human_resources/job_position_average_salary",
                                                                {
                                                                    job_position_id: $(this).val()
                                                                }, function (data) {
                                                                    modal.find('input[name="salary_rate"]').val(data).priceFormat();
                                                                    stop_spinner();
                                                                }
                                                            );
                                                        });

                                                        modal.on('change keyup',
                                                            'input[name="allowance_rate"], input[name="salary_rate"],' +
                                                            ' input[name="duration"], input[name="no_of_staff"]',
                                                            function () {
                                                                var duration = parseFloat(modal.find('input[name="duration"]').val());
                                                                var no_of_staff = parseFloat(modal.find('input[name="no_of_staff"]').val());
                                                                var allowance_rate = modal.find('input[name="allowance_rate"]').unmask();
                                                                var salary_rate = modal.find('input[name="salary_rate"]').unmask();
                                                                var base_amount = duration * no_of_staff;
                                                                var salary_amount = base_amount * salary_rate;
                                                                var allowance_amount = allowance_rate * base_amount;
                                                                modal.find('input[name="allowance_amount"]').val(allowance_amount).priceFormat();
                                                                modal.find('input[name="salary_amount"]').val(salary_amount).priceFormat();
                                                                modal.find('input[name="total_amount"]').val((salary_amount + allowance_amount)).priceFormat();
                                                            });

                                                        //Save permanent labour budget item

                                                        modal.find('.save_permanent_labour_budget_item').each(function () {
                                                            var button = $(this);
                                                            if (button.attr('initialized') != 'true') {
                                                                button.click(function () {
                                                                    var modal = button.closest('.modal');
                                                                    var job_position_id = modal.find('select[name="job_position_id"]').val();
                                                                    var rate_mode = rate_mode_selector.val();
                                                                    var no_of_staff = parseFloat(modal.find('input[name="no_of_staff"]').val());
                                                                    var project_id = modal.find('input[name="project_id"]').val();
                                                                    var duration = parseFloat(modal.find('input[name="duration"]').val());
                                                                    if (duration > 0 && no_of_staff > 0 && job_position_id != '') {
                                                                        start_spinner();
                                                                        modal.modal('hide');
                                                                        var item_id = modal.find('input[name="item_id"]').val();
                                                                        var salary_rate = modal.find('input[name="salary_rate"]').unmask();
                                                                        var allowance_rate = modal.find('input[name="allowance_rate"]').unmask();
                                                                        var description = modal.find('textarea[name="description"]').val();
                                                                        var cost_center_id = form_cost_center_selector.val().trim();

                                                                        $.post(
                                                                            base_url + "budgets/save_permanent_labour_budget_item/",
                                                                            {
                                                                                item_id: item_id,
                                                                                project_id: project_id,
                                                                                cost_center_id: cost_center_id,
                                                                                job_position_id: job_position_id,
                                                                                duration: duration,
                                                                                rate_mode: rate_mode,
                                                                                salary_rate: salary_rate,
                                                                                allowance_rate: allowance_rate,
                                                                                no_of_staff: no_of_staff,
                                                                                description: description
                                                                            }
                                                                        ).complete(function () {
                                                                            //reset form
                                                                            var form = button.closest('form');
                                                                            form[0].reset();
                                                                            if (item_id.trim() == '') {
                                                                                job_position_selector.select2('val', '');
                                                                            }
                                                                            container_box.find('select[name="cost_center_id"]').val(cost_center_id);
                                                                            var cost_center_level = cost_center_id == '' ? 'project' : 'task';
                                                                            var table = container_box.find('.permanent_labour_budget_items');
                                                                            cost_center_id = cost_center_id == '' ? table.attr('project_id') : cost_center_id;
                                                                            var url = controller + cost_center_level + '/' + cost_center_id;
                                                                            table.DataTable().ajax.url(url).load();
                                                                            stop_spinner();
                                                                        });
                                                                    }
                                                                });
                                                                button.attr('initialized', 'true');
                                                            }
                                                        });
                                                    });
                                                    modal.attr('initialized', 'true');
                                                }
                                            });
                                        }
                                    );
                                };

                                modal.find('.task_material_budget_activator').on('shown.bs.tab', function (e) {
                                    if ($(this).attr('initialized') != 'true') {
                                        initialize_budget_datatable(
                                            'material',
                                            [
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": false }
                                            ],
                                            material_form_initializer
                                        );
                                        $(this).attr('initialized', 'true');
                                    }
                                });

                                modal.find('.task_equipment_budget_activator').on('shown.bs.tab', function (e) {
                                    if ($(this).attr('initialized') != 'true') {
                                        initialize_budget_datatable(
                                            'equipment',
                                            [
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": false }
                                            ], function () {

                                                $('.save_equipment_budget_btn').each(function () {

                                                    var button = $(this);
                                                    if (button.attr('initialized') != 'true') {
                                                        button.click(function () {
                                                            var modal = button.closest('.modal');
                                                            var asset_item_id = modal.find("select[name='asset_item_id']").val();
                                                            var cost_center_id = modal.find("input[name='cost_center_id']").val();
                                                            var project_id = modal.find("input[name='project_id']").val();
                                                            var equipment_budget_id = modal.find("input[name='equipment_budget_id']").val();
                                                            var rate_mode = modal.find("select[name='rate_mode']").val();
                                                            var rate = modal.find("input[name='rate']").unmask();
                                                            var duration = modal.find("input[name='duration']").unmask();
                                                            var quantity = modal.find("input[name='quantity']").unmask();
                                                            var description = modal.find("textarea[name='description']").val();

                                                            if (asset_item_id != '') {
                                                                start_spinner();
                                                                modal.modal('hide');
                                                                $.post(
                                                                    base_url + "Budgets/save_equipment_budget_item",
                                                                    {
                                                                        equipment_budget_id: equipment_budget_id,
                                                                        asset_item_id: asset_item_id,
                                                                        cost_center_id: cost_center_id,
                                                                        project_id: project_id,
                                                                        rate_mode: rate_mode,
                                                                        rate: rate,
                                                                        duration: duration,
                                                                        quantity: quantity,
                                                                        description: description

                                                                    }, function () {
                                                                        stop_spinner();
                                                                        modal.find('form')[0].reset();
                                                                        $('.equipment_budget_items').DataTable().draw('page');
                                                                        toast('success', 'Equipment_budget Added successful ');
                                                                    }
                                                                );
                                                            } else {
                                                                toast('warning', 'Equipment_budget Name Must be filled ');
                                                            }
                                                        });
                                                        button.attr('initialized', 'true');
                                                    }
                                                });

                                                //DeleteEquipment
                                                $('.delete_equipment_budget').each(function () {
                                                    var button = $(this);
                                                    if (button.attr('active') != 'true') {
                                                        button.click(function () {
                                                            if (confirm('Are you sure?')) {
                                                                start_spinner();
                                                                $.post(
                                                                    base_url + "Budgets/delete_equipment_budget",
                                                                    {
                                                                        equipment_budget_id: button.attr('equipment_budget_id')
                                                                    }, function () {
                                                                        $('.equipment_budget_items').DataTable().draw('page');
                                                                    }
                                                                ).complete(function () {
                                                                    stop_spinner();
                                                                });
                                                            }
                                                        });
                                                        button.attr('active', 'true');
                                                    }
                                                });

                                                //equipment form amount calculator
                                                $('.equipment_budget_form').each(function () {

                                                    var modal = $(this);

                                                    modal.on('change keyup', 'input[name="rate"], input[name="duration"], input[name="quantity"]',
                                                        function () {
                                                            var duration = parseFloat(modal.find('input[name="duration"]').val());
                                                            var quantity = parseFloat(modal.find('input[name="quantity"]').val());
                                                            var rate = modal.find('input[name="rate"]').unmask();

                                                            modal.find('input[name="amount"]').val(duration * quantity * rate).priceFormat();
                                                        });


                                                });

                                                initialize_common_js();

                                                $(this).find('tr').each(function () {
                                                    $(this).find('td:last-child').attr('nowrap', 'nowrap');
                                                });

                                            }
                                        );
                                        $(this).attr('initialized', 'true');
                                    }
                                });

                                modal.find('.labour_budget_activator').on('shown.bs.tab', function (e) {
                                    if ($(this).attr('initialized') != 'true') {
                                        initialize_permanent_labour_tab();

                                        $('.permanent_labour_budget_activator').on('shown.bs.tab', function (e) {
                                            initialize_permanent_labour_tab();
                                        });

                                        $('.casual_labour_budget_activator').on('shown.bs.tab', function (e) {
                                            initialize_budget_datatable(
                                                'casual_labour',
                                                [
                                                    { "orderable": true },
                                                    { "orderable": true },
                                                    { "orderable": true },
                                                    { "orderable": true },
                                                    { "orderable": true },
                                                    { "orderable": true },
                                                    { "orderable": true },
                                                    { "orderable": false }
                                                ],
                                                function () {
                                                    $('.casual_labour_budget_form').each(function () {
                                                        var modal = $(this);
                                                        if (modal.attr('initialized') != 'true') {
                                                            modal.on('show.bs.modal', function (e) {
                                                                var container_box = modal.closest('.box');
                                                                var form_cost_center_selector = modal.find('input[name="cost_center_id"]');
                                                                var rate_mode_selector = modal.find('select[name="rate_mode"]');
                                                                var labour_type_selector = modal.find('.budget_casual_labour_type_selector');

                                                                var load_labour_options = function () {
                                                                    form_cost_center_selector = modal.find('input[name="cost_center_id"]');
                                                                    var cost_center_id = form_cost_center_selector.val();
                                                                    var cost_center_level = cost_center_id.trim() != '' ? 'task' : 'project';
                                                                    cost_center_id = cost_center_id.trim() != '' ? cost_center_id : modal.find('input[name="project_id"]').val();

                                                                    if (labour_type_selector) {
                                                                        start_spinner();
                                                                        labour_type_selector.val('');
                                                                        $.post(
                                                                            base_url + "budgets/budget_casual_labour_type_options",
                                                                            {
                                                                                cost_center_level: cost_center_level,
                                                                                cost_center_id: cost_center_id,
                                                                                rate_mode: rate_mode_selector.val()
                                                                            }, function (data) {
                                                                                labour_type_selector.html(data);
                                                                            }
                                                                        ).complete(function () {
                                                                            stop_spinner();
                                                                        });
                                                                    }
                                                                };

                                                                load_labour_options();

                                                                if (form_cost_center_selector.attr('initialized') != 'true') {
                                                                    form_cost_center_selector.change(load_labour_options);
                                                                    form_cost_center_selector.attr('initialized', 'true');
                                                                }

                                                                if (rate_mode_selector.attr('initialized') != 'true') {
                                                                    rate_mode_selector.change(load_labour_options);
                                                                    rate_mode_selector.attr('initialized', 'true');
                                                                }
                                                                ;

                                                                modal.on('change keyup',
                                                                    'input[name="rate"], input[name="duration"], input[name="no_of_workers"]',
                                                                    function () {
                                                                        var duration = parseFloat(modal.find('input[name="duration"]').val());
                                                                        var no_of_workers = parseFloat(modal.find('input[name="no_of_workers"]').val());
                                                                        var rate = modal.find('input[name="rate"]').unmask();
                                                                        modal.find('input[name="total_amount"]').val(duration * no_of_workers * rate).priceFormat();
                                                                    });


                                                                //Save casual labour budget item

                                                                modal.find('.save_casual_labour_budget_item').each(function () {
                                                                    var button = $(this);
                                                                    if (button.attr('initialized') != 'true') {
                                                                        button.click(function () {
                                                                            var modal = button.closest('.modal');
                                                                            var casual_labour_type_id = modal.find('select[name="casual_labour_type_id"]').val();
                                                                            var rate_mode = rate_mode_selector.val();
                                                                            var no_of_workers = parseFloat(modal.find('input[name="no_of_workers"]').val());
                                                                            var project_id = modal.find('input[name="project_id"]').val();
                                                                            var duration = parseFloat(modal.find('input[name="duration"]').val());
                                                                            if (duration > 0 && no_of_workers > 0 && casual_labour_type_id != '') {
                                                                                start_spinner();
                                                                                modal.modal('hide');
                                                                                var item_id = modal.find('input[name="item_id"]').val();
                                                                                var rate = modal.find('input[name="rate"]').unmask();
                                                                                var description = modal.find('textarea[name="description"]').val();
                                                                                var cost_center_id = form_cost_center_selector.val();
                                                                                $.post(
                                                                                    base_url + "budgets/save_casual_labour_budget_item/",
                                                                                    {
                                                                                        item_id: item_id,
                                                                                        project_id: project_id,
                                                                                        cost_center_id: form_cost_center_selector.val().trim(),
                                                                                        casual_labour_type_id: casual_labour_type_id,
                                                                                        duration: duration,
                                                                                        rate_mode: rate_mode,
                                                                                        rate: rate,
                                                                                        no_of_workers: no_of_workers,
                                                                                        description: description
                                                                                    }
                                                                                ).complete(function () {
                                                                                    //reset form
                                                                                    var form = button.closest('form');
                                                                                    form[0].reset();
                                                                                    if (item_id.trim() == '') {
                                                                                        labour_type_selector.select2('val', '');
                                                                                    }
                                                                                    container_box.find('select[name="cost_center_id"]').val(cost_center_id);
                                                                                    var cost_center_level = cost_center_id == '' ? 'project' : 'task';
                                                                                    var table = container_box.find('.casual_labour_budget_items');
                                                                                    cost_center_id = cost_center_id == '' ? table.attr('project_id') : cost_center_id;
                                                                                    var url = controller + cost_center_level + '/' + cost_center_id;
                                                                                    table.DataTable().ajax.url(url).load();
                                                                                    stop_spinner();
                                                                                });
                                                                            }
                                                                        });
                                                                        button.attr('initialized', 'true');
                                                                    }
                                                                });
                                                            });
                                                            modal.attr('initialized', 'true');
                                                        }
                                                    });
                                                }
                                            );
                                        });

                                        $(this).attr('initialized', 'true');
                                    }
                                });

                                modal.find('.miscellaneous_budget_activator').on('shown.bs.tab', function (e) {
                                    if ($(this).attr('initialized') != 'true') {
                                        initialize_budget_datatable(
                                            'miscellaneous',
                                            [
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": false }
                                            ],
                                            function () {
                                                $('.miscellaneous_budget_form').each(function () {
                                                    var modal = $(this);
                                                    if (modal.attr('initialized') != 'true') {
                                                        modal.on('show.bs.modal', function (e) {
                                                            var container_box = modal.closest('.box');
                                                            var form_cost_center_selector = modal.find('input[name="cost_center_id"]');
                                                            var rate_mode_selector = modal.find('select[name="rate_mode"]');
                                                            var expense_selector = modal.find('.budget_expense_account_selector');

                                                            var load_expense_account_options = function () {
                                                                form_cost_center_selector = modal.find('input[name="cost_center_id"]');
                                                                var cost_center_id = form_cost_center_selector.val();
                                                                var cost_center_level = cost_center_id.trim() != '' ? 'task' : 'project';
                                                                cost_center_id = cost_center_id.trim() != '' ? cost_center_id : modal.find('input[name="project_id"]').val();

                                                                if (expense_selector) {
                                                                    start_spinner();
                                                                    expense_selector.val('');
                                                                    $.post(
                                                                        base_url + "budgets/budget_expense_account_options",
                                                                        {
                                                                            cost_center_level: cost_center_level,
                                                                            cost_center_id: cost_center_id
                                                                        }, function (data) {
                                                                            expense_selector.html(data);
                                                                        }
                                                                    ).complete(function () {
                                                                        stop_spinner();
                                                                    });
                                                                }
                                                            };

                                                            load_expense_account_options();

                                                            if (form_cost_center_selector.attr('initialized') != 'true') {
                                                                form_cost_center_selector.change(load_expense_account_options);
                                                                form_cost_center_selector.attr('initialized', 'true');
                                                            }

                                                            //Save casual miscellaneous budget item
                                                            $('.save_miscellaneous_budget_item').each(function () {
                                                                var button = $(this);
                                                                if (button.attr('initialized') != 'true') {

                                                                    //Initialize form essentials
                                                                    var modal = button.closest('.modal');
                                                                    var container_box = modal.closest('.box');
                                                                    var form_cost_center_selector = modal.find('input[name="cost_center_id"]');

                                                                    button.click(function () {
                                                                        var modal = button.closest('.modal');
                                                                        var expense_account_id = modal.find('select[name="expense_account_id"]').val();
                                                                        var amount = modal.find('input[name="amount"]').unmask();
                                                                        var cost_center_id = form_cost_center_selector.val().trim();
                                                                        if (amount > 0 && expense_account_id != '') {
                                                                            start_spinner();
                                                                            modal.modal('hide');
                                                                            var item_id = modal.find('input[name="item_id"]').val();
                                                                            var project_id = modal.find('input[name="project_id"]').val();
                                                                            var description = modal.find('textarea[name="description"]').val();

                                                                            $.post(
                                                                                base_url + "budgets/save_miscellaneous_budget_item/",
                                                                                {
                                                                                    project_id: project_id,
                                                                                    cost_center_id: cost_center_id,
                                                                                    expense_account_id: expense_account_id,
                                                                                    amount: amount,
                                                                                    item_id: item_id,
                                                                                    description: description
                                                                                }
                                                                            ).complete(function () {
                                                                                toast('success', 'Miscellaneous Budget has been successfully saved');
                                                                                modal.find('form')[0].reset();
                                                                                container_box.find('select[name="cost_center_id"]').val(cost_center_id);
                                                                                var cost_center_level = cost_center_id == '' ? 'project' : 'task';
                                                                                var table = container_box.find('.miscellaneous_budget_items');
                                                                                cost_center_id = cost_center_id == '' ? table.attr('project_id') : cost_center_id;
                                                                                var url = controller + cost_center_level + '/' + cost_center_id;
                                                                                table.DataTable().ajax.url(url).load();
                                                                                stop_spinner();
                                                                            });
                                                                        }
                                                                    });

                                                                    button.attr('initialized', 'true');
                                                                }
                                                            });
                                                        });
                                                        modal.attr('initialized', 'true');
                                                    }
                                                });
                                            }
                                        );
                                        $(this).attr('initialized', 'true');
                                    }
                                });

                                modal.find('.sub_contract_budget_activator').on('shown.bs.tab', function (e) {
                                    if ($(this).attr('initialized') != 'true') {
                                        initialize_budget_datatable(
                                            'sub_contract',
                                            [
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": true },
                                                { "orderable": false }
                                            ],
                                            function () {
                                                $('.sub_contract_budget_form').each(function () {
                                                    var modal = $(this);
                                                    if (modal.attr('initialized') != 'true') {
                                                        modal.on('show.bs.modal', function (e) {

                                                            //Save sub_contract budget item
                                                            $('.save_sub_contract_budget').each(function () {
                                                                var button = $(this);
                                                                if (button.attr('initialized') != 'true') {

                                                                    //Initialize form essentials
                                                                    var modal = button.closest('.modal');
                                                                    var container_box = modal.closest('.box');
                                                                    var form_cost_center_selector = modal.find('input[name="cost_center_id"]');

                                                                    button.click(function () {

                                                                        var modal = button.closest('.modal');
                                                                        var budget_item_id = modal.find('input[name="budget_item_id"]').val();
                                                                        var project_id = modal.find('input[name="project_id"]').val();
                                                                        var cost_center_id = modal.find('input[name="cost_center_id"]').val();
                                                                        var amount = modal.find('input[name="amount"]').unmask();
                                                                        var description = modal.find('textarea[name="description"]').val();
                                                                        if (amount != '') {
                                                                            start_spinner();
                                                                            modal.modal('hide');
                                                                            $.post(
                                                                                base_url + "budgets/save_sub_contract_budget/",
                                                                                {
                                                                                    budget_item_id: budget_item_id,
                                                                                    project_id: project_id,
                                                                                    cost_center_id: cost_center_id,
                                                                                    amount: amount,
                                                                                    description: description
                                                                                }
                                                                            ).complete(function () {
                                                                                toast('success', 'Sub_contract Budget has been successfully saved');
                                                                                modal.find('form')[0].reset();
                                                                                container_box.find('select[name="cost_center_id"]').val(cost_center_id);
                                                                                var cost_center_level = cost_center_id == '' ? 'project' : 'task';
                                                                                var table = container_box.find('.sub_contract_budget_items');
                                                                                cost_center_id = cost_center_id == '' ? table.attr('project_id') : cost_center_id;
                                                                                var url = controller + cost_center_level + '/' + cost_center_id;
                                                                                table.DataTable().ajax.url(url).load();
                                                                                stop_spinner();
                                                                            });
                                                                        }
                                                                    });

                                                                    button.attr('initialized', 'true');
                                                                }
                                                            });
                                                        });
                                                        modal.attr('initialized', 'true');
                                                    }
                                                });
                                            }
                                        );
                                        $(this).attr('initialized', 'true');
                                    }
                                });

                            });
                            modal.attr('initialized', 'true');
                        }
                    });

                    initialize_common_js();
                }
            });
            table.attr('initialized', 'true');
        }
    });


});

function initialize_sub_contract_payment_requisition_approval_form(modal) {
    if (modal.attr('initialized') != 'true') {
        modal.on('show.bs.modal', function () {

            var calculate_scrq_table_total_amount = function (scrq_item_table) {
                var total_amount = 0;
                var vat_amount = scrq_item_table.find('input[name="vat_amount"]').val();
                scrq_item_table.find('tbody input[name="amount"]').each(function () {
                    $(this).priceFormat();
                    var amount = $(this).val();
                    amount = amount != '' ? parseFloat($(this).unmask()) : 0;
                    total_amount += amount;
                });
                var vat_amount = scrq_item_table.find('input[name="vat_amount"]').val() != '' ? scrq_item_table.find('input[name="vat_amount"]').val() : 0;
                if (parseFloat(vat_amount) > 0) {
                    total_amount += parseFloat(vat_amount);
                    scrq_item_table.find('#vat_amount_row').show();
                    scrq_item_table.find('#vat_amount_display').html('<span>' + parseFloat(vat_amount).toFixed(2) + '</span>').priceFormat().css("text-align", "right");
                }
                scrq_item_table.find('.total_amount_display').html(parseFloat(total_amount).toFixed(2)).priceFormat();
            };

            var load_certificate_amount = function (certificate_selector) {
                certificate_selector.change(function () {
                    if (certificate_selector.val() != '') {
                        var vat_amount = modal.find('tbody input[name="vat_amount"]').val();
                        start_spinner();
                        $.post(
                            base_url + "contractors/load_certificate_amount",
                            {
                                certificate_id: certificate_selector.val()
                            }, function (data) {
                                certificate_selector.closest('tr').find('input[name="amount"]').val(parseFloat(data.cert_amount).toFixed(2)).priceFormat().change();
                                if (data.vat_amount > 0 || vat_amount > 0) {
                                    vat_amount += data.vat_amount;
                                    modal.find('#vat_amount_row').show();
                                    modal.find('#vat_amount_display').html('<span>' + parseFloat(vat_amount).toFixed(2) + '</span>').priceFormat();
                                    modal.find('tbody input[name="vat_amount"]').val(vat_amount);
                                } else {
                                    modal.find('#vat_amount_display').html('<span>' + '' + '</span>');
                                    modal.find('#vat_amount_row').hide();
                                    modal.find('tbody input[name="vat_amount"]').val('');
                                }
                                calculate_scrq_table_total_amount(certificate_selector.closest('table'));

                            }, 'json'
                        ).complete(function () {
                            stop_spinner();
                        });
                    }
                });
            };

            var approve_sub_contract_requisition = function (button) {
                button.click(function () {
                    var modal = button.closest('.modal');
                    var status = button.hasClass('reject_sub_contract_requisition') ? 'REJECTED' : '';
                    var sub_contract_requisition_id = modal.find('input[name="sub_contract_requisition_id"]').val();
                    var approval_chain_level_id = modal.find('input[name="approval_chain_level_id"]').val();
                    var currency_id = modal.find('select[name="currency_id"]').val();
                    var approve_date = modal.find('input[name="approve_date"]').val(), i = 0;
                    var vat_amount = modal.find('tbody input[name="vat_amount"]').val();
                    var vat_inclusive = parseFloat(vat_amount) > 0 ? 1 : 0;
                    var amounts = new Array();
                    var sub_contract_payment_requisition_item_ids = new Array();
                    var tbody = modal.find(' .major_table_tbody');

                    var error = 0;
                    tbody.find('input[name="amount"]').each(function () {
                        var amount = $(this);
                        var row = amount.closest('tr');
                        if (amount != '') {
                            amounts[i] = amount.unmask();
                            sub_contract_payment_requisition_item_ids[i] = row.find('input[name="sub_contract_payment_requisition_item_id"]').val();
                            i++;
                        } else {
                            error++;
                        }
                    });

                    if (amounts.length > 0 && error == 0) {
                        var comments = modal.find('textarea[name="comments"]').val();

                        var send_data = function () {
                            modal.modal('hide');
                            start_spinner();
                            $.post(
                                base_url + "requisitions/approve_sub_contract_requisition/",
                                {
                                    sub_contract_requisition_id: sub_contract_requisition_id,
                                    sub_contract_payment_requisition_item_ids: sub_contract_payment_requisition_item_ids,
                                    approval_chain_level_id: approval_chain_level_id,
                                    currency_id: currency_id,
                                    approve_date: approve_date,
                                    status: status,
                                    amounts: amounts,
                                    vat_inclusive: vat_inclusive,
                                    comments: comments
                                }, function (data) {
                                    toast('success', 'Your Approval has been submitted');
                                    modal.closest('table').DataTable().draw('page');
                                    initialize_common_js();
                                }
                            ).complete(function () {
                                stop_spinner();
                            });
                        };

                        if (status == 'REJECTED') {
                            $.confirm({
                                title: 'Reject Requisition No. ' + sub_contract_requisition_id,
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Reject',
                                        btnClass: 'btn btn-danger btn-xs',
                                        action: function () {
                                            send_data();
                                        }
                                    },
                                    cancel: {
                                        text: "Cancel",
                                        btnClass: 'btn btn-default btn-xs'
                                    }
                                }
                            });
                        } else {
                            send_data();
                        }
                    } else {
                        display_form_fields_error();
                    }

                });
            }

            modal.find('tbody select[name="certificate_id"]').each(function () {
                var certificate_selector = $(this);
                load_certificate_amount(certificate_selector);
            });

            calculate_scrq_table_total_amount(modal.find('table'));

            modal.delegate('input[name="amount"]', 'change keyup', function () {
                calculate_scrq_table_total_amount(modal.find('table'));
            });

            modal.find('.approve_sub_contract_requisition').each(function () {
                var button = $(this);
                if (button.attr('initialized') != 'true') {
                    approve_sub_contract_requisition(button);
                    button.attr('initialized', 'true');
                }
            });

            modal.find('.reject_sub_contract_requisition').each(function () {
                var button = $(this);
                if (button.attr('initialized') != 'true') {
                    approve_sub_contract_requisition(button);
                    button.attr('initialized', 'true');
                }
            });

        });
        modal.attr('initialized', 'true');
    }
}

function initialize_sub_contract_payment_requisition_form(modal) {
    if (modal.attr('initialized') != 'true') {
        modal.on('show.bs.modal', function () {

            var calculate_scrq_table_total_amount = function (scrq_item_table) {
                var total_amount = 0;
                scrq_item_table.find('tbody input[name="amount"]').each(function () {
                    $(this).priceFormat();
                    var amount = $(this).val();
                    amount = amount != '' ? parseFloat($(this).unmask()) : 0;
                    total_amount += amount;
                });
                var vat_amount = scrq_item_table.find('input[name="vat_amount"]').val() != '' ? scrq_item_table.find('input[name="vat_amount"]').val() : 0;
                if (parseFloat(vat_amount) > 0) {
                    total_amount += parseFloat(vat_amount);
                }
                scrq_item_table.find('.total_amount_display').html(parseFloat(total_amount).toFixed(2)).priceFormat();
            };

            var load_sub_contract_certificates = function (select_element) {
                select_element.change(function () {
                    var row = select_element.closest('tr');
                    if (select_element.val() != '') {
                        start_spinner();
                        $.post(
                            base_url + "stakeholders/load_sub_contract_certificates",
                            {
                                sub_contract_id: select_element.val()
                            }, function (data) {

                                row.find('select[name="certificate_id"]').val("");
                                row.find('input').val("");
                                row.find('select[name="certificate_id"]').html(data);
                            }
                        ).complete(function () {
                            stop_spinner();
                        });
                    }
                })
            };

            var recalculate_vat_amount = function (scrq_item_table) {
                var total_vat_amount = 0;
                scrq_item_table.find('tbody input[name="row_vat_amount"]').each(function () {
                    var vat_amount = $(this).val();
                    vat_amount = vat_amount != '' ? parseFloat(vat_amount) : 0;
                    total_vat_amount += vat_amount;
                });
                if (total_vat_amount > 0) {
                    modal.find('#vat_amount_row').removeAttr('style');
                    modal.find('#vat_amount_display').html('<span>' + parseFloat(total_vat_amount).toFixed(2) + '</span>').priceFormat();
                    scrq_item_table.find('tfoot input[name="vat_amount"]').val(total_vat_amount).toFixed(2);

                } else {
                    scrq_item_table.find('#vat_amount_display').html('<span>' + '' + '</span>');
                    scrq_item_table.find('#vat_amount_row').hide();
                    scrq_item_table.find('tfoot input[name="vat_amount"]').val('');
                }
            }

            var load_certificate_amount = function (certificate_selector) {
                certificate_selector.change(function () {
                    if (certificate_selector.val() != '') {
                        var vat_amount = modal.find('tfoot input[name="vat_amount"]').val();
                        vat_amount = vat_amount != '' ? parseFloat(vat_amount) : 0;
                        start_spinner();
                        $.post(
                            base_url + "stakeholders/load_certificate_amount",
                            {
                                certificate_id: certificate_selector.val()
                            }, function (data) {
                                var row_vat_amount = parseFloat(data.vat_amount);
                                certificate_selector.closest('tr').find('input[name="amount"]').val(parseFloat(data.cert_amount).toFixed(2)).priceFormat();
                                if (row_vat_amount > 0 || vat_amount > 0) {
                                    certificate_selector.closest('tr').find('input[name="row_vat_amount"]').val(row_vat_amount);
                                    modal.find('#vat_amount_row').removeAttr('style');
                                    vat_amount += row_vat_amount;
                                    modal.find('#vat_amount_display').html('<span>' + parseFloat(vat_amount).toFixed(2) + '</span>').priceFormat();
                                    modal.find('tfoot input[name="vat_amount"]').val(vat_amount);
                                } else {
                                    modal.find('#vat_amount_display').html('<span>' + '' + '</span>');
                                    modal.find('#vat_amount_row').hide();
                                    modal.find('tfoot input[name="vat_amount"]').val('');
                                }
                                calculate_scrq_table_total_amount(certificate_selector.closest('table'));

                            }, 'json'
                        ).complete(function () {
                            stop_spinner();
                        });
                    }
                });
            };

            modal.find('tbody select[name="sub_contract_id"]').each(function () {
                var select_element = $(this);
                select_element.select2({ width: '350px' });
                load_sub_contract_certificates(select_element);
            });

            modal.find('tbody select[name="certificate_id"]').each(function () {
                var certificate_selector = $(this);
                certificate_selector.select2({ width: '350px' });
                load_certificate_amount(certificate_selector);
            });

            modal.delegate('input[name="amount"]', 'change keyup', function () {
                calculate_table_total_amount(modal.find('table'));
            });

            modal.find('.row_adder').each(function () {
                if ($(this).attr('initialized') != 'true') {
                    $(this).click(function () {
                        var tbody = $(this).closest('.row').find('tbody');
                        var new_row = tbody.closest('table').find('.row_template').clone().removeAttr('style')
                            .removeClass('row_template').addClass('artificial_row').appendTo(tbody);

                        new_row.find('.number_format').priceFormat();

                        new_row.find('select[name="sub_contract_id"]').each(function () {
                            var select_element = $(this);
                            load_sub_contract_certificates(select_element);
                            select_element.select2({ width: '350px' });
                        });

                        new_row.find('select[name="certificate_id"]').each(function () {
                            var certificate_selector = $(this);
                            load_certificate_amount(certificate_selector);
                            certificate_selector.select2({ width: '350px' });
                        });

                        new_row.find('.row_remover').click(function () {
                            var table = $(this).closest('table');
                            $(this).closest('tr').remove();
                            recalculate_vat_amount(table);
                            calculate_scrq_table_total_amount(table);
                        });
                        initialize_common_js();

                    });
                    $(this).attr('initialized', 'true');
                }
            });

            modal.find('tbody tr').each(function () {
                var table = $(this).closest('table');
                $(this).find('.row_remover').click(function () {
                    $(this).closest('tr').remove();
                    recalculate_vat_amount(table);
                    calculate_scrq_table_total_amount(table);
                });
            });

            modal.find('.save_sub_contract_requisition').each(function () {
                var button = $(this);
                if (button.attr('initialized') != 'true') {
                    button.click(function () {
                        var modal = button.closest('.modal');
                        var sub_contract_requisition_id = modal.find('input[name="sub_contract_requisition_id"]').val();
                        var approval_module_id = modal.find('select[name="approval_module_id"]').val();
                        var requisition_cost_center_field = modal.find('select[name="requisition_cost_center_id"]');
                        var requisition_cost_center_id = requisition_cost_center_field.val();
                        var request_date = modal.find('input[name="request_date"]').val();
                        var currency_id = modal.find('select[name="currency_id"]').val();
                        var required_date = modal.find('input[name="required_date"]').val(), i = 0;
                        var vat_amount = modal.find('tfoot input[name="vat_amount"]').val();
                        var vat_inclusive = parseFloat(vat_amount) > 0 ? 1 : 0;
                        var certificate_ids = new Array(), requested_amounts = new Array();
                        var tbody = modal.find('tbody'), error = 0;

                        tbody.find('input[name="amount"]').each(function () {
                            var requested_amount = $(this).unmask();
                            var row = $(this).closest('tr');

                            if (parseFloat(requested_amount) > 0) {
                                requested_amounts[i] = requested_amount;
                                certificate_ids[i] = row.find('select[name="certificate_id"]').val();
                                i++;
                            } else {
                                error++;
                            }
                        });

                        if (error == 0 && request_date != '' && requested_amounts.length > 0 && approval_module_id.trim() != '' && approval_module_id != '' && requisition_cost_center_id.trim() != '') {
                            modal.modal('hide');
                            var comments = modal.find('textarea[name="comments"]').val();
                            var foward_to = modal.find('select[name="foward_to"]').val();
                            var status = "PENDING";

                            start_spinner();
                            $.post(
                                base_url + "requisitions/save_sub_contract_requisition/",
                                {
                                    sub_contract_requisition_id: sub_contract_requisition_id,
                                    approval_module_id: approval_module_id,
                                    requisition_cost_center_id: requisition_cost_center_id,
                                    currency_id: currency_id,
                                    request_date: request_date,
                                    required_date: required_date,
                                    requested_amounts: requested_amounts,
                                    certificate_ids: certificate_ids,
                                    comments: comments,
                                    foward_to: foward_to,
                                    vat_inclusive: vat_inclusive,
                                    status: status

                                }, function (data) {
                                    modal.find('form')[0].reset();
                                    tbody.find('.artificial_row').remove();
                                    requisition_cost_center_field.closest('form-group').hide();
                                    modal.find('.total_amount_display').html('');
                                    if (modal.hasClass('out_table')) {
                                        modal.closest('.box').find('#project_requisitions_table').DataTable().draw('page')
                                    } else {
                                        modal.closest('table').DataTable().draw('page');
                                    }
                                    initialize_common_js();
                                }
                            ).complete(function () {
                                stop_spinner();
                            });
                        } else {
                            toast('error', 'Please make sure all fields are correctly filled');
                        }

                    });
                    button.attr('initialized', 'true');
                }
            });

        });
        modal.attr('initialized', 'true');
    }
};

$('a[href="#project_requisitions"]').on('shown.bs.tab', function (e) {
    $('#project_requisitions').find('#project_requisitions_table').each(function () {
        var table = $(this);
        if ($(this).attr('dataTable_initialized') != 'true') {
            var project_id = $(this).attr('project_id');
            var status_field = table.closest('.box ').find('select[name="status"]');
            $(this).DataTable({
                "order": [[0, "desc"]],
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "requisitions/requisitions_list/" + project_id,
                    type: 'POST',
                    data: function (d) {
                        d.project_id = project_id,
                            d.status = status_field.val();
                    }
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching requisitions found</div>",
                    "emptyTable": "<div class='alert alert-info'>No requisitions  found for this project</div>"
                },
                "drawCallback": function () {

                    $(this).find('tr').each(function () {
                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                    });

                    status_field.each(function () {
                        if (status_field.attr('initialized') != 'true') {
                            status_field.change(function () {
                                table.DataTable().draw('page');
                            });
                            status_field.attr('initialized', 'true');
                        }
                    });

                    $('.sub_contract_payment_requisition_form').each(function () {
                        var modal = $(this);
                        initialize_sub_contract_payment_requisition_form(modal);
                    });

                    $('.sub_contract_payment_requisition_approval_form').each(function () {
                        var modal = $(this);
                        initialize_sub_contract_payment_requisition_approval_form(modal);
                    });

                    $('.sub_contract_payment_requisition_attachments_modal').each(function () {
                        var modal = $(this);
                        modal.on('show.bs.modal', function (e) {
                            update_sub_contract_requisition_attachments(modal);
                        });
                    });

                    initialize_requisition_approval_forms(table);
                    initialize_requisition_buttons();
                    initialize_sub_contract_requisition_buttons();
                    initialize_common_js();
                    initialize_requisition_and_order_form();
                }
            });
            $(this).attr('dataTable_initialized', 'true');
        } else {
            $(this).DataTable().draw('page');
        }
    });

    $('.sub_contract_payment_requisition_form').each(function () {
        var modal = $(this);
        initialize_sub_contract_payment_requisition_form(modal);
    });
});

$('a[href="#project_costs"]').on('shown.bs.tab', function (e) {
    var cost_tab_pane = $($(this).attr('href')).find('#costs_summary');
    var summary_cost_center_selector = cost_tab_pane.find('select[name="cost_center_selector"]');
    var load_costs_summary = function () {
        var project_id = summary_cost_center_selector.next().val();
        var cost_center_id = summary_cost_center_selector.val();
        start_spinner();
        $.post(
            base_url + "costs/load_project_costs_summary",
            {
                project_id: project_id,
                cost_center_id: cost_center_id
            }, function (data) {
                $('#costs_summary_table_container').html(data);
                stop_spinner();
            }
        );
    };

    load_costs_summary();

    summary_cost_center_selector.each(function () {
        $(this).off('change').on('change', function () {
            load_costs_summary();
        });
    });

    var controller = base_url + "costs/costs_items_list/";
    var initialize_cost_datatable = function (cost_type, table_columns, additional_call_back_function) {
        var table_class = $('.' + cost_type + '_costs_items');
        table_class.each(function () {
            if ($(this).attr('initialized') != 'true') {
                var table = $(this);
                var container_box = table.closest('.box');
                var cost_center_selector = container_box.find('select[name="cost_center_selector"]');
                var cost_center_id = cost_center_selector.val().trim();
                var cost_center_level = cost_center_id == '' ? 'project' : 'task';
                cost_center_id = cost_center_id == '' ? $(this).attr('project_id') : cost_center_id;
                var url = controller + cost_center_level + '/' + cost_center_id;

                table.DataTable({
                    colReorder: true,
                    "processing": true,
                    "serverSide": true,
                    "ajax": {
                        url: url,
                        type: 'POST',
                        data: {
                            'cost_type': cost_type
                        }
                    },
                    "columns": table_columns,
                    "language": {
                        "zeroRecords": "<div class='alert alert-info'>No matching costs items found</div>",
                        "emptyTable": "<div class='alert alert-info'>No costs items found</div>"
                    }, "drawCallback": function (settings) {

                        //Update budget total at the footer
                        table.find('#total_cost_amount_display').text(parseFloat(settings.json.cost_total).toFixed(2)).priceFormat();

                        //Update datatable
                        var update_datatable = function () {
                            cost_center_id = cost_center_selector.val().trim();
                            container_box.find('select[name="cost_center_selector"],select[name="cost_center_id"]').val(cost_center_id);
                            cost_center_level = cost_center_id == '' ? 'project' : 'task';
                            cost_center_id = cost_center_id == '' ? table.attr('project_id') : cost_center_id;
                            url = controller + cost_center_level + '/' + cost_center_id;
                            table.DataTable().ajax.url(url).load();
                        };


                        //initialize_cost_center_selectors
                        cost_center_selector.each(function () {
                            if ($(this).attr('initialized') != 'true') {
                                $(this).attr('initialized', 'true');
                                $(this).change(function () {
                                    var form_modal = $(this).closest('.modal');
                                    if (!form_modal.hasClass('bulk_material_cost_form')) {
                                        cost_center_selector.val($(this).val());
                                        update_datatable();
                                        form_modal.on('hidden.bs.modal', update_datatable);
                                    }
                                });
                            }
                        });

                        //Initialize material budget form
                        additional_call_back_function();

                        //Delete material budget item delete
                        table.find('.cost_item_delete').each(function () {
                            var button = $(this);
                            if (button.attr('active') != 'true') {
                                button.click(function () {
                                    if (confirm('Are you sure?')) {
                                        start_spinner();
                                        $.post(
                                            base_url + "costs/cost_item_delete/",
                                            {
                                                cost_type: cost_type,
                                                item_id: button.attr('item_id')
                                            }
                                        ).complete(function () {
                                            stop_spinner();
                                            table.DataTable().draw('page');
                                        });
                                    }
                                    button.attr('active', true);
                                });
                            }
                        });

                        table.find('tr').each(function () {
                            $(this).find('td:last-child').attr('nowrap', 'nowrap');
                        });
                        initialize_common_js();

                    }
                });

                initialize_common_js();
                $(this).attr('initialized', 'true');
            } else {
                $(this).DataTable().draw('page');
            }
        });
    };

    $('a[href="#costs_summary"]').on('shown.bs.tab', function (e) {
        load_costs_summary();
    });

    $('a[href="#material_costs"]').on('shown.bs.tab', function (e) {
        initialize_cost_datatable('material',
            [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ], function () {
                $('.material_cost_form').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        modal.on('show.bs.modal', function (e) {
                            var container_box = modal.closest('.box');
                            var cost_center_selector = container_box.find('select[name="cost_center_selector"]');
                            var form_cost_center_selector = modal.find('select[name="cost_center_id"]');

                            modal.find('select[name="source_sub_location_id"]').change(function () {
                                load_sub_location_available_material_options($(this), 'form');
                            });

                            var material_selector = $(this).find('.cost_material_selector');
                            if (material_selector.val() != '') {
                                validate_sub_store_material_quantity(material_selector, 'form');
                            }

                            if (material_selector.attr('initialize_load_quantity_and_rate') != 'true') {
                                material_selector.change(function () {
                                    load_material_unit($(this), 'form');
                                    validate_sub_store_material_quantity($(this), 'form');
                                });
                                material_selector.attr('initialize_load_quantity_and_rate', 'true');
                            }

                            //Initialize material_save
                            modal.find('.save_material_cost').each(function () {
                                var button = $(this);
                                if (button.attr('active') != 'true') {
                                    button.click(function () {
                                        var modal = button.closest('.modal');
                                        var project_id = modal.find('input[name="project_id"]').val();
                                        var item_id = modal.find('input[name="item_id"]').val();
                                        var source_sub_location_id = modal.find('select[name="source_sub_location_id"]').val();
                                        var material_id = modal.find('select[name="material_id"]').val();
                                        var description = modal.find('textarea[name="description"]').val();
                                        var quantity = modal.find('input[name="quantity"]').val();
                                        //var rate = modal.find('input[name="rate"]').unmask();
                                        var date = modal.find('input[name="date"]').val();
                                        var cost_center_id = form_cost_center_selector.val();
                                        if (project_id != '' && quantity != '' && date != '') {
                                            modal.modal('hide');

                                            $.post(
                                                base_url + "costs/save_material_cost/",
                                                {
                                                    source_sub_location_id: source_sub_location_id,
                                                    material_id: material_id,
                                                    project_id: project_id,
                                                    cost_center_id: cost_center_id,
                                                    date: date,
                                                    description: description,
                                                    quantity: quantity,
                                                    item_id: item_id
                                                }
                                            ).complete(function () {
                                                //reset form
                                                var form = button.closest('form');
                                                form[0].reset();
                                                if (item_id.trim() == '') {
                                                    material_selector.select2('val', '');
                                                }
                                                container_box.find('select[name="cost_center_id"]').val(cost_center_id);
                                                cost_center_selector.val(cost_center_id);
                                                var cost_center_level = cost_center_id == '' ? 'project' : 'task';
                                                var table = container_box.find('.material_costs_items');
                                                cost_center_id = cost_center_id == '' ? table.attr('project_id') : cost_center_id;
                                                var url = controller + cost_center_level + '/' + cost_center_id;
                                                table.DataTable().ajax.url(url).load();
                                                stop_spinner();
                                            });
                                        }
                                    });
                                    button.attr('active', 'true');
                                }
                            });

                            $(this).attr('initialized', 'true');
                        });
                        modal.attr('initialized', 'true');
                    }
                });
                $('.bulk_material_cost_form').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        modal.on('show.bs.modal', function (e) {
                            var container_box = modal.closest('.box');

                            var initialize_row_js = function (row) {
                                row.find('select[name="source_sub_location_id"]').change(function () {
                                    load_sub_location_available_material_options($(this), 'tr');
                                });

                                var material_selector = row.find('.cost_material_selector');
                                if (material_selector.val() != '') {
                                    validate_sub_store_material_quantity(material_selector, 'tr');
                                }

                                if (material_selector.attr('initialize_load_quantity_and_rate') != 'true') {
                                    material_selector.change(function () {
                                        load_material_unit($(this), 'tr');
                                        $(this).closest('tr').find('input[name="quantity"]').val(0);
                                        validate_sub_store_material_quantity($(this), 'tr');
                                    });
                                    material_selector.attr('initialize_load_quantity_and_rate', 'true');
                                }

                                row.find('.row_remover').click(function () {
                                    row.remove();
                                });
                            };

                            modal.find('.row_adder').off('click').on('click', function () {
                                var tbody = $(this).closest('table').find('tbody');
                                var new_row = tbody.closest('table').find('.row_template').clone().removeAttr('style')
                                    .removeClass('row_template').addClass('artificial_row').appendTo(tbody);
                                initialize_row_js(new_row);
                                new_row.find('select').each(function () {
                                    if ($(this).attr('name') != 'project_id') {
                                        $(this).select2();
                                    } else {
                                        $(this).hide();
                                    }
                                });
                                initialize_common_js();
                            });

                            modal.find('tbody tr').each(function () {
                                initialize_row_js($(this));
                            });

                            //Initialize material_save
                            modal.find('.save_material_cost').each(function () {
                                var button = $(this);
                                if (button.attr('initialized') != 'true') {
                                    button.click(function () {
                                        var dates = [], material_ids = [], quantities = [], descriptions = [], source_sub_location_ids = [], cost_center_ids = [], i = 0;
                                        var project_id = button.attr('project_id');
                                        modal.find('tbody select[name="material_id"]').each(function () {
                                            var row = $(this).closest('tr');
                                            var material_id = $(this).val();
                                            var quantity = row.find('input[name="quantity"]').val();
                                            var date = row.find('input[name="date"]').val();
                                            if (material_id.trim() != '' && parseFloat(quantity) > 0 && date.trim() != '') {
                                                material_ids[i] = material_id;
                                                quantities[i] = quantity;
                                                dates[i] = date;
                                                source_sub_location_ids[i] = row.find('select[name="source_sub_location_id"]').val();
                                                cost_center_ids[i] = row.find('select[name="cost_center_id"]').val();
                                                descriptions[i] = row.find('textarea[name="description"]').val();
                                                i++;
                                            }
                                        });

                                        if (i > 0) {
                                            start_spinner();
                                            $.post(
                                                base_url + "costs/save_multiple_material_costs",
                                                {
                                                    dates: dates,
                                                    project_id: project_id,
                                                    cost_center_ids: cost_center_ids,
                                                    source_sub_location_ids: source_sub_location_ids,
                                                    material_ids: material_ids,
                                                    cost_center_ids: cost_center_ids,
                                                    quantities: quantities,
                                                    descriptions: descriptions
                                                }, function (data) {
                                                    modal.modal('hide');
                                                    //reset form
                                                    var form = button.closest('form');
                                                    form.find('.artificial_row').remove();
                                                    form[0].reset();
                                                    form.find('tbody select[name="material_id"]').each(function () {
                                                        $(this).select2('val', '');
                                                    });
                                                    stop_spinner();
                                                }
                                            );
                                        }
                                    });
                                    button.attr('initialized', 'true');
                                }
                            });

                            $(this).attr('initialized', 'true');
                        });
                        modal.attr('initialized', 'true');
                    }
                });
            })
    });

    $('a[href="#permanent_labour_costs"]').on('shown.bs.tab', function (e) {
        initialize_cost_datatable('permanent_labour',
            [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": true },
                { "orderable": false }
            ], function () {

                $('.permanent_labour_cost_form').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        var container_box = modal.closest('.box');
                        var cost_center_selector = container_box.find('select[name="cost_center_selector"]');
                        var form_cost_center_selector = modal.find('select[name="cost_center_id"]');
                        modal.on('show.bs.modal', function (e) {
                            var initialize_row_js = function (row) {
                                var member_selector = row.find('select[name="member_id"]');
                                var working_mode_selector = row.find('select[name="working_mode"]');
                                var duration_field = row.find('input[name="duration"]');
                                var rate_field = row.find('input[name="salary_rate"]');

                                var load_member_salary_rate = function () {
                                    var member_id = member_selector.val();
                                    if (member_id != '') {
                                        start_spinner();
                                        $.post(
                                            base_url + "human_resources/load_team_member_salary_rate",
                                            {
                                                member_id: member_id,
                                                working_mode: working_mode_selector.val()
                                            }, function (data) {
                                                rate_field.val(data);
                                            }
                                        ).complete(function () {
                                            stop_spinner();
                                        });
                                    } else {
                                        rate_field.val(0);
                                    }
                                };

                                row.find('select[name="member_id"]').each(function () {
                                    if ($(this).attr('initialized') != 'true') {
                                        $(this).on('change', function () {
                                            load_member_salary_rate();
                                        }).select2()
                                        $(this).attr('initialized', 'true');
                                    }
                                });

                                var calculate_duration_field = function () {
                                    var working_mode = working_mode_selector.val();
                                    if (working_mode == 'date_range') {
                                        var from_date = row.find('input[name="start_date"]').val();
                                        var to_date = row.find('input[name="end_date"]').val();
                                        if (from_date.trim() != '' && to_date.trim() != '') {
                                            function parseDate(str) {
                                                var mdy = str.split('-');
                                                return new Date(mdy[0], mdy[1] - 1, mdy[2]);
                                            }
                                            function daydiff(first, second) {
                                                return Math.round((second - first) / (1000 * 60 * 60 * 24));
                                            }
                                            duration_field.val(daydiff(parseDate(from_date), parseDate(to_date)));
                                        } else {
                                            duration_field.val(0);
                                        }
                                        duration_field.attr('readonly', 'true');
                                    } else if (working_mode == 'hours') {
                                        duration_field.val('');
                                        duration_field.removeAttr('readonly');
                                    } else {
                                        duration_field.val(1);
                                        duration_field.attr('readonly', 'true');
                                    }
                                };

                                var setup_duration_fields = function () {
                                    var working_mode = working_mode_selector.val();
                                    var active_class = working_mode == 'date_range' ? '.date_range_input' : '.single_date_input';
                                    row.find(active_class).show().siblings().hide();
                                    calculate_duration_field();
                                    load_member_salary_rate();
                                };

                                row.find('input[name="start_date"], input[name="end_date"]').each(function () {
                                    if ($(this).attr('initialized') != 'true') {
                                        $(this).on('change', function () {
                                            calculate_duration_field();
                                        });
                                        $(this).attr('initialized', 'true');
                                    }
                                });

                                working_mode_selector.change(function () {
                                    setup_duration_fields();
                                });

                                row.find('.row_remover').click(function () {
                                    row.remove();
                                });
                            };

                            initialize_row_js(modal.find('tbody tr:first'));

                            modal.find('tbody select[name="member_id"]').each(function () {
                                var select_element = $(this);
                                select_element.select2({ width: "300px" });
                            });

                            modal.find('.row_adder').off('click').on('click', function () {
                                var tbody = $(this).closest('table').find('tbody');
                                var new_row = tbody.closest('table').find('.row_template').clone().removeAttr('style')
                                    .removeClass('row_template').addClass('artificial_row').appendTo(tbody);
                                initialize_row_js(new_row);
                                initialize_common_js();
                            });

                            modal.find('.save_permanent_labour_cost').off('click').on('click', function () {
                                start_spinner();
                                var button = $(this);
                                var member_ids = new Array(), working_modes = new Array(), start_dates = new Array(),
                                    end_dates = new Array(), allowances = new Array(), cost_dates = new Array(), durations = new Array(),
                                    salary_rates = new Array(), descriptions = new Array();

                                var cost_center_id = modal.find('select[name="cost_center_id"]').val();
                                var project_id = modal.find('input[name="project_id"]').val();
                                var i = 0;
                                modal.modal('hide');
                                modal.find('tbody tr').each(function () {
                                    var row = $(this);
                                    var member_id = row.find('select[name="member_id"]').val().trim();
                                    var working_mode = row.find('select[name="working_mode"]').val().trim();
                                    var start_date = row.find('input[name="start_date"]').val().trim();
                                    var end_date = row.find('input[name="end_date"]').val().trim();
                                    var cost_date = row.find('input[name="cost_date"]').val().trim();
                                    var duration = row.find('input[name="duration"]').val().trim();
                                    var salary_rate = row.find('input[name="salary_rate"]').val().trim();
                                    var allowance = row.find('input[name="allowance"]').unmask();
                                    if (member_id.trim() != '' && working_mode.trim() != '' && parseFloat(duration) > 0 && ((start_date != '' && end_date != '') || cost_date != '')) {
                                        member_ids[i] = member_id;
                                        working_modes[i] = working_mode;
                                        start_dates[i] = start_date;
                                        end_dates[i] = end_date;
                                        cost_dates[i] = cost_date;
                                        durations[i] = duration;
                                        salary_rates[i] = salary_rate;
                                        allowances[i] = allowance;
                                        descriptions[i] = row.find('textarea[name="description"]').val();
                                        i++;
                                    }
                                });

                                if (member_ids.length > 0) {
                                    $.post(
                                        base_url + "costs/save_permanent_labour_cost",
                                        {
                                            project_id: project_id,
                                            cost_center_id: cost_center_id,
                                            member_ids: member_ids,
                                            working_modes: working_modes,
                                            start_dates: start_dates,
                                            end_dates: end_dates,
                                            cost_dates: cost_dates,
                                            durations: durations,
                                            salary_rates: salary_rates,
                                            allowances: allowances,
                                            descriptions: descriptions
                                        }
                                    ).complete(function () {
                                        //reset form
                                        var form = button.closest('form');
                                        form[0].reset();
                                        modal.find('tbody select[name="member_id"]').select2('val', '');
                                        modal.find('tbody .artificial_row').remove();
                                        container_box.find('select[name="cost_center_id"]').val(cost_center_id);
                                        cost_center_selector.val(cost_center_id);
                                        var cost_center_level = cost_center_id == '' ? 'project' : 'task';
                                        var table = container_box.find('.permanent_labour_costs_items');
                                        cost_center_id = cost_center_id == '' ? table.attr('project_id') : cost_center_id;
                                        var url = controller + cost_center_level + '/' + cost_center_id;
                                        table.DataTable().ajax.url(url).load();
                                        stop_spinner();
                                    });
                                }


                            });
                        });
                        modal.attr('initialized', 'true');
                    }

                });
            });
    });

    $('a[href="#miscellaneous_tab"]').on('shown.bs.tab', function (e) {
        $('.miscellaneous_costs_items').each(function () {
            var table = $(this);
            var project_id = table.attr('project_id');
            if (table.attr('initialized') != 'true') {
                table.DataTable({
                    'processing': true,
                    'serverSide': true,
                    'order': [[0, "desc"]],
                    'ajax': {
                        "url": base_url + "costs/miscellaneous_costs_items_list/" + project_id,
                        "type": "POST",
                    },
                    'columns': [
                        { "orderable": true },
                        { "orderable": true },
                        { "orderable": true },
                        { "orderable": true },
                        { "orderable": true }
                    ],
                    'language': {
                        'zeroRecords': "<div class='alert alert-info'>No cost item found</div>",
                        'emptyTable': "<div class='alert alert-info'>No matching cost item found</div>"
                    },
                    'drawCallback': function (settings) {
                        table.find('td:last-child').attr('nowrap', 'nowrap');

                        table.find('.total_miscellaneous_amount_display').text(settings.json.total_amount).priceFormat();
                    }
                });
                table.attr('initialized', 'true')
            } else {
                table.DataTable().draw('page');
            }
        });
    });

    $('.owned_equipment_cost_tab').each(function () {

        var table = $(this);
        var project_id = table.attr('project_id');
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "Costs/owned_equipment_cost_list/" + project_id,
                    type: 'POST'
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching Equipment Cost found</div>",
                    "emptyTable": "<div class='alert alert-info'>No Equipment Cost found</div>"
                },

                "drawCallback": function (settings) {

                    table.find('#total_cost_amount_display').text(settings.json.cost_total).priceFormat();

                    //Save Equipment Cost

                    $('.save_owned_equipment_cost_btn').each(function () {

                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                var modal = button.closest('.modal');
                                var project_id = modal.find("input[name='project_id']").val();
                                var owned_equipment_cost_id = modal.find("input[name='owned_equipment_cost_id']").val();
                                var cost_center_id = modal.find("select[name='cost_center_id']").val();
                                var start_date = modal.find("input[name='start_date']").val();
                                var end_date = modal.find("input[name='end_date']").val();
                                var asset_id = modal.find("select[name='asset_id']").val();
                                var rate_mode = modal.find("select[name='rate_mode']").val();
                                var rate = modal.find("input[name='rate']").unmask();
                                var description = modal.find("textarea[name='description']").val();

                                if (asset_id != '') {
                                    start_spinner();
                                    modal.modal('hide');
                                    $.post(
                                        base_url + "Costs/save_owned_equipment_cost",
                                        {
                                            project_id: project_id,
                                            owned_equipment_cost_id: owned_equipment_cost_id,
                                            task_id: cost_center_id,
                                            start_date: start_date,
                                            end_date: end_date,
                                            asset_id: asset_id,
                                            rate_mode: rate_mode,
                                            rate: rate,
                                            description: description

                                        }, function () {
                                            stop_spinner();
                                            modal.find('form')[0].reset();
                                            $('.owned_equipment_cost_tab').DataTable().draw('page');
                                            toast('success', 'Equipment Cost Added successful ');
                                        }
                                    );
                                } else {
                                    toast('warning', 'Equipment Name Must be filled ');
                                }
                            });
                            button.attr('initialized', 'true');
                        }
                    });


                    //DeleteEquipment cost
                    $('.delete_owned_equipment_cost').each(function () {
                        var button = $(this);
                        if (button.attr('active') != 'true') {
                            button.click(function () {
                                if (confirm('Are you sure?')) {
                                    start_spinner();
                                    $.post(
                                        base_url + "Costs/delete_owned_equipment_cost",
                                        {
                                            owned_equipment_cost_id: button.attr('owned_equipment_cost_id')
                                        }, function () {
                                            $('.owned_equipment_cost_tab').DataTable().draw('page');
                                        }
                                    ).complete(function () {
                                        stop_spinner();
                                    });
                                }
                            });
                            button.attr('active', 'true');
                        }
                    });

                    $('.owned_equipment_cost_form').each(function () {

                        var modal = $(this);

                        modal.on('change', '.asset_group_selector',
                            function () {
                                var asset_group_id = modal.find('select[name="asset_group_id"]').val();
                                modal.find('input[name="amount"]').val(asset_group_id);
                                var asset_option_selector = modal.find('select[name="asset_id"]');

                                start_spinner();
                                $.post(
                                    base_url + "Projects/load_assets_options",
                                    {
                                        asset_group_id: asset_group_id

                                    }, function (data) {

                                        asset_option_selector.html(data.asset_dropdown_options);

                                        stop_spinner();

                                        initialize_common_js();

                                    }, 'json'
                                ).complete();


                            });


                        modal.find('input[name="start_date"], input[name="end_date"], input[name="amount"]').each(function () {


                            if ($(this).attr('initialized') != 'true') {

                                modal.delegate(' input[name="start_date"], input[name="end_date"], input[name="rate"]', 'change keyup', function () {


                                    var from_date = modal.find('input[name="start_date"]').val();
                                    var to_date = modal.find('input[name="end_date"]').val();
                                    var rate = modal.find('input[name="rate"]').unmask();
                                    var amount_field = modal.find('input[name="amount"]');

                                    if (from_date.trim() != '' && to_date.trim() != '') {
                                        function parseDate(str) {
                                            var mdy = str.split('-');
                                            return new Date(mdy[0], mdy[1] - 1, mdy[2]);
                                        }

                                        function daydiff(first, second) {
                                            return Math.round((second - first) / (1000 * 60 * 60 * 24));
                                        }

                                        var duration = daydiff(parseDate(from_date), parseDate(to_date));


                                    } else {
                                        var duration = 0;
                                    }

                                    if (rate != '') {
                                        var amount = duration * rate;
                                    } else {
                                        amount = 0;
                                    }

                                    amount_field.val(amount).priceFormat();

                                });

                                $(this).attr('initialized', 'true');
                            }
                        });


                    });


                    $(this).find('tr').each(function () {
                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                    });

                    initialize_common_js();
                }

            });
            table.attr('initialized', 'true');

        } else {
            table.DataTable().draw('page');
        }

    });

    // Hired_equipment_cost_tab
    $('.hired_equipment_cost_tab').each(function () {

        var table = $(this);

        var project_id = table.attr('project_id');

        //var task_id=table.closest('.box').find("select[name='cost_center_selector']").val();

        if (table.attr('initialized') != 'true') {
            table.DataTable({
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "Costs/hired_equipment_cost_list/" + project_id,
                    type: 'POST',
                    'data': function (d) {
                        d.task_id = table.closest('.box').find("select[name='cost_center_selector']").val();
                    }
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching Equipment Cost found</div>",
                    "emptyTable": "<div class='alert alert-info'>No Equipment Cost found</div>"
                },

                "drawCallback": function (settings) {

                    table.find('#total_cost_amount_display').text(settings.json.cost_total).priceFormat();

                    //Save Equipment Cost

                    $('.save_hired_equipment_cost_btn').each(function () {

                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                var modal = button.closest('.modal');
                                var project_id = modal.find("input[name='project_id']").val();
                                var hired_equipment_cost_id = modal.find("input[name='hired_equipment_cost_id']").val();
                                var cost_center_id = modal.find("select[name='cost_center_id']").val();
                                var start_date = modal.find("input[name='start_date']").val();
                                var end_date = modal.find("input[name='end_date']").val();
                                var hired_equipment_id = modal.find("select[name='hired_equipment_id']").val();
                                var rate_mode = modal.find("select[name='rate_mode']").val();
                                var rate = modal.find("input[name='rate']").unmask();
                                var description = modal.find("textarea[name='description']").val();

                                if (hired_equipment_id != '') {
                                    start_spinner();
                                    modal.modal('hide');
                                    $.post(
                                        base_url + "Costs/save_hired_equipment_cost",
                                        {
                                            project_id: project_id,
                                            hired_equipment_cost_id: hired_equipment_cost_id,
                                            task_id: cost_center_id,
                                            start_date: start_date,
                                            end_date: end_date,
                                            hired_equipment_id: hired_equipment_id,
                                            rate_mode: rate_mode,
                                            rate: rate,
                                            description: description

                                        }, function () {
                                            stop_spinner();
                                            modal.find('form')[0].reset();
                                            $('.hired_equipment_cost_tab').DataTable().draw('page');
                                            toast('success', 'Equipment Cost Added successful ');
                                        }
                                    );
                                } else {
                                    toast('warning', 'Equipment Name Must be filled ');
                                }
                            });
                            button.attr('initialized', 'true');
                        }
                    });


                    //DeleteEquipment cost
                    $('.delete_hired_equipment_cost').each(function () {
                        var button = $(this);
                        if (button.attr('active') != 'true') {
                            button.click(function () {
                                if (confirm('Are you sure?')) {
                                    start_spinner();
                                    $.post(
                                        base_url + "Costs/delete_hired_equipment_cost",
                                        {
                                            hired_equipment_cost_id: button.attr('hired_equipment_cost_id')
                                        }, function () {
                                            $('.hired_equipment_cost_tab').DataTable().draw('page');
                                        }
                                    ).complete(function () {
                                        stop_spinner();
                                    });
                                }
                            });
                            button.attr('active', 'true');
                        }
                    });

                    $('.hired_equipment_cost_form').each(function () {

                        var modal = $(this);

                        modal.on('change', '.asset_group_selector',
                            function () {
                                var asset_group_id = modal.find('select[name="asset_group_id"]').val();
                                modal.find('input[name="amount"]').val(asset_group_id);
                                var equipment_option_selector = modal.find('select[name="hired_equipment_id"]');

                                start_spinner();
                                $.post(
                                    base_url + "Projects/load_equipments_options",
                                    {
                                        asset_group_id: asset_group_id

                                    }, function (data) {

                                        equipment_option_selector.html(data.asset_dropdown_options);

                                        stop_spinner();

                                        initialize_common_js();

                                    }, 'json'
                                ).complete();

                            });

                        modal.find('input[name="start_date"], input[name="end_date"], input[name="amount"]').each(function () {


                            if ($(this).attr('initialized') != 'true') {

                                modal.delegate(' input[name="start_date"], input[name="end_date"], input[name="rate"]', 'change keyup', function () {


                                    var from_date = modal.find('input[name="start_date"]').val();
                                    var to_date = modal.find('input[name="end_date"]').val();
                                    var rate = modal.find('input[name="rate"]').unmask();
                                    var amount_field = modal.find('input[name="amount"]');

                                    if (from_date.trim() != '' && to_date.trim() != '') {
                                        function parseDate(str) {
                                            var mdy = str.split('-');
                                            return new Date(mdy[0], mdy[1] - 1, mdy[2]);
                                        }

                                        function daydiff(first, second) {
                                            return Math.round((second - first) / (1000 * 60 * 60 * 24));
                                        }

                                        var duration = daydiff(parseDate(from_date), parseDate(to_date));


                                    } else {
                                        var duration = 0;
                                    }

                                    if (rate != '') {
                                        var amount = duration * rate;
                                    } else {
                                        amount = 0;
                                    }

                                    amount_field.val(amount).priceFormat();

                                });

                                $(this).attr('initialized', 'true');
                            }
                        });


                    });


                    $(this).find('tr').each(function () {
                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                    });

                    initialize_common_js();
                }

            });

            table.attr('initialized', 'true');
        } else {
            table.DataTable().draw('page');
        }

    });
});

$('a[href="#project_store"]').on('shown.bs.tab', function (e) {
    start_spinner();
    var project_id = $(this).attr('project_id');
    $.post(
        base_url + "projects/project_store",
        {
            project_id: project_id
        }, function (data) {
            $('#project_store').html(data);
            initialize_location_material_stock();
        }
    ).complete(function () {
        stop_spinner();
        initialize_common_js();
    });
});

$('a[href="#project_planning"]').on('shown.bs.tab', function (e) {
    $('#project_plans_table').each(function () {
        var table = $(this);
        var project_id = table.attr('project_id');
        draw_project_planing_execution_table($(this), 'planning', project_id)
    });
});

$('a[href="#project_executions"]').on('shown.bs.tab', function (e) {
    $('#project_executions_table').each(function () {
        var table = $(this);
        var project_id = table.attr('project_id');
        draw_project_planing_execution_table($(this), 'executions', project_id)
    });
});

function draw_project_planing_execution_table(table, level, project_id) {
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            'processing': true,
            'serverSide': true,
            'order': [[0, "desc"]],
            "ajax": {
                url: base_url + "projects/project_plans_list/" + level + "/" + project_id,
                type: 'POST'
            },
            'columns': [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            'language': {
                'zeroRecords': "<div class='alert alert-info'>No matching project plan found</div>",
                'emptyTable': "<div class='alert alert-info'>No project plans found</div>"
            },
            'drawCallback': function () {
                table.find('td:last-child').attr('nowrap', 'nowrap');

                var load_project_plan_tasks = function (container) {
                    var project_plan_id = container.find('input[name="project_plan_id"]').val();
                    var task_type = container.find('input[name="task_type"]').val();
                    var project_id = container.find('input[name="project_id"]').val();
                    start_spinner();
                    $.post(
                        base_url + "projects/load_project_plan_tasks",
                        {
                            project_plan_id: project_plan_id,
                            task_type: task_type,
                            project_id: project_id

                        }, function (data) {
                            initialize_common_js();
                            container.find('.project_plan_tasks_display').html(data);
                            stop_spinner();
                        }
                    ).complete();
                };

                var validate_task_quantity = function (container) {
                    container.delegate('select[name="task_id"],input[name="quantity"]', 'change keyup', function () {
                        var task_id = container.find('select[name="task_id"]').val();
                        var quantity_input = container.find('input[name="quantity"]');
                        var remain_quantity_input = container.find('input[name="remain_quantity"]');
                        var task_quantity = quantity_input.val();
                        task_quantity = task_quantity != '' ? parseFloat(task_quantity) : 0;

                        $.post(
                            base_url + "projects/validate_task_quantity",
                            {
                                task_id: task_id
                            }, function (data) {
                                remain_quantity_input.val(data);
                                if (task_quantity > data) {
                                    toast('error', 'The quantity ' + task_quantity + ' you entered exceeds the task quantity of ' + data);
                                    container.find('input[name="quantity"]').val(data);
                                }

                            }
                        ).complete();

                    });
                };

                var equipment_labour_form_amount_calculator = function (form, amount_decimal_places) {
                    var amount_decimal_places = typeof amount_decimal_places !== 'undefined' ? amount_decimal_places : '';
                    form.delegate(' input[name="rate"],  input[name="no_of_workers"], input[name="quantity"], input[name="duration"]', 'change keyup show.bs.modal', function () {
                        var rate = form.find(' input[name="rate"]').unmask();
                        var duration = form.find(' input[name="duration"]').val();
                        var form_type = form.find(' input[name="form_type"]').val();
                        if (form_type == 'equipment') {
                            var quantity = form.find(' input[name="quantity"]').val();
                            var amount = parseFloat(rate) * parseFloat(quantity) * parseFloat(duration);
                        } else {
                            var no_of_workers = form.find(' input[name="no_of_workers"]').val();
                            var amount = parseFloat(rate) * parseFloat(no_of_workers) * parseFloat(duration);
                        }
                        form.find(' input[name="amount"]').val(amount).priceFormat();
                    });
                };

                $('.project_plan_details').on('shown.bs.modal', function (e) {
                    initialize_common_js();
                });

                $('.project_plan_form').on('shown.bs.modal', function () {
                    var modal = $(this);
                    modal.find('select[name="currency_id"]').change(function () {
                        var currency_selector = $(this);
                        load_exchange_rate(currency_selector, modal);
                    });

                });

                $('.submit_project_plan').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var button = $(this);
                            var modal = button.closest('.modal');
                            var title = modal.find('input[name="title"]').val();
                            var start_date = modal.find('input[name="start_date"]').val();
                            var end_date = modal.find('input[name="end_date"]').val();
                            var project_id = modal.find('input[name="project_id"]').val();
                            var project_plan_id = modal.find('input[name="project_plan_id"]').val();

                            if (title != '' && start_date != '' && end_date != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "projects/save_project_plan",
                                    {
                                        project_plan_id: project_plan_id,
                                        title: title,
                                        start_date: start_date,
                                        end_date: end_date,
                                        project_id: project_id

                                    }, function (data) {
                                        stop_spinner();
                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                    }
                                ).complete();
                            }
                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_project_plan').each(function () {
                    var button = $(this);
                    button.click(function () {
                        $.confirm({
                            title: 'Delete Project Plan',
                            content: 'This action is irreversible! Are you sure?',
                            buttons: {
                                confirm: {
                                    text: 'Confirm Delete',
                                    btnClass: 'btn btn-danger btn-xs',
                                    action: function () {
                                        $.post(
                                            base_url + "projects/delete_project_plan",
                                            {
                                                project_plan_id: button.attr('project_plan_id')
                                            }
                                        ).complete(function () {
                                            table.DataTable().draw('page');
                                        });
                                    }
                                },
                                cancel: {
                                    text: "Cancel",
                                    btnClass: 'btn btn-default btn-xs'
                                }
                            }
                        });
                    })
                });

                $('.project_plan_tasks_activator').on('shown.bs.tab', function (e) {
                    var tab_container = $($(this).attr('href'));
                    tab_container.find('.plan_tasks_list').each(function () {
                        var table = $(this);
                        var project_plan_id = table.attr('project_plan_id');
                        if (table.attr('initialized') != 'true') {
                            table.DataTable({
                                'processing': true,
                                'serverSide': true,
                                'order': [[0, "desc"]],
                                'ajax': {
                                    "url": base_url + "projects/project_plan_tasks_list/" + project_plan_id,
                                    "type": "POST",
                                },
                                'columns': [
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": false }
                                ],
                                'language': {
                                    'zeroRecords': "<div class='alert alert-info'>No task found</div>",
                                    'emptyTable': "<div class='alert alert-info'>No matching task item found</div>"
                                },
                                'drawCallback': function () {
                                    table.find('td:last-child').attr('nowrap', 'nowrap');

                                    var calculate_task_duration = function (container) {
                                        var output_per_day = container.find('input[name="output_per_day"]').val();
                                        var quantity = container.find('input[name="quantity"]').val();
                                        var duration = (quantity / output_per_day);
                                        var output = !isNaN(duration) ? duration : 0;
                                        container.find('.display_duration').val(output.toFixed(2));
                                    };

                                    $('.project_plan_task_form').on('shown.bs.modal', function () {
                                        var modal = $(this);
                                        modal.find('select').select2({ width: '100%' });

                                        modal.find('.number_format').priceFormat();

                                        validate_task_quantity(modal);

                                        modal.find('select[name="task_id"]').change(function () {
                                            var task_id = $(this).val();
                                            start_spinner();
                                            $.post(
                                                base_url + "projects/load_task_unit",
                                                {
                                                    task_id: task_id

                                                }, function (data) {
                                                    modal.find('.unit_display').html(data);
                                                    stop_spinner();
                                                }
                                            ).complete();
                                        });

                                        modal.delegate('input[name="quantity"],input[name="output_per_day"]', 'change keyup show.bs.modal', function () {
                                            calculate_task_duration(modal);
                                        });

                                        initialize_common_js();
                                    });

                                    $('.submit_project_plan_task').each(function () {
                                        var button = $(this);
                                        if (button.attr('active') != 'true') {
                                            button.click(function () {
                                                var button = $(this);
                                                var modal = button.closest('.modal');
                                                var project_plan_task_id = modal.find('input[name="project_plan_task_id"]').val();
                                                var project_plan_id = modal.find('input[name="project_plan_id"]').val();
                                                var task_id = modal.find('select[name="task_id"]').val();
                                                var quantity = modal.find('input[name="quantity"]').val();
                                                var rate = modal.find('input[name="rate"]').val();
                                                var output_per_day = modal.find('input[name="output_per_day"]').val();

                                                if (quantity != '' && rate != '') {
                                                    modal.modal('hide');
                                                    start_spinner();
                                                    $.post(
                                                        base_url + "projects/save_project_plan_task",
                                                        {
                                                            project_plan_task_id: project_plan_task_id,
                                                            project_plan_id: project_plan_id,
                                                            task_id: task_id,
                                                            quantity: quantity,
                                                            rate: rate,
                                                            output_per_day: output_per_day

                                                        }, function (data) {
                                                            modal.find('form')[0].reset();
                                                            initialize_common_js();
                                                            stop_spinner();
                                                            $('.plan_tasks_list').DataTable().draw('page');
                                                        }
                                                    ).complete();
                                                } else {
                                                    toast('error');
                                                }
                                            });
                                            button.attr('active', 'true');
                                        }
                                    });

                                    $('.delete_project_plan_task').each(function () {
                                        var button = $(this);
                                        button.click(function () {
                                            $.confirm({
                                                title: 'Delete Project Plan Task',
                                                content: 'This action is irreversible! Are you sure?',
                                                buttons: {
                                                    confirm: {
                                                        text: 'Confirm Delete',
                                                        btnClass: 'btn btn-danger btn-xs',
                                                        action: function () {
                                                            $.post(
                                                                base_url + "projects/delete_project_plan_task",
                                                                {
                                                                    project_plan_task_id: button.attr('project_plan_task_id')
                                                                }
                                                            ).complete(function () {
                                                                table.DataTable().draw('page');
                                                            });
                                                        }
                                                    },
                                                    cancel: {
                                                        text: "Cancel",
                                                        btnClass: 'btn btn-default btn-xs'
                                                    }
                                                }
                                            });
                                        })
                                    });

                                    initialize_common_js();
                                }
                            });
                            table.attr('initialized', 'true')
                        } else {
                            table.DataTable().draw('page');
                        }
                    });
                });

                $('.project_plan_materials_activator').on('shown.bs.tab', function (e) {
                    var tab_container = $($(this).attr('href'));
                    var form = tab_container.find('form');
                    form.find('select').select2();

                    form.find('.number_format').priceFormat();

                    initialize_form_amount_calculator(form, 2);

                    form.find('select[name="material_item_id"]').change(function () {
                        var material_item_id = $(this).val();
                        start_spinner();
                        $.post(
                            base_url + "projects/load_material_item_unit",
                            {
                                material_item_id: material_item_id

                            }, function (data) {
                                form.find('.unit_display').html(data);
                                stop_spinner();
                            }
                        ).complete();
                    });

                    load_project_plan_tasks(form);

                    tab_container.find('.plan_materials_budget_list').each(function () {
                        var table = $(this);
                        var project_plan_id = table.attr('project_plan_id');
                        if (table.attr('initialized') != 'true') {
                            table.DataTable({
                                'processing': true,
                                'serverSide': true,
                                'order': [[0, "desc"]],
                                'ajax': {
                                    "url": base_url + "projects/plan_material_budget_list/" + project_plan_id,
                                    "type": "POST",
                                },
                                'columns': [
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": false }
                                ],
                                'language': {
                                    'zeroRecords': "<div class='alert alert-info'>No material budget found</div>",
                                    'emptyTable': "<div class='alert alert-info'>No matching material budget item found</div>"
                                },
                                'drawCallback': function (settings) {
                                    table.find('.total_plan_material_budget_display').text(settings.json.total_budget_amount).priceFormat();

                                    table.find('td:last-child').attr('nowrap', 'nowrap');

                                    $('.submit_plan_material_budget').each(function () {
                                        var button = $(this);
                                        if (button.attr('initialized') != 'true') {
                                            button.click(function () {
                                                var button = $(this);
                                                var form = button.closest('form');
                                                var project_plan_task_id = form.find('select[name="project_plan_task_id"]').val();
                                                var material_item_id = form.find('select[name="material_item_id"]').val();
                                                var quantity = form.find('input[name="quantity"]').val();
                                                var rate = form.find('input[name="rate"]').unmask();

                                                if (quantity != '' && rate != '') {
                                                    start_spinner();
                                                    $.post(
                                                        base_url + "projects/save_project_plan_material_budget",
                                                        {
                                                            material_item_id: material_item_id,
                                                            project_plan_task_id: project_plan_task_id,
                                                            quantity: quantity,
                                                            rate: rate

                                                        }, function (data) {
                                                            form[0].reset();
                                                            form.find('select').each(function () {
                                                                $(this).select2('val', '');
                                                            });
                                                            initialize_common_js();
                                                            stop_spinner();
                                                            $('.plan_materials_budget_list').DataTable().draw('page');
                                                        }
                                                    ).complete();
                                                }
                                            });
                                            button.attr('initialized', 'true');
                                        }
                                    });

                                    $('.delete_plan_material_budget').each(function () {
                                        var button = $(this);
                                        button.click(function () {
                                            $.confirm({
                                                title: 'Delete Project Plan Material Budget',
                                                content: 'This action is irreversible! Are you sure?',
                                                buttons: {
                                                    confirm: {
                                                        text: 'Confirm Delete',
                                                        btnClass: 'btn btn-danger btn-xs',
                                                        action: function () {
                                                            $.post(
                                                                base_url + "projects/delete_plan_task_material_budget",
                                                                {
                                                                    plan_material_budget_id: button.attr('plan_material_budget_id')
                                                                }
                                                            ).complete(function () {
                                                                $('.plan_materials_budget_list').DataTable().draw('page');
                                                            });
                                                        }
                                                    },
                                                    cancel: {
                                                        text: "Cancel",
                                                        btnClass: 'btn btn-default btn-xs'
                                                    }
                                                }
                                            });
                                        })
                                    });

                                    initialize_common_js();
                                }
                            });
                            table.attr('initialized', 'true')
                        } else {
                            table.DataTable().draw('page');
                        }
                    });
                });

                $('.project_plan_equipments_activator').on('shown.bs.tab', function (e) {
                    var tab_container = $($(this).attr('href'));
                    tab_container.find('.plan_equipments_budget_list').each(function () {
                        var table = $(this);
                        var project_plan_id = table.attr('project_plan_id');
                        if (table.attr('initialized') != 'true') {
                            table.DataTable({
                                'processing': true,
                                'serverSide': true,
                                'order': [[0, "desc"]],
                                'ajax': {
                                    "url": base_url + "projects/plan_eqipment_budget_list/" + project_plan_id,
                                    "type": "POST",
                                },
                                'columns': [
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": false }
                                ],
                                'language': {
                                    'zeroRecords': "<div class='alert alert-info'>No material budget found</div>",
                                    'emptyTable': "<div class='alert alert-info'>No matching material budget item found</div>"
                                },
                                'drawCallback': function (settings) {
                                    table.find('.total_equipment_budget_display').text(settings.json.total_budget_amount).priceFormat();

                                    table.find('td:last-child').attr('nowrap', 'nowrap');

                                    $('.project_plan_task_equipment_form').on('show.bs.modal', function () {
                                        var modal = $(this);
                                        modal.find('select').select2({ width: '100%' });

                                        modal.find('.number_format').priceFormat();

                                        load_project_plan_tasks(modal);

                                        equipment_labour_form_amount_calculator(modal.find('form'), 2);
                                    });

                                    $('.submit_plan_equipment_budget').each(function () {
                                        var button = $(this);
                                        if (button.attr('initialized') != 'true') {
                                            button.click(function () {
                                                var button = $(this);
                                                var modal = button.closest('.modal');
                                                var plan_equipment_budget_id = modal.find('input[name="plan_equipment_budget_id"]').val();
                                                var project_plan_task_id = modal.find('select[name="project_plan_task_id"]').val();
                                                var asset_id = modal.find('select[name="asset_id"]').val();
                                                var rate_mode = modal.find('select[name="rate_mode"]').val();
                                                var quantity = modal.find('input[name="quantity"]').val();
                                                var rate = modal.find('input[name="rate"]').unmask();
                                                var duration = modal.find('input[name="duration"]').val();
                                                var description = modal.find('textarea[name="description"]').val();

                                                if (project_plan_task_id != '' && quantity != '' && rate != '') {
                                                    modal.modal('hide');
                                                    start_spinner();
                                                    $.post(
                                                        base_url + "projects/save_project_plan_task_equipment_budget",
                                                        {
                                                            plan_equipment_budget_id: plan_equipment_budget_id,
                                                            project_plan_task_id: project_plan_task_id,
                                                            asset_id: asset_id,
                                                            rate_mode: rate_mode,
                                                            quantity: quantity,
                                                            rate: rate,
                                                            duration: duration,
                                                            description: description

                                                        }, function (data) {
                                                            stop_spinner();
                                                            modal.find('form')[0].reset();
                                                            $('.plan_equipments_budget_list').DataTable().draw('page');
                                                        }
                                                    ).complete();
                                                } else {
                                                    toast('error');
                                                }
                                            });
                                            button.attr('initialized', 'true');
                                        }
                                    });

                                    $('.delete_plan_equipment_budget').each(function () {
                                        var button = $(this);
                                        button.click(function () {
                                            $.confirm({
                                                title: 'Delete Project Plan Equipment Budget',
                                                content: 'This action is irreversible! Are you sure?',
                                                buttons: {
                                                    confirm: {
                                                        text: 'Confirm Delete',
                                                        btnClass: 'btn btn-danger btn-xs',
                                                        action: function () {
                                                            $.post(
                                                                base_url + "projects/delete_plan_task_equipment_budget",
                                                                {
                                                                    plan_equipment_budget_id: button.attr('plan_equipment_budget_id')
                                                                }
                                                            ).complete(function () {
                                                                table.DataTable().draw('page');
                                                            });
                                                        }
                                                    },
                                                    cancel: {
                                                        text: "Cancel",
                                                        btnClass: 'btn btn-default btn-xs'
                                                    }
                                                }
                                            });
                                        })
                                    });

                                    initialize_common_js();
                                }
                            });
                            table.attr('initialized', 'true')
                        } else {
                            table.DataTable().draw('page');
                        }
                    });
                });

                $('.project_plan_labour_activator').on('shown.bs.tab', function (e) {
                    var tab_container = $($(this).attr('href'));
                    tab_container.find('.plan_labour_budget_list').each(function () {
                        var table = $(this);
                        var project_plan_id = table.attr('project_plan_id');
                        if (table.attr('initialized') != 'true') {
                            table.DataTable({
                                'processing': true,
                                'serverSide': true,
                                'order': [[0, "desc"]],
                                'ajax': {
                                    "url": base_url + "projects/plan_labour_budget_list/" + project_plan_id,
                                    "type": "POST",
                                },
                                'columns': [
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": false }
                                ],
                                'language': {
                                    'zeroRecords': "<div class='alert alert-info'>No labour budget found</div>",
                                    'emptyTable': "<div class='alert alert-info'>No matching labour budget item found</div>"
                                },
                                'drawCallback': function (settings) {
                                    table.find('.total_labour_budget_display').text(settings.json.total_budget_amount).priceFormat();

                                    table.find('td:last-child').attr('nowrap', 'nowrap');

                                    $('.project_plan_task_labour_form').on('show.bs.modal', function () {
                                        var modal = $(this);

                                        modal.find('select').select2({ width: '100%' });

                                        modal.find('.number_format').priceFormat();

                                        load_project_plan_tasks(modal);

                                        equipment_labour_form_amount_calculator(modal.find('form'), 2);
                                    });

                                    $('.submit_plan_labour_budget').each(function () {
                                        var button = $(this);
                                        if (button.attr('initialized') != 'true') {
                                            button.click(function () {
                                                var button = $(this);
                                                var modal = button.closest('.modal');
                                                var plan_labour_budget_id = modal.find('input[name="plan_labour_budget_id"]').val();
                                                var project_plan_task_id = modal.find('select[name="project_plan_task_id"]').val();
                                                var casual_labour_type_id = modal.find('select[name="casual_labour_type_id"]').val();
                                                var rate_mode = modal.find('select[name="rate_mode"]').val();
                                                var no_of_workers = modal.find('input[name="no_of_workers"]').val();
                                                var rate = modal.find('input[name="rate"]').val();
                                                var duration = modal.find('input[name="duration"]').val();
                                                var description = modal.find('textarea[name="description"]').val();

                                                if (project_plan_task_id != '' && no_of_workers != '' && rate != '') {
                                                    modal.modal('hide');
                                                    start_spinner();
                                                    $.post(
                                                        base_url + "projects/save_plan_task_casual_labour_budget",
                                                        {
                                                            plan_labour_budget_id: plan_labour_budget_id,
                                                            project_plan_task_id: project_plan_task_id,
                                                            casual_labour_type_id: casual_labour_type_id,
                                                            rate_mode: rate_mode,
                                                            duration: duration,
                                                            no_of_workers: no_of_workers,
                                                            rate: rate,
                                                            description: description

                                                        }, function (data) {
                                                            stop_spinner();
                                                            modal.find('form')[0].reset();
                                                            $('.plan_labour_budget_list').DataTable().draw('page');
                                                        }
                                                    ).complete();
                                                } else {
                                                    toast('error', 'Make sure the form fields are filled correctly');
                                                }
                                            });
                                            button.attr('initialized', 'true');
                                        }
                                    });

                                    $('.delete_plan_labour_budget').each(function () {
                                        var button = $(this);
                                        button.click(function () {
                                            $.confirm({
                                                title: 'Delete Project Plan Labour Budget',
                                                content: 'This action is irreversible! Are you sure?',
                                                buttons: {
                                                    confirm: {
                                                        text: 'Confirm Delete',
                                                        btnClass: 'btn btn-danger btn-xs',
                                                        action: function () {
                                                            $.post(
                                                                base_url + "projects/delete_plan_task_labour_budget",
                                                                {
                                                                    plan_labour_budget_id: button.attr('plan_labour_budget_id')
                                                                }
                                                            ).complete(function () {
                                                                table.DataTable().draw('page');
                                                            });
                                                        }
                                                    },
                                                    cancel: {
                                                        text: "Cancel",
                                                        btnClass: 'btn btn-default btn-xs'
                                                    }
                                                }
                                            });
                                        })
                                    });

                                    initialize_common_js();
                                }
                            });
                            table.attr('initialized', 'true')
                        } else {
                            table.DataTable().draw('page');
                        }
                    });
                });

                $('.plan_executed_task_list').each(function () {
                    if ($(this).attr('initialized') != 'true') {
                        var table = $(this);
                        var project_plan_id = $(this).attr('project_plan_id');
                        var project_id = table.attr('project_id');

                        table.DataTable({
                            colReorder: true,
                            "processing": true,
                            "serverSide": true,
                            "ajax": {
                                url: base_url + "projects/project_plan_task_execution_list/" + project_id + "/" + project_plan_id,
                                type: 'POST',
                            },
                            "columns": [
                                { "orderable": true },
                                { "orderable": true },
                                { "orderable": true },
                                { "orderable": true },
                                { "orderable": false }
                            ],
                            "language": {
                                "zeroRecords": "<div class='alert alert-info'>No matching task execution found</div>",
                                "emptyTable": "<div class='alert alert-info'>No task execution found</div>"
                            },
                            "drawCallback": function () {
                                table.find('td:last-child').attr('nowrap', 'nowrap');

                                var load_project_plan_executed_tasks = function (container) {
                                    var project_plan_id = container.find('input[name="project_plan_id"]').val();
                                    var project_id = container.find('input[name="project_id"]').val();
                                    start_spinner();
                                    $.post(
                                        base_url + "projects/load_project_plan_executed_tasks",
                                        {
                                            project_plan_id: project_plan_id,
                                            project_id: project_id

                                        }, function (data) {
                                            initialize_common_js();
                                            container.find('.project_plan_tasks_display').html(data);
                                            stop_spinner();
                                        }
                                    ).complete();
                                };

                                $('.plan_task_execution_form').on('shown.bs.modal', function (e) {
                                    var modal = $(this);
                                    modal.find('select').select2();

                                    validate_task_quantity(modal)
                                });

                                $('.save_plan_task_execution').each(function () {
                                    var button = $(this);
                                    if (button.attr('active') != 'true') {
                                        button.click(function () {
                                            var modal = button.closest('.modal');
                                            var project_plan_id = modal.find('input[name="project_plan_id"]').val();
                                            var plan_task_execution_id = modal.find('input[name="plan_task_execution_id"]').val();
                                            var task_id = modal.find('select[name="task_id"]').val();
                                            var executed_quantity = modal.find('input[name="quantity"]').val();
                                            var execution_date = modal.find('input[name="execution_date"]').val();
                                            if (executed_quantity != '' && task_id != '') {
                                                modal.modal('hide');
                                                start_spinner();
                                                $.post(
                                                    base_url + "projects/save_project_task_execution/",
                                                    {
                                                        plan_task_execution_id: plan_task_execution_id,
                                                        task_id: task_id,
                                                        project_plan_id: project_plan_id,
                                                        execution_date: execution_date,
                                                        executed_quantity: executed_quantity,

                                                    }, function (data) {
                                                        stop_spinner();
                                                        modal.find('form')[0].reset();
                                                        $('.plan_executed_task_list').DataTable().draw('page');
                                                    }
                                                ).complete();
                                            } else {
                                                toast('error', 'Make sure the form fields are filled correctly');
                                            }
                                        });
                                        button.attr('active', 'true');
                                    }
                                });

                                $('.delete_plan_task_execution').each(function () {
                                    var button = $(this);
                                    button.click(function () {
                                        $.confirm({
                                            title: 'Delete Project Plan Executed Task',
                                            content: 'This action is irreversible! Are you sure?',
                                            buttons: {
                                                confirm: {
                                                    text: 'Confirm Delete',
                                                    btnClass: 'btn btn-danger btn-xs',
                                                    action: function () {
                                                        $.post(
                                                            base_url + "projects/delete_plan_task_execution",
                                                            {
                                                                plan_task_execution_id: button.attr('plan_task_execution_id')
                                                            }
                                                        ).complete(function () {
                                                            table.DataTable().draw('page');
                                                        });
                                                    }
                                                },
                                                cancel: {
                                                    text: "Cancel",
                                                    btnClass: 'btn btn-default btn-xs'
                                                }
                                            }
                                        });
                                    })
                                });

                                initialize_common_js();

                            }
                        });
                        $(this).attr('initialized', 'true');
                    } else {
                        $(this).DataTable().draw('page');
                    }
                });

                $('.project_executions_materials_activator').on('shown.bs.tab', function (e) {
                    var tab_container = $($(this).attr('href'));
                    tab_container.find('.executions_material_costs_items').each(function () {
                        var table = $(this);
                        var project_plan_id = table.attr('project_plan_id')
                        if ($(this).attr('initialized') != 'true') {
                            var table = $(this);
                            var project_plan_id = $(this).attr('project_plan_id');
                            var project_id = table.attr('project_id');
                            var controller = base_url + "costs/execution_material_cost_list/";
                            var url = controller + project_plan_id;

                            table.DataTable({
                                colReorder: true,
                                "processing": true,
                                "serverSide": true,
                                "ajax": {
                                    url: url,
                                    type: 'POST',
                                    data: {
                                        'project_id': project_id
                                    }
                                },
                                "columns": [
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": false }
                                ],
                                "language": {
                                    "zeroRecords": "<div class='alert alert-info'>No matching costs items found</div>",
                                    "emptyTable": "<div class='alert alert-info'>No costs items found</div>"
                                },
                                "drawCallback": function (settings) {
                                    table.find('#total_cost_amount_display').text(parseFloat(settings.json.cost_total).toFixed(2)).priceFormat();

                                    table.find('tr').each(function () {
                                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                                    });

                                    $('.plan_task_execution_material_cost_form').each(function () {
                                        var modal = $(this);

                                        if (modal.attr('initialized') != 'true') {
                                            modal.on('show.bs.modal', function (e) {
                                                modal.find('select').select({ width: '100%' });

                                                load_project_plan_tasks(modal);

                                                initialize_form_amount_calculator(modal.find('form'), 2);

                                                modal.find('select[name="source_sub_location_id"]').change(function () {
                                                    load_sub_location_available_material_options($(this), 'form');
                                                });

                                                var material_selector = $(this).find('.cost_material_selector');
                                                if (material_selector.val() != '') {
                                                    validate_sub_store_material_quantity(material_selector, 'form');
                                                }

                                                if (material_selector.attr('initialize_load_quantity_and_rate') != 'true') {
                                                    material_selector.change(function () {
                                                        load_material_unit($(this), 'form');
                                                        validate_sub_store_material_quantity($(this), 'form');
                                                    });
                                                    material_selector.attr('initialize_load_quantity_and_rate', 'true');
                                                }

                                                modal.find('.save_executions_material_cost').each(function () {
                                                    var button = $(this);
                                                    if (button.attr('active') != 'true') {
                                                        button.click(function () {
                                                            var modal = button.closest('.modal');
                                                            var project_id = modal.find('input[name="project_id"]').val();
                                                            var item_id = modal.find('input[name="item_id"]').val();
                                                            var plan_task_execution_id = modal.find('select[name="plan_task_execution_id"]').val();
                                                            var source_sub_location_id = modal.find('select[name="source_sub_location_id"]').val();
                                                            var material_id = modal.find('select[name="material_id"]').val();
                                                            var description = modal.find('textarea[name="description"]').val();
                                                            var quantity = modal.find('input[name="quantity"]').val();
                                                            var executed_task_quantity = modal.find('input[name="executed_task_quantity"]').val();
                                                            var rate = modal.find('input[name="rate"]').unmask();
                                                            var date = modal.find('input[name="date"]').val();

                                                            if (project_id != '' && quantity != '' && date != '') {
                                                                modal.modal('hide');

                                                                $.post(
                                                                    base_url + "costs/save_executions_material_cost/",
                                                                    {
                                                                        plan_task_execution_id: plan_task_execution_id,
                                                                        source_sub_location_id: source_sub_location_id,
                                                                        material_id: material_id,
                                                                        project_id: project_id,
                                                                        rate: rate,
                                                                        date: date,
                                                                        description: description,
                                                                        quantity: quantity,
                                                                        executed_task_quantity: executed_task_quantity,
                                                                        item_id: item_id
                                                                    }
                                                                ).complete(function () {
                                                                    var form = button.closest('form');
                                                                    form[0].reset();
                                                                    if (item_id.trim() == '') {
                                                                        material_selector.select2('val', '');
                                                                    }
                                                                    $('.executions_material_costs_items').DataTable().draw('page');
                                                                });
                                                            }
                                                        });
                                                        button.attr('active', 'true');
                                                    }
                                                });

                                                $(this).attr('initialized', 'true');
                                            });
                                            modal.attr('initialized', 'true');
                                        }
                                    });

                                    table.find('.execution_cost_item_delete').each(function () {
                                        var button = $(this);
                                        button.click(function () {
                                            $.confirm({
                                                title: 'Delete Plan Execution Material Cost',
                                                content: 'This action is irreversible! Are you sure?',
                                                buttons: {
                                                    confirm: {
                                                        text: 'Confirm Delete',
                                                        btnClass: 'btn btn-danger btn-xs',
                                                        action: function () {
                                                            $.post(
                                                                base_url + "costs/executin_cost_item_delete",
                                                                {
                                                                    item_id: button.attr('item_id')
                                                                }
                                                            ).complete(function () {
                                                                table.DataTable().draw('page');
                                                            });
                                                        }
                                                    },
                                                    cancel: {
                                                        text: "Cancel",
                                                        btnClass: 'btn btn-default btn-xs'
                                                    }
                                                }
                                            });
                                        })
                                    });

                                    initialize_common_js();
                                }
                            });

                            initialize_common_js();
                            $(this).attr('initialized', 'true');
                        } else {
                            $(this).DataTable().draw('page');
                        }
                    });
                });

                $('.project_executions_equipments_activator').on('shown.bs.tab', function (e) {
                    var tab_container = $($(this).attr('href'));
                    tab_container.find('.project_task_equipment_execution_list').each(function () {
                        var table = $(this);
                        var project_plan_id = table.attr('project_plan_id');
                        if (table.attr('initialized') != 'true') {
                            table.DataTable({
                                'processing': true,
                                'serverSide': true,
                                'order': [[0, "desc"]],
                                'ajax': {
                                    "url": base_url + "projects/project_task_equipment_execution_list/" + project_plan_id,
                                    "type": "POST",
                                },
                                'columns': [
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": false }
                                ],
                                'language': {
                                    'zeroRecords': "<div class='alert alert-info'>No execution equipment found</div>",
                                    'emptyTable': "<div class='alert alert-info'>No matching execution equipment found</div>"
                                },
                                'drawCallback': function (settings) {
                                    table.find('.total_execution_amount_display').text(settings.json.total_execution_amount).priceFormat();

                                    table.find('td:last-child').attr('nowrap', 'nowrap');

                                    $('.plan_task_execution_equipment_form').on('show.bs.modal', function () {
                                        var modal = $(this);
                                        modal.find('select').select2({ width: '100%' });

                                        modal.find('.number_format').priceFormat();

                                        load_project_plan_tasks(modal);

                                        equipment_labour_form_amount_calculator(modal.find('form'), 2);
                                    });

                                    $('.submit_execution_equipment').each(function () {
                                        var button = $(this);
                                        if (button.attr('initialized') != 'true') {
                                            button.click(function () {
                                                var button = $(this);
                                                var modal = button.closest('.modal');
                                                var plan_equipment_execution_id = modal.find('input[name="plan_equipment_execution_id"]').val();
                                                var plan_task_execution_id = modal.find('select[name="plan_task_execution_id"]').val();
                                                var asset_id = modal.find('select[name="asset_id"]').val();
                                                var date = modal.find('input[name="date"]').val();
                                                var rate_mode = modal.find('select[name="rate_mode"]').val();
                                                var quantity = modal.find('input[name="quantity"]').val();
                                                var rate = modal.find('input[name="rate"]').unmask();
                                                var duration = modal.find('input[name="duration"]').val();
                                                var description = modal.find('textarea[name="description"]').val();

                                                if (duration != '' && quantity != '' && rate != '') {
                                                    modal.modal('hide');
                                                    start_spinner();
                                                    $.post(
                                                        base_url + "projects/save_project_plan_task_equipment_execution",
                                                        {
                                                            plan_equipment_execution_id: plan_equipment_execution_id,
                                                            plan_task_execution_id: plan_task_execution_id,
                                                            date: date,
                                                            asset_id: asset_id,
                                                            rate_mode: rate_mode,
                                                            quantity: quantity,
                                                            rate: rate,
                                                            duration: duration,
                                                            description: description

                                                        }, function (data) {
                                                            stop_spinner();
                                                            modal.find('form')[0].reset();
                                                            $('.project_task_equipment_execution_list').DataTable().draw('page');
                                                        }
                                                    ).complete();
                                                } else {
                                                    toast('error');
                                                }
                                            });
                                            button.attr('initialized', 'true');
                                        }
                                    });

                                    $('.delete_plan_equipment_budget').each(function () {
                                        var button = $(this);
                                        button.click(function () {
                                            $.confirm({
                                                title: 'Delete Project Equipment Execution',
                                                content: 'This action is irreversible! Are you sure?',
                                                buttons: {
                                                    confirm: {
                                                        text: 'Confirm Delete',
                                                        btnClass: 'btn btn-danger btn-xs',
                                                        action: function () {
                                                            $.post(
                                                                base_url + "projects/delete_plan_task_equipment_execution",
                                                                {
                                                                    plan_equipment_execution_id: button.attr('plan_equipment_execution_id')
                                                                }
                                                            ).complete(function () {
                                                                table.DataTable().draw('page');
                                                            });
                                                        }
                                                    },
                                                    cancel: {
                                                        text: "Cancel",
                                                        btnClass: 'btn btn-default btn-xs'
                                                    }
                                                }
                                            });
                                        })
                                    });

                                    initialize_common_js();
                                }
                            });
                            table.attr('initialized', 'true')
                        } else {
                            table.DataTable().draw('page');
                        }
                    });
                });

                $('.project_executions_labour_activator').on('shown.bs.tab', function (e) {
                    var tab_container = $($(this).attr('href'));
                    tab_container.find('.project_plan_labour_execution_list').each(function () {
                        var table = $(this);
                        var project_plan_id = table.attr('project_plan_id');
                        if (table.attr('initialized') != 'true') {
                            table.DataTable({
                                'processing': true,
                                'serverSide': true,
                                'order': [[0, "desc"]],
                                'ajax': {
                                    "url": base_url + "projects/project_plan_labour_execution_list/" + project_plan_id,
                                    "type": "POST",
                                },
                                'columns': [
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": false }
                                ],
                                'language': {
                                    'zeroRecords': "<div class='alert alert-info'>No execution labour item found</div>",
                                    'emptyTable': "<div class='alert alert-info'>No matching execution labour item found</div>"
                                },
                                'drawCallback': function (settings) {
                                    table.find('.total_execution_amount_display').text(settings.json.total_execution_amount).priceFormat();

                                    table.find('td:last-child').attr('nowrap', 'nowrap');

                                    $('.plan_task_execution_casual_labour_form').on('show.bs.modal', function () {
                                        var modal = $(this);

                                        modal.find('select').select2({ width: '100%' });

                                        modal.find('.number_format').priceFormat();

                                        load_project_plan_tasks(modal);

                                        equipment_labour_form_amount_calculator(modal.find('form'), 2);
                                    });

                                    $('.submit_plan_labour_execution').each(function () {
                                        var button = $(this);
                                        if (button.attr('initialized') != 'true') {
                                            button.click(function () {
                                                var button = $(this);
                                                var modal = button.closest('.modal');
                                                var plan_labour_execution_id = modal.find('input[name="plan_labour_execution_id"]').val();
                                                var plan_task_execution_id = modal.find('select[name="plan_task_execution_id"]').val();
                                                var date = modal.find('input[name="date"]').val();
                                                var casual_labour_type_id = modal.find('select[name="casual_labour_type_id"]').val();
                                                var rate_mode = modal.find('select[name="rate_mode"]').val();
                                                var no_of_workers = modal.find('input[name="no_of_workers"]').val();
                                                var rate = modal.find('input[name="rate"]').val();
                                                var duration = modal.find('input[name="duration"]').val();
                                                var description = modal.find('textarea[name="description"]').val();

                                                if (plan_task_execution_id != '' && no_of_workers != '' && rate != '') {
                                                    modal.modal('hide');
                                                    start_spinner();
                                                    $.post(
                                                        base_url + "projects/save_plan_task_labour_execution",
                                                        {
                                                            plan_labour_execution_id: plan_labour_execution_id,
                                                            plan_task_execution_id: plan_task_execution_id,
                                                            date: date,
                                                            casual_labour_type_id: casual_labour_type_id,
                                                            rate_mode: rate_mode,
                                                            duration: duration,
                                                            no_of_workers: no_of_workers,
                                                            rate: rate,
                                                            description: description

                                                        }, function (data) {
                                                            stop_spinner();
                                                            modal.find('form')[0].reset();
                                                            $('.project_plan_labour_execution_list').DataTable().draw('page');
                                                        }
                                                    ).complete();
                                                } else {
                                                    toast('error', 'Make sure the form fields are filled correctly');
                                                }
                                            });
                                            button.attr('initialized', 'true');
                                        }
                                    });

                                    $('.delete_plan_labour_execution').each(function () {
                                        var button = $(this);
                                        button.click(function () {
                                            $.confirm({
                                                title: 'Delete Plan Execution Labour Cost',
                                                content: 'This action is irreversible! Are you sure?',
                                                buttons: {
                                                    confirm: {
                                                        text: 'Confirm Delete',
                                                        btnClass: 'btn btn-danger btn-xs',
                                                        action: function () {
                                                            $.post(
                                                                base_url + "projects/delete_plan_task_labour_execution",
                                                                {
                                                                    plan_labour_execution_id: button.attr('plan_labour_execution_id')
                                                                }
                                                            ).complete(function () {
                                                                table.DataTable().draw('page');
                                                            });
                                                        }
                                                    },
                                                    cancel: {
                                                        text: "Cancel",
                                                        btnClass: 'btn btn-default btn-xs'
                                                    }
                                                }
                                            });
                                        })
                                    });

                                    initialize_common_js();
                                }
                            });
                            table.attr('initialized', 'true')
                        } else {
                            table.DataTable().draw('page');
                        }
                    });
                });

                initialize_common_js();
            }
        });
        table.attr('initialized', 'true')
    } else {
        table.DataTable().draw('page');
    }
}

$('a[href="#project_activities"], a[href="#task_wise_budgeting_tab"] ').on('shown.bs.tab', function (e) {
    load_project_activities();
});

$('a[href="#project_team"]').on('shown.bs.tab', function (e) {
    $('#project_team').find('#project_team_members_table').each(function () {
        if ($(this).attr('dataTable_initialized') != 'true') {
            var project_id = $(this).attr('project_id');
            $(this).DataTable({
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "projects/project_team_members/",
                    type: 'POST',
                    data: {
                        project_id: project_id
                    }
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching project team members found</div>",
                    "emptyTable": "<div class='alert alert-info'>No project team members found for this project</div>"
                },
                "drawCallback": function () {

                    //Initialize team member form
                    $('#new_project_team_member').on('show.bs.modal', function (e) {
                        if (e.namespace === 'bs.modal') {
                            var select_element = $(this).find('select[name="employee_id"]');
                            var project_id = $(this).find('input[name="project_id"]').val();
                            start_spinner();
                            $.post(
                                base_url + "projects/project_team_member_employees_options",
                                {
                                    project_id: project_id
                                }, function (data) {
                                    select_element.html(data);
                                }
                            ).complete(function () {
                                stop_spinner()
                            });
                        }
                    });

                    //Save Project Team Member

                    $('.save_project_team_member').off('click').on('click', function () {
                        var button = $(this);
                        var modal = button.closest('.modal');
                        var employee_id = modal.find('select[name="employee_id"]').val();
                        var job_position_id = modal.find('select[name="job_position_id"]').val();
                        if (employee_id != '' && job_position_id != '') {
                            modal.modal('hide');
                            start_spinner();
                            var member_id = modal.find('input[name="member_id"]').val();
                            var project_id = modal.find('input[name="project_id"]').val();
                            var date_assigned = modal.find('input[name="date_assigned"]').val();
                            var remarks = modal.find('textarea[name="remarks"]').val();
                            var manager_access = modal.find(' input[name="manager_access"]').is(":checked") ? 1 : 0;

                            $.post(
                                base_url + "projects/save_project_team_member/",
                                {
                                    member_id: member_id,
                                    project_id: project_id,
                                    employee_id: employee_id,
                                    manager_access: manager_access,
                                    date_assigned: date_assigned,
                                    job_position_id: job_position_id,
                                    remarks: remarks
                                }, function () {
                                    stop_spinner();
                                }
                            ).complete(function () {
                                modal.find('form')[0].reset();
                                $('#project_team_members_table').DataTable().draw('page');
                            });
                        } else {
                            display_form_fields_error();
                        }
                    });

                    //Delete Project Team Member

                    $('.delete_project_team_member').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            var member_id = button.attr('member_id');
                            button.click(function () {
                                if (confirm('Are you sure?')) {
                                    $.post(
                                        base_url + "projects/delete_project_team_member",
                                        {
                                            member_id: member_id
                                        }, function () {
                                            $('#project_team_members_table').DataTable().draw('page');
                                        }
                                    );
                                }
                            });
                            button.attr('initialized', 'true');
                        }
                    });

                    $(this).find('tr').each(function () {
                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                    });
                    initialize_common_js();
                }
            });
            $(this).attr('dataTable_initialized', 'true');
        } else {
            $(this).DataTable().draw('page');
        }
    });
});

$('a[href="#project_certificates"]').on('shown.bs.tab', function (e) {
    $('#project_certificate_list').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {
            var project_id = table.attr('project_id');
            table.DataTable({
                'processing': true,
                'serverSide': true,
                'ajax': {
                    url: base_url + "Projects/project_certificate_list/" + project_id,
                    type: 'POST'

                },
                'columns': [
                    { 'orderable': true },
                    { 'orderable': true },
                    { 'orderable': true },
                    { 'orderable': false },
                    { 'orderable': false }


                ],
                'language': {
                    "zeroRecords": "<div class='alert alert-info'>No matching certificates found</div>",
                    "emptyTable": "<div class='alert alert-info'>No certificates found</div>"
                },
                'drawCallback': function (settings) {

                    table.find('.total_certified_amount').text(settings.json.total_certified_amount).priceFormat();
                    table.find('.total_paid_amount').text(settings.json.total_paid_amount).priceFormat();

                    table.find('tr').each(function () {
                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                    });

                    $('.save_project_certificate').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                var modal = button.closest('.modal');
                                var certificate_id = modal.find('input[name="certificate_id"]').val();
                                var certificate_date = modal.find('input[name="certificate_date"]').val();
                                var certified_amount = modal.find('input[name="certified_amount"]').unmask();
                                var certificate_number = modal.find('input[name="certificate_number"]').val();
                                var comment = modal.find('textarea[name="comments"]').val();
                                var project_id = modal.find('input[name="project_id"]').val();
                                if (certificate_date != '' && certified_amount != '' && certificate_number != '') {
                                    modal.modal('hide');
                                    start_spinner();
                                    $.post(
                                        base_url + "Projects/save_project_certificate",
                                        {
                                            certificate_id: certificate_id,
                                            project_id: project_id,
                                            certificate_date: certificate_date,
                                            certificate_number: certificate_number,
                                            comment: comment,
                                            certified_amount: certified_amount,
                                        }, function (data) {
                                            stop_spinner();
                                            modal.find('form')[0].reset();
                                            table.DataTable().draw('page');
                                        }
                                    );
                                }
                            });
                            button.attr('initialized', 'true');
                        }
                    });

                    $('.delete_project_certificate').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {

                            button.click(function () {

                                $.confirm({
                                    title: 'Delete Project Certificate',
                                    content: 'This action is irreversible! Are you sure?',
                                    buttons: {
                                        confirm: {
                                            text: 'Confirm Delete',
                                            btnClass: 'btn btn-danger btn-xs',
                                            action: function () {
                                                $.post(
                                                    base_url + "Projects/delete_project_certificate",
                                                    {
                                                        certificate_id: button.attr('certificate_id')
                                                    }, function (data) {
                                                        table.DataTable().draw('page');
                                                    }
                                                );
                                            }
                                        },
                                        cancel: {
                                            text: "Don't Delete",
                                            btnClass: 'btn btn-default btn-xs'
                                        }
                                    }
                                });
                            });

                            button.attr('initialized', 'true')
                        }
                    });

                    initialize_common_js();
                }
            });

            table.attr('initialized', 'true');
        } else {
            table.DataTable().draw('page');
        }
    });
});

$('a[href="#project_attachments"]').on('shown.bs.tab', function (e) {
    $('#project_attachment_list').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "attachments/project_attachments_list/",
                    type: 'POST',
                    data: {
                        project_id: table.attr('project_id')
                    }
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching attachments found</div>",
                    "emptyTable": "<div class='alert alert-info'>No attachments found</div>"

                },
                "drawCallback": function () {

                    $('.project_attach').each(function () {
                        var button = $(this);
                        var button = $(this);
                        var modal = button.closest('.modal');
                        if (button.attr('active') != 'true') {
                            button.click(function () {
                                start_spinner();
                                var form = $(this).closest('form')[0];

                                if (window.FormData) {
                                    formdata = new FormData(form);

                                    if (formdata) {

                                        $.ajax({
                                            url: base_url + 'attachments/save_project_attachment/',
                                            type: "POST",
                                            timeout: 250000,
                                            cache: false,
                                            data: formdata,
                                            processData: false,
                                            contentType: false,
                                            success: function (data) {
                                                modal.find('button').removeAttr('disabled');
                                                form.reset();
                                                modal.modal('hide');
                                                table.DataTable().draw('page');
                                                modal.find('.artificial_row').remove();
                                            },
                                            complete: function () {
                                                stop_spinner();
                                            }
                                        });

                                    }
                                }
                            });
                            button.attr('active', 'true');
                        }
                    });

                    table.find('.delete_attachment').each(function () {
                        delete_attachment($(this), 'project_attachment');
                    });

                }
            });
            table.attr('initialized', 'true');
        } else {
            table.DataTable().draw('page');
        }
    });
});

$('a[href="#project_reports"]').on('shown.bs.tab', function (e) {
    $('#generate_project_report').off('click').on('click', function () {
        var box = $(this).closest('.box');
        var form = $(this).closest('form');
        var from = form.find('input[name="from"]').val();
        var to = form.find('input[name="to"]').val();
        var project_id = form.find('input[name="project_id"]').val();
        var report_type = form.find('select[name="report_type"]').val();
        start_spinner();
        if (report_type == 'cash_flow') {

            $.post(
                base_url + "projects/project_cash_flow",
                {
                    project_id: project_id,
                    from: from,
                    to: to
                }, function (data) {
                    Highcharts.setOptions({
                        lang: {
                            decimalPoint: '.',
                            thousandsSep: ', '
                        }
                    });

                    Highcharts.chart('project_report_container', {
                        chart: {
                            type: 'spline'
                        },
                        title: {
                            text: 'Cash Flow Projection'
                        },
                        subtitle: {
                            text: 'Source:'
                        },
                        xAxis: {
                            categories: data.x_values
                        },
                        yAxis: {
                            title: {
                                text: 'Activities'
                            },
                            labels: {
                                formatter: function () {
                                    return this.value + '';
                                }
                            }
                        },
                        tooltip: {
                            crosshairs: true,
                            shared: true
                        },
                        plotOptions: {
                            spline: {
                                marker: {
                                    radius: 4,
                                    lineColor: '#666666',
                                    lineWidth: 1
                                }
                            }
                        },
                        series: [{
                            name: 'Costs',
                            marker: {
                                symbol: 'circle'
                            },
                            data: data.costs
                        }]
                    });
                    stop_spinner();
                },

                'json'
            )

        } else if (report_type == 'projects_inventory_position') {

            if (from != '' && to != '') {
                start_spinner();
                $.post(
                    base_url + "reports/project_inventory_position",
                    {
                        project_id: project_id,
                        from: from,
                        to: to
                    }, function (data) {
                        box.find('#project_report_container').html(data.table_view);
                        stop_spinner();

                        Highcharts.setOptions({
                            lang: {
                                decimalPoint: '.',
                                thousandsSep: ', '
                            }
                        });

                        $('#chart_container').highcharts({
                            exporting: {
                                chartOptions: { // specific options for the exported image
                                    plotOptions: {
                                        series: {
                                            dataLabels: {
                                                enabled: true
                                            }
                                        }
                                    }
                                },
                                fallbackToExportServer: false
                            },
                            chart: {
                                type: 'column'
                            },
                            title: {
                                text: data.project_name
                            },
                            subtitle: {
                                text: data.report_category + ' FROM ' + data.from + ' TO ' + data.to
                            },
                            xAxis: {
                                type: 'category'
                            },
                            yAxis: {
                                title: {
                                    text: 'Amount'
                                }

                            },
                            legend: {
                                enabled: false
                            },
                            plotOptions: {
                                series: {
                                    borderWidth: 0,
                                    dataLabels: {
                                        enabled: true,
                                        format: '{point.y:,.1f}'
                                    }
                                }
                            },

                            tooltip: {
                                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                                pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:,.2f}</b><br/>'
                            },

                            series: [{
                                name: 'General Summary',
                                colorByPoint: true,
                                data: [{
                                    name: 'Budgeted',
                                    y: parseFloat(data.goods_budget),
                                    drilldown: 'Budgeted'
                                }, {
                                    name: 'Approved Requests',
                                    y: parseFloat(data.total_approved_amount),
                                    drilldown: 'Goods Requested'
                                }, {
                                    name: 'Goods Ordered',
                                    y: parseFloat(data.order_amount),
                                    drilldown: 'Goods Ordered'
                                }, {
                                    name: 'Goods Received',
                                    y: parseFloat(data.ordered_received_value),
                                    drilldown: 'Goods Received'
                                }, {
                                    name: 'Site Goods Received',
                                    y: parseFloat(data.site_goods_received_value),
                                    drilldown: 'Site Goods Received'
                                }, {
                                    name: 'Material Used',
                                    y: parseFloat(data.material_used_value),
                                    drilldown: 'Material Used'
                                }, {
                                    name: 'Site Material Balance',
                                    y: parseFloat(data.site_material_balance_value),
                                    drilldown: null
                                }]
                            }],
                            drilldown: {
                                series: [{
                                    name: 'Budgeted',
                                    id: 'Budgeted',
                                    data: data.budget_activities
                                }, {
                                    name: 'Goods Requested',
                                    id: 'Goods Requested',
                                    data: data.requisitions
                                }, {
                                    name: 'Goods Ordered',
                                    id: 'Goods Ordered',
                                    data: [
                                        {
                                            name: 'Supplier Sourced',
                                            y: parseFloat(data.ordered_goods.supplier_sourced_amount),
                                            drilldown: 'Supplier Sourced Orders'
                                        }, {
                                            name: 'Store Sourced',
                                            y: parseFloat(data.ordered_goods.store_sourced_amount),
                                            drilldown: 'Store Sourced Orders'
                                        }
                                    ]
                                }, {
                                    name: 'Goods Received',
                                    id: 'Goods Received',
                                    data: [
                                        {
                                            name: 'Supplier Sourced',
                                            y: data.received_materials.supplier_sourced_amount,
                                            drilldown: 'Supplier Sourced GRNs'
                                        }, {
                                            name: 'Store Sourced',
                                            y: data.received_materials.store_sourced_amount,
                                            drilldown: 'Store Sourced Materials'
                                        }
                                    ]
                                }, {
                                    name: 'Site Goods Received',
                                    id: 'Site Goods Received',
                                    data: data.site_grns
                                }, {
                                    name: 'Material Used',
                                    id: 'Material Used',
                                    data: data.cost_activities
                                }, {
                                    name: 'Supplier Sourced Orders',
                                    id: 'Supplier Sourced Orders',
                                    data: data.ordered_goods.purchase_orders
                                }, {
                                    name: 'Store Sourced Orders',
                                    id: 'Store Sourced Orders',
                                    data: data.ordered_goods.transfer_orders
                                }, {
                                    name: 'Supplier Sourced GRNs',
                                    id: 'Supplier Sourced GRNs',
                                    data: data.received_materials.orders_grns
                                }, {
                                    name: 'Store Sourced Materials',
                                    id: 'Store Sourced Materials',
                                    data: data.received_materials.mcas
                                }]
                            }
                        });
                    }, 'json'
                );

            } else {
                toast('error', 'Please Make sure all parameters are filled correctly');
            }

        } else {
            $.post(
                base_url + "projects/reports",
                {
                    report_type: report_type,
                    project_id: form.find('input[name="project_id"]').val(),
                    from: form.find('input[name="from"]').val(),
                    to: form.find('input[name="to"]').val()

                }, function (data) {
                    $('#project_report_container').html(data);
                }
            ).complete(function () {
                stop_spinner();
            });
        }
    });
});

$('a[href="#project_contract_reviews"]').on('shown.bs.tab', function (e) {
    $('#revision_list').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                'processing': true,
                'serverSide': true,
                'order': [[0, "ASC"]],
                'ajax': {
                    "url": base_url + "projects/project_revision_list/" + table.attr('project_id'),
                    "type": "POST"
                },
                'columns': [
                    { "orderable": true },
                    { "orderable": false },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                'language': {
                    'zeroRecords': "<div class='alert alert-info'>No matching records found</div>",
                    'emptyTable': "<div class='alert alert-info'>No records found</div>"
                },
                'drawCallback': function () {
                    table.find('td:last-child').attr('nowrap', 'nowrap');

                    $('.revision_form').each(function () {
                        var modal = $(this);
                        if (modal.attr('initialized') != 'true') {
                            modal.on('show.bs.modal', function (e) {
                                var table = modal.find('table');
                                var row = table.find('tbody tr');
                                initialize_form_amount_calculator(row, 2);
                                row.find('select').select2({ width: '80px' });

                                modal.find('.revision_row_adder').each(function () {
                                    if ($(this).attr('initialized') != 'true') {
                                        $(this).click(function () {
                                            var tbody = $(this).closest('.row').find('tbody');
                                            var new_row = tbody.closest('table').find('.revision_row_template').clone().removeAttr('style')
                                                .removeClass('revision_row_template').addClass('artificial_row').appendTo(tbody);

                                            new_row.find('.row_remover').click(function () {
                                                $(this).closest('tr').remove();
                                            });

                                            initialize_form_amount_calculator(new_row, 2);

                                            new_row.find('.number_format').priceFormat();
                                            new_row.find('select').select2({ width: '340px' });

                                            initialize_common_js();
                                        });
                                        $(this).attr('initialized', 'true');
                                    }
                                });

                                modal.find('.extension_row_adder').each(function () {
                                    if ($(this).attr('initialized') != 'true') {
                                        $(this).click(function () {
                                            var tbody = $(this).closest('.row').find('tbody');
                                            var new_row = tbody.closest('table').find('.extension_row_template').clone().removeAttr('style')
                                                .removeClass('extension_row_template').addClass('artificial_row').appendTo(tbody);

                                            new_row.find('.row_remover').click(function () {
                                                $(this).closest('tr').remove();
                                            });

                                            initialize_form_amount_calculator(new_row, 2);

                                            new_row.find('.number_format').priceFormat();
                                            new_row.find('select').select2({ width: '80px' });

                                            initialize_common_js();
                                        });
                                        $(this).attr('initialized', 'true');
                                    }
                                });

                                modal.find('.row_remover').click(function () {
                                    $(this).closest('tr').remove();
                                });
                            });
                            modal.attr('initialized', 'true')
                        }
                    });

                    $('.submit_revision').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                var button = $(this);
                                var modal = button.closest('.modal');
                                var tbody = modal.find('.parent_table_tbody');

                                var task_ids = new Array();
                                var quantities = new Array();
                                var rates = new Array();
                                var duration_types = new Array();
                                var plus_or_minus_durations = new Array();
                                var duration_variations = new Array();
                                var contract_sum_variations = new Array();
                                var plus_or_minus_contract_sums = new Array();
                                var reasons_or_task_ids = new Array();
                                var item_types = new Array();
                                var i = 0;
                                var error = 0;

                                tbody.find('input[name="item_type"]').each(function () {
                                    var item_type = $(this).val();
                                    var row = $(this).closest('tr');
                                    if (item_type == "project_extension") {
                                        row.find('textarea[name="reason"]').each(function () {
                                            var reason = $(this).val();
                                            reasons_or_task_ids[i] = reason;
                                            var infos_row = row.find('.duration_variation_input').closest('tr');
                                            var duration_type = infos_row.find('select[name="duration_type"]').val();
                                            var plus_or_minus_duration = infos_row.find('select[name="plus_or_minus_duration"]').val();
                                            var duration_variation = infos_row.find('input[name="duration_variation"]').val();
                                            var contract_sum_variation = infos_row.find('input[name="contract_sum_variation"]').unmask();
                                            var plus_or_minus_contract_sum = infos_row.find('select[name="plus_or_minus_contract_sum"]').val();

                                            if (plus_or_minus_contract_sum != '' && contract_sum_variation != '' && duration_variation != '' && plus_or_minus_duration != '' && duration_type != '') {
                                                duration_types[i] = duration_type;
                                                plus_or_minus_durations[i] = plus_or_minus_duration;
                                                duration_variations[i] = duration_variation;
                                                contract_sum_variations[i] = contract_sum_variation;
                                                plus_or_minus_contract_sums[i] = plus_or_minus_contract_sum;
                                                quantities[i] = '';
                                                item_types[i] = item_type;
                                                rates[i] = '';
                                            } else {
                                                error++;
                                            }
                                        });

                                    } else {

                                        row.find('select[name="task_id"]').each(function () {
                                            var task_id = $(this).val();
                                            reasons_or_task_ids[i] = task_id;
                                            var task_infos_row = row.find('.revised_task_quantity').closest('tr');
                                            var quantity = task_infos_row.find('input[name="quantity"]').val();
                                            var rate = task_infos_row.find('input[name="rate"]').unmask();
                                            duration_types[i] = '';
                                            plus_or_minus_durations[i] = '';
                                            duration_variations[i] = '';
                                            contract_sum_variations[i] = '';
                                            plus_or_minus_contract_sums[i] = '';
                                            if (reasons_or_task_ids.length > 0 && quantity != '' && rate != '') {
                                                quantities[i] = quantity;
                                                rates[i] = rate;
                                                item_types[i] = item_type;
                                            } else {
                                                error++;
                                            }
                                        });
                                    }
                                    i++
                                });

                                var project_id = modal.find('input[name="project_id"]').val();
                                var revision_id = modal.find('input[name="revision_id"]').val();
                                var project_contract_review_id = modal.find('input[name="project_contract_review_id"]').val();
                                var revision_date = modal.find('input[name="revision_date"]').val();
                                var comments = modal.find('textarea[name="comments"]').val();

                                if (revision_date != '' && reasons_or_task_ids.length > 0 && error == 0) {
                                    modal.modal('hide');
                                    start_spinner();
                                    $.post(
                                        base_url + "projects/save_revision",
                                        {

                                            reasons_or_task_ids: reasons_or_task_ids,
                                            quantities: quantities,
                                            rates: rates,

                                            plus_or_minus_durations: plus_or_minus_durations,
                                            plus_or_minus_contract_sums: plus_or_minus_contract_sums,
                                            duration_types: duration_types,
                                            duration_variations: duration_variations,
                                            contract_sum_variations: contract_sum_variations,

                                            revision_id: revision_id,
                                            project_contract_review_id: project_contract_review_id,
                                            revision_date: revision_date,
                                            project_id: project_id,
                                            item_types: item_types,
                                            comments: comments

                                        }, function (data) {
                                            stop_spinner();
                                            modal.find('form')[0].reset();
                                            $('#revision_list').DataTable().draw('page');
                                        }
                                    ).complete();
                                }
                            });
                            button.attr('initialized', 'true');
                        }
                    });

                    $('.delete_project_revision').each(function () {
                        var button = $(this);

                        button.click(function () {
                            $.confirm({
                                title: 'Delete Project Revision',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger btn-xs',
                                        action: function () {
                                            $.post(
                                                base_url + "projects/delete_project_revision",
                                                {
                                                    project_revision_id: button.attr('project_revision_id')
                                                }
                                            ).complete(function () {
                                                $('#revision_list').DataTable().draw('page');
                                            });
                                        }
                                    },
                                    cancel: {
                                        text: "Cancel",
                                        btnClass: 'btn btn-default btn-xs'
                                    }
                                }
                            });
                        })
                    });

                    initialize_common_js();
                }
            });
            table.attr('initialized', 'true')
        } else {
            table.DataTable().draw('page');
        }
    });
});

$('a[href="#project_finance"]').on('shown.bs.tab', function (e) {
    //draw_payments_table($('.payments_table'));
    $('a[href="#project_payments"]').on('shown.bs.tab', function (e) {
        //draw_payments_table($('.payments_table'));
    });
});

$('a[href="#project_wall_posts"]').on('shown.bs.tab', function (e) {
    var tab_container = $('.tab_container');
    var load_present_posts = function () {
        if (tab_container.attr('initialized') != 'true') {
            var project_id = tab_container.find('input[name="project_id"]').val();
            var container_box = tab_container.find('#post_container');
            start_spinner();
            $.post(
                base_url + 'timeline/load_present_posts',
                {
                    project_id: project_id,
                }, function (data) {
                    container_box.html(data.public_posts_view);
                    initialize_common_js();

                    $('.comment_post').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                var form = button.closest('form');
                                var topic_id = button.attr('topic_id');
                                var topic_message = form.find('input[name="comment_message"]').val();
                                var project_id = button.attr('project_id');
                                var container_box = form.closest('.row').find('#post_container');
                                var convo_type = 'COMMENT';
                                start_spinner();

                                if (topic_id != '' && topic_message != '') {
                                    $.post(
                                        base_url + 'timeline/submit_post_o_chat',
                                        {
                                            topic_id: topic_id,
                                            project_id: project_id,
                                            topic_message: topic_message,
                                            convo_type: convo_type
                                        }, function (data) {
                                            load_present_posts();
                                        }
                                    ).complete(function () {
                                        stop_spinner();
                                        form[0].reset();
                                    });
                                } else {
                                    toast('error', 'Please type a comment!');
                                }
                            });
                        }
                    });

                }, 'json'
            ).complete(function () {
                stop_spinner();
            });
        }
    };
    load_present_posts();

    $('#send_public_post').each(function () {
        var button = $(this);
        if (button.attr('initialized') != 'true') {
            button.click(function () {
                var form = button.closest('form');
                var subject_id = form.find('select[name="subject_id"]').val();
                var project_id = form.find('input[name="project_id"]').val();
                var topic_message = form.find('textarea[name="topic_message"]').val();
                var container_box = form.closest('.row').find('#post_container');

                if (subject_id != '' && topic_message != '') {
                    var captured_attachment = form.find('input[name="topic_attachment"]')[0];
                    var file = captured_attachment.files[0], form_data = false;

                    if (window.FormData) {
                        form_data = new FormData();
                        if (form_data) {
                            form_data.append("file", file);
                            form_data.append("subject_id", subject_id);
                            form_data.append("project_id", project_id);
                            form_data.append("topic_message", topic_message);
                            form_data.append("convo_type", 'CAPTION');
                            form_data.append("type", 'PUBLIC');

                            $.ajax({
                                url: base_url + 'timeline/submit_post_o_chat/',
                                type: "POST",
                                timeout: 250000,
                                cache: false,
                                data: form_data,
                                dataType: "json",
                                processData: false,
                                contentType: false,
                                success: function (data) {
                                    container_box.html(data.public_posts_view);
                                    load_present_posts();
                                    form[0].reset();
                                }
                            });
                        }
                    }
                }
            });
            button.attr('initialized', 'true');
        }
    });

    $('#project_chat_rooms').each(function () {
        var table = $(this);
        var project_id = table.attr('project_id');
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                'processing': true,
                'serverSide': true,
                'order': [[0, "desc"]],
                'ajax': {
                    "url": base_url + "timeline/chat_rooms_list",
                    "type": "POST",
                    "data": function (e) {
                        e.project_id = project_id;
                    }
                },
                'columns': [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                'language': {
                    'zeroRecords': "<div class='alert alert-info'>No matching project found</div>",
                    'emptyTable': "<div class='alert alert-info'>No projects found</div>"
                },
                'drawCallback': function () {
                    table.find('td:last-child').attr('nowrap', 'nowrap');

                    $('.chat_form_continuation').each(function () {
                        var modal = $(this);
                        if (modal.attr('initialized') != 'true') {
                            modal.on('show.bs.modal', function () {
                                var topic_id = modal.find('input[name="topic_id"]').val();
                                var chat_box = modal.find('#chat-box');
                                start_spinner();
                                $.post(
                                    base_url + 'timeline/load_topic_chats',
                                    {
                                        topic_id: topic_id,
                                    }, function (data) {
                                        chat_box.html(data.chat_box_view);
                                        initialize_common_js();
                                    }, 'json'
                                ).complete(function () {
                                    stop_spinner();
                                })
                            });
                            modal.attr('initialized', 'true');
                        }
                    });

                    $('.send_direct_chat').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                var modal = button.closest('.modal');
                                var topic_id = modal.find('input[name="topic_id"]').val();
                                var recipient = topic_id != '' ? modal.find('input[name="recipient"]').val() : modal.find('select[name="recipient"]').val();
                                var subject_id = modal.find('select[name="subject_id"]').val();
                                var project_id = modal.find('input[name="project_id"]').val();
                                var direct_chat_ccs = modal.find('.direct_chat_ccs').val();
                                var topic_message = modal.find('input[name="topic_message"]').val();
                                var chat_box = modal.find('#chat-box');
                                var type = 'DIRECT';
                                start_spinner();

                                if (subject_id != '' && recipient != '') {
                                    $.post(
                                        base_url + 'timeline/submit_post_o_chat',
                                        {
                                            recipient: recipient,
                                            subject_id: subject_id,
                                            project_id: project_id,
                                            topic_id: topic_id,
                                            topic_message: topic_message,
                                            type: type,
                                            convo_type: 'REPLY',
                                            direct_chat_ccs: direct_chat_ccs
                                        }, function (data) {
                                            modal.find('.display_main_recipient').html(data.main_recipient);
                                            modal.find('.input_container').hide();
                                            chat_box.html(data.chat_box_view);
                                            if (topic_id == '') {
                                                $('#project_chat_rooms').DataTable().draw('page');
                                            }
                                            initialize_common_js();
                                        }, 'json'
                                    ).complete(function () {
                                        stop_spinner();
                                        modal.find('form')[0].reset();
                                    });
                                }
                            });
                            button.attr('initialized', 'true');
                        }
                    });

                    initialize_common_js();
                }
            });
            table.attr('initialized', 'true')
        } else {
            table.DataTable().draw('page');
        }
    });

    initialize_common_js();
});

$('a[href="#completed_projects_tab"]').on('shown.bs.tab', function (e) {
    $('#completed_projects_list').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                'processing': true,
                'serverSide': true,
                'order': [[0, "desc"]],
                'ajax': {
                    "url": base_url + "projects/completed_projects_list",
                    "type": "POST"
                },
                'columns': [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true }
                ],
                'language': {
                    'zeroRecords': "<div class='alert alert-info'>No matching project found</div>",
                    'emptyTable': "<div class='alert alert-info'>No projects found</div>"
                },
                'drawCallback': function () {

                    table.find('td:last-child').attr('nowrap', 'nowrap');

                    initialize_common_js();
                }
            });
            table.attr('initialized', 'true')
        } else {
            table.DataTable().draw('page');
        }
    });
});

$('#on_going_projects_options').change(function () {
    start_spinner();
    var on_going_projects_container = $('#on_going_projects_container');
    var project_id = $(this).val();
    $.post(
        base_url + "projects/selected_on_going_project/",
        {
            project_id: project_id
        }, function (data) {
            on_going_projects_container.html(data);
            stop_spinner();
        }
    );
});

$('#project_categories_list').DataTable({
    colReorder: true,
    "processing": true,
    "serverSide": true,
    "ajax": {
        url: base_url + "projects/project_categories_list/",
        type: 'POST'
    },
    "columns": [
        { "orderable": true },
        { "orderable": true },
        { "orderable": false }
    ],
    "language": {
        "zeroRecords": "<div class='alert alert-info'>No matching categories found</div>",
        "emptyTable": "<div class='alert alert-info'>No categories found</div>"
    }, "drawCallback": function () {
        //Save Category
        $('.save_project_category_button').each(function () {
            var button = $(this);
            if (button.attr('active') != 'true') {
                var modal = button.closest('.modal');
                var category_id = modal.find('input[name="category_id"]').val();

                button.click(function () {
                    var category_name = modal.find('input[name="category_name"]').val();

                    if (category_name != '') {
                        modal.modal('hide');
                        var description = modal.find('textarea[name="description"]').val();

                        $.post(
                            base_url + "projects/save_project_category",
                            {
                                category_id: category_id,
                                category_name: category_name,
                                description: description
                            }, function () {
                                modal.find('form')[0].reset();
                                $('#project_categories_list').DataTable().draw('page');
                            }
                        );
                    }
                });
                button.attr('active', 'true');
            }
        });

        //Delete Category
        $('.delete_project_category').each(function () {
            var button = $(this);
            var category_id = button.attr('category_id');
            if (button.attr('initialized') != 'true') {
                button.click(function () {
                    if (confirm('Are you sure?')) {
                        $.post(
                            base_url + "projects/delete_project_category/",
                            {
                                category_id: category_id
                            }
                        ).complete(function () {
                            $('#project_categories_list').DataTable().draw('page');
                        });
                    }
                });
            }
        });

        initialize_common_js();
    }
});

function upload_project_excel(button) {
    var form = button.closest('form');
    var file_field = form.find('input[name="activities_excel"]');
    var excel_type = button.attr('excel_type');
    var captured = file_field[0];
    var project_id = file_field.attr('project_id');
    var file = captured.files[0], form_data = false;
    var path = base_url;
    if (excel_type == 'activities') {
        path += 'projects/upload_activities_excel/'
    } else {
        path += 'budgets/upload_material_budget_excel/'
    }

    if (window.FormData) {
        button.attr('disabled', 'disabled');
        start_spinner();
        form_data = new FormData();
        if (form_data) {
            form_data.append("file", file);
            form_data.append("project_id", project_id);

            $.ajax({
                url: path,
                type: "POST",
                timeout: 250000,
                cache: false,
                data: form_data,
                processData: false,
                contentType: false,
                success: function (data) {
                    if (excel_type == 'activities') {
                        if (parseFloat(data) > 0) {
                            form.hide();
                            form.closest('.box-tools').find('.search_container').show();
                        }
                    }
                },
                complete: function () {
                    form[0].reset();
                    button.removeAttr('disabled');
                    stop_spinner();
                    if (excel_type == 'activities') {
                        load_project_activities();
                    } else {
                        form[0].reset();
                        var table = $(button).closest('.box').find('.material_budget_items');
                        table.DataTable().draw('page');
                        stop_spinner();
                    }
                }
            });
        }
    }
}

function load_project_activities() {
    start_spinner();
    var activities_container = $('#activities_container');
    var project_id = activities_container.attr('project_id');
    var keyword = $('#activity_keyword').val();
    $.post(
        base_url + "projects/project_activities_list/",
        {
            keyword: keyword,
            project_id: project_id
        }, function (data) {
            activities_container.html(data);
            //Initialize internal tabs
            var initialize_activity_tab_load = function () {
                $('.activity_summary_activator').on('shown.bs.tab', function (e) {
                    start_spinner();
                    var summary_container = $($(this).attr('href'));
                    var activity_id = summary_container.attr('activity_id');
                    var project_activity = $(this).attr('project_activity');

                    $.post(
                        base_url + "projects/activity_summary/",
                        {
                            project_activity: project_activity,
                            activity_id: activity_id
                        }, function (data) {
                            summary_container.html(data);
                            initialize_common_js();
                            stop_spinner();
                        }
                    );

                });

                $('.activity_tasks_activator').on('shown.bs.tab', function (e) {
                    var tasks_table = $(this).closest('.nav-tabs-custom').find('.activity_tasks_table');
                    var activity_id = tasks_table.attr('activity_id');
                    var level = "activity";
                    if (tasks_table.attr('dataTable_initialized') != 'true') {
                        tasks_table.DataTable({
                            order: [[1, "asc"]],
                            colReorder: true,
                            "processing": true,
                            "serverSide": true,
                            "ajax": {
                                url: base_url + "tasks/tasks_list/" + level,
                                type: 'POST',
                                data: function (d) {
                                    d.activity_id = activity_id
                                }
                            },
                            "columns": [
                                { "orderable": true },
                                { "orderable": true },
                                { "orderable": true },
                                { "orderable": false },
                                { "orderable": true },
                                { "orderable": true },
                                { "orderable": false },
                                { "orderable": false }
                            ],
                            "language": {
                                "zeroRecords": "<div class='alert alert-info'>No matching tasks found</div>",
                                "emptyTable": "<div class='alert alert-info'>No tasks found</div>"
                            }, "drawCallback": function () {

                                //Save Task
                                var save_task = function (button) {
                                    var modal = button.closest('.modal');
                                    var task_name = modal.find('input[name="task_name"]').val();
                                    if (task_name != '') {
                                        modal.modal('hide');
                                        var task_id = modal.find('input[name="task_id"]').val();
                                        var activity_id = modal.find('input[name="activity_id"]').val();
                                        var start_date = modal.find('input[name="start_date"]').val();
                                        var end_date = modal.find('input[name="end_date"]').val();
                                        var measurement_unit_id = modal.find('select[name="measurement_unit_id"]').val();
                                        var quantity = modal.find('input[name="quantity"]').val();
                                        var rate = modal.find('input[name="rate"]').unmask();
                                        var description = modal.find('textarea[name="description"]').val();

                                        $.post(
                                            base_url + "tasks/save_task/",
                                            {
                                                task_id: task_id,
                                                activity_id: activity_id,
                                                task_name: task_name,
                                                start_date: start_date,
                                                end_date: end_date,
                                                measurement_unit_id: measurement_unit_id,
                                                quantity: quantity,
                                                rate: rate,
                                                description: description
                                            }, function () {
                                                modal.find('form')[0].reset();
                                                button.closest('.nav-tabs-custom').find('.activity_tasks_table').DataTable().draw('page');
                                            }
                                        );
                                    }
                                };

                                $('.save_task').each(function () {
                                    var button = $(this);
                                    if (button.attr('active') != 'true') {
                                        button.click(function () {
                                            save_task(button);
                                        });
                                        button.attr('active', 'true');
                                    }
                                });

                                //Task tab Actions
                                var initialize_tasks_tab_actions = function () {

                                    $('.task_summary_activator').each(function () {
                                        if ($(this).attr('initialized') != 'true') {
                                            $(this).on('shown.bs.tab', function (e) {
                                                start_spinner();
                                                var task_id = $(this).attr('task_id');
                                                var container = $($(this).attr('href'));
                                                $.post(
                                                    base_url + "tasks/load_task_summary",
                                                    {
                                                        task_id: task_id
                                                    }, function (data) {
                                                        container.html(data);
                                                    }
                                                ).complete(function () {
                                                    stop_spinner();
                                                });
                                            });
                                            $(this).attr('initialized', 'true');
                                        }
                                    });
                                    initialize_common_js();
                                };

                                //Delete Task
                                $('.delete_task').each(function () {
                                    var button = $(this);
                                    if (button.attr('initialized') != 'true') {
                                        button.click(function () {
                                            var task_id = button.attr('task_id');
                                            if (confirm('Are you sure?')) {
                                                $.post(
                                                    base_url + "tasks/delete_task",
                                                    {
                                                        task_id: task_id
                                                    }
                                                ).complete(function () {
                                                    button.closest('.activity_tasks_table').DataTable().draw('page');
                                                });
                                            }
                                        });
                                        button.attr('initialized', 'true');
                                    }
                                });

                                initialize_tasks_tab_actions();
                                tasks_table.find('tr').each(function () {
                                    $(this).find('td:last-child').attr('nowrap', 'nowrap');
                                    initialize_task_progress_loader();
                                });
                            }
                        });
                        tasks_table.attr('dataTable_initialized', 'true');
                    } else {
                        tasks_table.DataTable().draw('page');
                    }
                });

                initialize_common_js();
            };

            initialize_activity_tab_load();

            //Save Activity
            var save_activity = function (button) {
                var modal = button.closest('.modal');
                var activity_name = modal.find('input[name="activity_name"]').val();
                if (activity_name != '') {
                    start_spinner();
                    modal.modal('hide');
                    var project_id = modal.find('input[name="project_id"]').val();
                    var activity_id = modal.find('input[name="activity_id"]').val();
                    var activity_name = modal.find('input[name="activity_name"]').val();
                    var weight_percentage = modal.find('input[name="weight_percentage"]').val();
                    var description = modal.find('textarea[name="description"]').val();

                    $.post(
                        base_url + "projects/save_activity/",
                        {
                            activity_id: activity_id,
                            project_id: project_id,
                            activity_name: activity_name,
                            weight_percentage: weight_percentage,
                            description: description
                        }, function () {
                            modal.find('form')[0].reset();
                            setTimeout(load_project_activities, 500)
                        }
                    ).complete(function () {
                        stop_spinner();
                    });
                }
            };

            $('.save_activity').each(function () {
                var button = $(this);
                if (button.attr('active') != 'true') {
                    button.click(function () {
                        save_activity(button);
                    });
                    button.attr('active', 'true');
                }
            });

            //Delete Activity
            $('.delete_activity').each(function () {
                var button = $(this);
                if (button.attr('initialized') != 'true') {
                    var activity_id = button.attr('activity_id');
                    button.click(function () {
                        if (confirm('Are you sure?')) {
                            $.post(
                                base_url + "projects/delete_activity",
                                {
                                    activity_id: activity_id
                                }
                            ).complete(function () {
                                load_project_activities();
                            });
                        }
                    });
                    button.attr('initialized', 'true');
                }
            });

            initialize_common_js();
            stop_spinner();
        }
    );
}

/***************************************************
 * TASKS
 ***************************************************/

function save_task_progress_update(button) {
    var modal = button.closest('.modal');
    var task_id = modal.find('input[name="task_id"]').val();
    var update_id = modal.find('input[name="progress_update_id"]').val();
    var description = modal.find('textarea[name="description"]').val();
    var percentage = modal.find('input[name="percentage"]').val();
    var datetime = modal.find('input[name="datetime"]').val();
    if (task_id != '' && percentage != '' && datetime != '') {
        modal.modal('hide');

        $.post(
            base_url + "tasks/save_task_progress/",
            {
                update_id: update_id,
                task_id: task_id,
                datetime: datetime,
                description: description,
                percentage: percentage
            }, function (data) {
                modal.find('form')[0].reset();
                var graph_container = modal.closest('.box').find('.task_progress_graphical_container');
                var list_container = modal.closest('.box').find('.task_progress_list');
                load_task_progress_graph(graph_container);
                load_task_progress_list(list_container);
            }
        );
    }
}

function delete_task_progress_update(button) {
    if (confirm('Are you sure?')) {
        var update_id = button.attr('update_id');
        $.post(
            base_url + "tasks/delete_task_progress_update",
            {
                update_id: update_id
            }, function (data) {
                button.closest('table').DataTable().draw('page');
            }
        ).complete();
    }
}

function initialize_task_progress_loader() {

    $('.task_progress_activator').on('shown.bs.tab', function (e) {

        var progress_tab = $($(this).attr('href'));

        if ($(this).attr('initialized') != 'true') {
            progress_tab.find('.task_progress_graphical_container').each(function () {
                load_task_progress_graph($(this));
            });
            $(this).attr('initialized', 'true');
        }

        progress_tab.find('.task_progress_graphical_activator').each(function () {
            if ($(this).attr('initialized') != 'true') {
                $(this).on('shown.bs.tab', function (e) {
                    load_task_progress_graph($($(this).attr('href')));
                });
                $(this).attr('initialized', 'true');
            }
        });

        progress_tab.find('.task_progress_list_activator').each(function () {
            if ($(this).attr('initialized') != 'true') {
                $(this).on('shown.bs.tab', function (e) {
                    load_task_progress_list($($(this).attr('href')).find('.task_progress_list'));
                });
                $(this).attr('initialized', 'true');
            }
        });
    });
}

function load_task_progress_graph(graph_container) {
    start_spinner();
    var task_id = graph_container.attr('task_id');
    $.post(
        base_url + "tasks/task_progress_graph_values",
        {
            task_id: task_id
        }, function (data) {
            stop_spinner();
            graph_container.highcharts({
                chart: {
                    type: 'spline'
                },
                title: {
                    text: 'Task Progress'
                },
                subtitle: {
                    text: ''
                },
                xAxis: {
                    type: 'datetime',
                    dateTimeLabelFormats: { // don't display the dummy year
                        month: '%e. %b',
                        year: '%b'
                    },
                    title: {
                        text: 'Date'
                    }
                },
                yAxis: {
                    title: {
                        text: 'Percentage(%)'
                    },
                    min: 0,
                    max: 100
                },
                tooltip: {
                    headerFormat: '<b>{series.name}</b><br>',
                    pointFormat: '{point.x:%e. %b}: {point.y:.1f} %'
                },

                plotOptions: {
                    spline: {
                        marker: {
                            enabled: true
                        }
                    }
                },

                series: [{
                    name: 'PROGRESS SPLINE',
                    // Define the data points. All series have a dummy year
                    // of 1970/71 in order to be compared on the same x axis. Note
                    // that in JavaScript, months start at 0 for January, 1 for February etc.
                    data: data.data
                }]
            });
        },
        'JSON'
    );
}

function load_task_progress_list(list_table) {
    var task_id = list_table.attr('task_id');
    if (list_table.attr('initialized') != 'true') {
        list_table.DataTable({
            "order": [[0, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "tasks/task_progress_updates_list/" + task_id,
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching progress updates found</div>",
                "emptyTable": "<div class='alert alert-info'>No progress updates found</div>"
            }, "drawCallback": function () {
                $('.delete_task_progress_update').click(function () {
                    delete_task_progress_update($(this));
                });
                initialize_common_js();
            }
        });
        list_table.attr('initialized', 'true');
    } else {
        list_table.DataTable().draw('page');
    }
}

/***************************************************
 * INVENTORY
 ***************************************************/

$('#locations_list').DataTable({
    colReorder: true,
    "processing": true,
    "serverSide": true,
    "ajax": {
        url: base_url + "inventory/locations/",
        type: 'POST'
    },
    "columns": [
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": false }
    ],
    "language": {
        "zeroRecords": "<div class='alert alert-info'>No matching locations found</div>",
        "emptyTable": "<div class='alert alert-info'>No locations found</div>"
    }, "drawCallback": function () {
        $('#locations_list .delete_location_button').click(function () {
            delete_location($(this));
        });
    }
});

function delete_location(button) {
    if (confirm('Are you sure?')) {
        var location_id = button.attr('location_id');
        $.post(
            base_url + "inventory/delete_location",
            {
                location_id: location_id
            }, function () {
                $('#locations_list').DataTable().draw('page');
            }
        );
    }
}

function load_location_sub_locations() {
    start_spinner();
    var sub_locations_container = $('#sub_locations_container');
    var location_id = sub_locations_container.attr('location_id');
    var keyword = $('#sub_location_keyword').val();
    $.post(
        base_url + "inventory/sub_locations_list/",
        {
            keyword: keyword,
            location_id: location_id
        }, function (data) {
            sub_locations_container.html(data);

            sub_locations_container.find('.collapsed-box').each(function () {
                var sub_location_box = $(this);

                sub_location_box.click(function () {
                    if (sub_location_box.attr('initialized') != 'true') {

                        sub_location_box.find('.sub_location_material_stock').each(function () {
                            var table = $(this);
                            if (table.attr('datatable_initialized') != 'true') {
                                var sub_location_id = table.attr('sub_location_id');
                                table.DataTable({
                                    "order": [[1, "asc"]],
                                    colReorder: true,
                                    "processing": true,
                                    "serverSide": true,
                                    "ajax": {
                                        url: base_url + "inventory/sub_location_material_stock/" + sub_location_id,
                                        type: 'POST'
                                    },
                                    "columns": [
                                        { "orderable": false },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": false }
                                    ],
                                    "language": {
                                        "zeroRecords": "<div class='alert alert-info'>No matching items found</div>",
                                        "emptyTable": "<div class='alert alert-info'>No items found</div>"
                                    }, "drawCallback": function () {
                                        $(this).find('tr').each(function () {
                                            $(this).find('td:last-child').attr('nowrap', 'nowrap');
                                        });

                                        $('.sub_location_tools_and_equipment_stock_activator').each(function () {
                                            var tab = $(this);
                                            var tab_container = $($(this).attr('href'));
                                            if (tab.attr('initialized') != 'true') {
                                                tab.on('shown.bs.tab', function (e) {
                                                    tab_container.find('.new_asset_registration .row_adder').each(function () {
                                                        var row_adder = $(this);
                                                        if (row_adder.attr('initialized') != 'true') {
                                                            var table = $(this).closest('table');
                                                            var tbody = table.find('tbody');
                                                            row_adder.click(function () {
                                                                var new_row = table.find('.row_template').clone().removeAttr('style')
                                                                    .removeClass('row_template').addClass('artificial_row').appendTo(tbody);
                                                                new_row.find('select').select2();
                                                                new_row.find('.row_remover').click(function () {
                                                                    $(this).closest('tr').remove();
                                                                });
                                                                initialize_common_js();
                                                            });
                                                            row_adder.attr('initialized', 'true');
                                                        }
                                                    });

                                                    tab_container.find('.sub_location_assets').each(function () {
                                                        var table = $(this);
                                                        if (table.attr('initialized') != 'true') {
                                                            table.DataTable({
                                                                'order': [[2, "asc"]],
                                                                'processing': true,
                                                                'serverSide': true,
                                                                'ajax': {
                                                                    url: base_url + "Assets/location_assets_datatable/sub_location/" + table.attr('sub_location_id'),
                                                                    type: 'POST'
                                                                },
                                                                'columns': [
                                                                    { 'orderable': true },
                                                                    { 'orderable': true },
                                                                    { 'orderable': true },
                                                                    { 'orderable': true },
                                                                    { 'orderable': false }
                                                                ],
                                                                'language': {
                                                                    "zeroRecords": "<div class='alert alert-info'>No matching assets found</div>",
                                                                    "emptyTable": "<div class='alert alert-info'>No assets found</div>"
                                                                },
                                                                'drawCallback': function () {

                                                                    table.find('.save_edit_asset').each(function () {
                                                                        save_asset_edit($(this));
                                                                    });

                                                                    tab_container.find('.save_assets_registrations').each(function () {
                                                                        var button = $(this);
                                                                        if (button.attr('initialized') != 'true') {
                                                                            button.click(function () {
                                                                                var modal = button.closest('.modal');
                                                                                var sub_location_id = modal.find('input[name="sub_location_id"]').val();
                                                                                var tbody = modal.find('tbody');
                                                                                var registration_dates = new Array(), asset_item_ids = Array(), book_values = Array(),
                                                                                    salvage_values = Array(), descriptions = Array(), asset_codes = Array(), statuses = Array(), ownerships = Array(), i = 0;

                                                                                tbody.find(' input[name="registration_date"]').each(function () {
                                                                                    var row = $(this).closest('tr');
                                                                                    var registration_date = $(this).val().trim();
                                                                                    var asset_item_id = row.find('select[name="asset_item_id"]').val().trim();
                                                                                    var ownership = row.find('input[name="ownership"]').val();
                                                                                    if (registration_date != '' && asset_item_id != '' && ownership != '') {
                                                                                        registration_dates[i] = registration_date;
                                                                                        asset_codes[i] = row.find('input[name="asset_code"]').val();;
                                                                                        asset_item_ids[i] = asset_item_id;
                                                                                        book_values[i] = row.find('input[name="book_value"]').unmask();
                                                                                        salvage_values[i] = row.find('input[name="salvage_value"]').unmask();
                                                                                        descriptions[i] = row.find('textarea[name="description"]').val().trim();
                                                                                        ownerships[i] = ownership,
                                                                                            statuses[i] = row.find('select[name="status"]').val();
                                                                                        i++;
                                                                                    }
                                                                                });

                                                                                if (registration_dates.length > 0) {
                                                                                    start_spinner();
                                                                                    $.post(
                                                                                        base_url + "assets/save_asset_registrations",
                                                                                        {
                                                                                            asset_item_ids: asset_item_ids,
                                                                                            sub_location_id: sub_location_id,
                                                                                            asset_codes: asset_codes,
                                                                                            book_values: book_values,
                                                                                            salvage_values: salvage_values,
                                                                                            descriptions: descriptions,
                                                                                            registration_dates: registration_dates,
                                                                                            ownerships: ownerships,
                                                                                            sub_location_id: sub_location_id,
                                                                                            statuses: statuses
                                                                                        }, function (data) {
                                                                                            modal.modal('hide');
                                                                                            modal.find('.artificial_row').remove();
                                                                                            modal.find('form')[0].reset();
                                                                                            table.DataTable().draw('page');
                                                                                            stop_spinner();
                                                                                        }
                                                                                    );
                                                                                }

                                                                            });
                                                                            button.attr('initialized', 'true');
                                                                        }
                                                                    });

                                                                    save_asset_edit($(this));
                                                                    initialize_common_js();
                                                                }
                                                            });
                                                            table.attr('initialized', 'true');
                                                        } else {
                                                            table.DataTable().draw('page');
                                                        }

                                                    });

                                                });
                                                tab.attr('initialized', 'true');
                                            }



                                        });
                                        initialize_common_js();
                                    }
                                });
                                table.attr('datatable_initialized', true);
                            } else {
                                table.DataTable().draw('page');
                            }
                        });

                        sub_location_box.find('.sub_location_material_stock_activator').on('shown.bs.tab', function (e) {
                            $($(this).attr('href')).find('.sub_location_material_stock').DataTable().draw('page');
                        });

                        sub_location_box.attr('initialized', 'true');
                    }
                });
            });

            initialize_opening_stock_form();
            initialize_common_js();
            stop_spinner();
        }
    );
}

function save_sub_location(button) {
    var modal = button.closest(".modal");
    var sub_location_name = modal.find('input[name="sub_location_name"]').val();
    if (sub_location_name != "") {
        modal.modal("hide");
        var sub_location_id = modal.find('input[name="sub_location_id"]').val();
        var location_id = modal.find('input[name="location_id"]').val();
        var equipment_id = modal.find('select[name="equipment_id"]').val();
        var description = modal.find('textarea[name="description"]').val();

        $.post(
            base_url + "inventory/save_sub_location/",
            {
                sub_location_id: sub_location_id,
                location_id: location_id,
                equipment_id: equipment_id,
                sub_location_name: sub_location_name,
                description: description,
            },
            function () {
                modal.find("form")[0].reset();
                modal.find('select[name="equipment_id"]').val("").change();
                modal.find(".equipment-id-form-group").hide();
                load_location_sub_locations();
            }
        );
    }
}

function deactivate_sub_location(sub_location_id) {
    $.confirm({
        title: 'Deactivate this Sub Location',
        content: 'This action is irreversible! Are you sure?',
        buttons: {
            confirm: {
                text: 'Confirm Deactivation',
                btnClass: 'btn btn-danger btn-xs',
                action: function () {
                    $.post(
                        base_url + "inventory/deactivate_sub_location",
                        {
                            sub_location_id: sub_location_id
                        }, function () {
                            load_location_sub_locations();
                        }
                    );
                }
            },
            cancel: {
                text: "Cancel",
                btnClass: 'btn btn-default btn-xs'
            }
        }
    });
}

function delete_sub_location(sub_location_id) {
    if (confirm('Are you sure?')) {
        $.post(
            base_url + "inventory/delete_sub_location",
            {
                sub_location_id: sub_location_id
            }, function () {
                load_location_sub_locations();
            }
        );
    }
}

function load_material_unit(select_element, container_element) {
    var material_id = select_element.val();
    var display_portion = select_element.closest(container_element).find('.unit_display');
    if (material_id != '') {
        start_spinner();
        $.post(
            base_url + "inventory/load_material_unit",
            {
                material_id: material_id
            }, function (data) {
                display_portion.html(data);
            }
        ).complete(stop_spinner());
    } else {
        display_portion.html('');
    }
}

$('#material_items_list').DataTable({
    "order": [[1, "asc"]],
    colReorder: true,
    "processing": true,
    "serverSide": true,
    "ajax": {
        url: base_url + "inventory/material_items/",
        type: 'POST',
        'data': function (d) {
            d.category_id = $('#filter_by_category').val();
        }
    },
    "columns": [
        { "orderable": false },
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": false }
    ],
    "language": {
        "zeroRecords": "<div class='alert alert-info'>No matching items found</div>",
        "emptyTable": "<div class='alert alert-info'>No items found</div>"
    },
    "drawCallback": function () {
        //Make the last column with button not to break
        var table = $(this);
        table.find('tr').each(function () {
            $(this).find('td:last-child').attr('nowrap', 'nowrap');
        });

        $('.upload_material_registration_excel').each(function () {
            var button = $(this);
            if (button.attr('initialized') != 'true') {
                button.click(function () {
                    var form = button.closest('form');
                    var file_field = form.find('input[name="material_registration_excel"]');
                    var captured = file_field[0];
                    var project_id = file_field.attr('project_id');
                    var file = captured.files[0], form_data = false;
                    var path = base_url + 'inventory/upload_material_registration_excel/';
                    if (window.FormData) {
                        button.attr('disabled', 'disabled');
                        start_spinner();
                        form_data = new FormData();
                        if (form_data) {
                            form_data.append("file", file);
                            form_data.append("project_id", project_id);

                            $.ajax({
                                url: path,
                                type: "POST",
                                timeout: 250000,
                                cache: false,
                                data: form_data,
                                processData: false,
                                contentType: false,
                                success: function (data) {
                                    table.DataTable().draw('page');
                                },
                                complete: function () {
                                    button.removeAttr('disabled');
                                    form[0].reset();
                                    stop_spinner();
                                }
                            });
                        }
                    }
                });

                button.attr('initialized', 'true');
            }
        });

        //Activate nature filter
        $('#filter_by_nature').each(function () {
            var select_field = $(this);
            if (select_field.attr('initialized') != 'true') {
                select_field.change(function () {
                    start_spinner();
                    $.post(
                        base_url + "inventory/load_material_item_categories_options",
                        {
                            project_nature_id: select_field.val()
                        }, function (data) {
                            select_field.closest('form').find('#filter_by_category').html(data).trigger("change");
                            stop_spinner();
                        }
                    );
                });
                select_field.attr('initialized', 'true');
            }
        });

        //Activate category filter
        $('#filter_by_category').each(function () {
            var select_field = $(this);
            if (select_field.attr('initialized') != 'true') {
                select_field.change(function () {
                    $('#material_items_list').DataTable().draw();
                });
                select_field.attr('initialized', 'true');
            }
        });
        initialize_common_js();

        //Save Button
        var save_material_item = function (button) {
            var modal = button.closest('.modal');
            var item_name = modal.find('input[name="item_name"]').val();
            var unit_id = modal.find('select[name="unit_id"]').val();
            if (item_name != '' && unit_id != '') {
                modal.modal('hide');
                start_spinner();
                var category_id = modal.find('select[name="category_id"]').val();
                var item_id = modal.find('input[name="item_id"]').val();
                var part_number = modal.find('input[name="part_number"]').val();
                var description = modal.find('textarea[name="description"]').val();
                var captured = modal.find('input[name="image"]')[0];
                var file = captured.files[0], form_data = false;

                if (window.FormData) {
                    form_data = new FormData();
                    if (form_data) {
                        form_data.append("file", file);
                        form_data.append("item_id", item_id);
                        form_data.append("item_name", item_name);
                        form_data.append("part_number", part_number);
                        form_data.append("unit_id", unit_id);
                        form_data.append("category_id", category_id);
                        form_data.append("description", description);

                        $.ajax({
                            url: base_url + 'inventory/save_material_item/',
                            type: "POST",
                            timeout: 250000,
                            cache: false,
                            data: form_data,
                            processData: false,
                            contentType: false,
                            success: function () {
                                $('#material_items_list').DataTable().draw('page');
                                modal.find('form')[0].reset();
                                stop_spinner();
                            }
                        });
                    }
                }
            } else {
                display_form_fields_error();
            }
        };

        $('.save_material_item_button').each(function () {
            var button = $(this);
            if (button.attr('active') != 'true') {
                button.click(function () {
                    save_material_item(button);
                });
                button.attr('active', 'true');
            }
        });

        //Delete
        $('.delete_material_item').each(function () {
            var button = $(this);
            var item_id = button.attr('item_id');
            if (button.attr('initialized') != 'true') {
                button.click(function () {
                    if (confirm('Are you sure?')) {
                        $.post(
                            base_url + "inventory/delete_material_item/",
                            {
                                item_id: item_id
                            }
                        ).complete(function () {
                            $('#material_items_list').DataTable().draw('page');
                        });
                    }
                });
                button.attr('initialized', 'true');
            }
        });

    }
});

$('#material_item_categories_list').DataTable({
    colReorder: true,
    "processing": true,
    "serverSide": true,
    "ajax": {
        url: base_url + "inventory/material_item_categories/",
        type: 'POST'
    },
    "columns": [
        { "orderable": true },
        { "orderable": false },
        { "orderable": true },
        { "orderable": true },
        { "orderable": false }
    ],
    "language": {
        "zeroRecords": "<div class='alert alert-info'>No matching categories found</div>",
        "emptyTable": "<div class='alert alert-info'>No categories found</div>"
    }, "drawCallback": function () {
        //Save Category

        $('.save_material_item_category_button').each(function () {
            var button = $(this);
            if (button.attr('active') != 'true') {
                var modal = button.closest('.modal');
                var category_id = modal.find('input[name="category_id"]').val();
                var parent_field = modal.find('select[name="parent_category_id"]');


                if (category_id.trim() != '') {
                    var get_accessible_parents = function () {
                        $.post(
                            base_url + "inventory/get_accessible_parent_categories_options",
                            {
                                category_id: category_id
                            }, function (data) {
                                parent_field.html(data);
                                var current_parent_category_id = modal.find('input[name="current_parent_category_id"]').val();
                                parent_field.val(current_parent_category_id).trigger("change");
                            }
                        );
                    }

                    modal.on('show.bs.modal', get_accessible_parents);
                }

                var save_material_item_category = function () {
                    var category_name = modal.find('input[name="category_name"]').val();
                    var parent_category_id = parent_field.val();

                    if (category_name != '' && ((parent_category_id != category_id && category_id != '') || category_id == '') && parent_category_id != '') {
                        modal.modal('hide');
                        var description = modal.find('textarea[name="description"]').val();

                        $.post(
                            base_url + "inventory/save_material_item_category/",
                            {
                                category_id: category_id,
                                parent_category_id: parent_category_id,
                                category_name: category_name,
                                description: description
                            }, function () {
                                modal.find('form')[0].reset();
                                $('#material_item_categories_list').DataTable().draw('page');
                            }
                        );
                    }
                };


                button.click(save_material_item_category);
                button.attr('active', 'true');
            }
        });

        //Delete Category
        $('.delete_material_item_category').each(function () {
            var button = $(this);
            var category_id = button.attr('category_id');
            if (button.attr('initialized') != 'true') {
                button.click(function () {
                    if (confirm('Are you sure?')) {
                        $.post(
                            base_url + "inventory/delete_material_item_category/",
                            {
                                category_id: category_id
                            }
                        ).complete(function () {
                            $('#material_item_categories_list').DataTable().draw('page');
                        });
                    }
                });
            }
        });


        initialize_common_js();
    }
});

$('#measurement_units_list').DataTable({
    colReorder: true,
    "processing": true,
    "serverSide": true,
    "ajax": {
        url: base_url + "inventory/measurement_units/",
        type: 'POST'
    },
    "columns": [
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": false }
    ],
    "language": {
        "zeroRecords": "<div class='alert alert-info'>No matching units found</div>",
        "emptyTable": "<div class='alert alert-info'>No units found</div>"
    }, "drawCallback": function () {
        //Save Measurement Unit

        var save_measurement_unit = function (button) {
            var modal = button.closest('.modal');
            var name = modal.find('input[name="name"]').val();
            var symbol = modal.find('input[name="symbol"]').val();
            if (name != '' && symbol != '') {
                modal.modal('hide');
                var unit_id = modal.find('input[name="unit_id"]').val();
                var description = modal.find('textarea[name="description"]').val();

                $.post(
                    base_url + "inventory/save_measurement_unit/",
                    {
                        unit_id: unit_id,
                        name: name,
                        symbol: symbol,
                        description: description
                    }, function () {
                        modal.find('form')[0].reset();
                        $('#measurement_units_list').DataTable().draw('page');
                    }
                );
            }
        };


        $('.save_measurement_unit_button').each(function () {
            var button = $(this);
            if (button.attr('active') != 'true') {
                button.click(function () {
                    save_measurement_unit(button);
                });
                button.attr('active', 'true');
            }
        });

        $('.delete_measurement_unit').each(function () {
            var button = $(this);
            var unit_id = button.attr('unit_id');
            if (button.attr('initialized') != 'true') {
                button.click(function () {
                    if (confirm('Are you sure?')) {
                        $.post(
                            base_url + "inventory/delete_measurement_unit/",
                            {
                                unit_id: unit_id
                            }
                        ).complete(function () {
                            $('#measurement_units_list').DataTable().draw('page');
                        });
                    }
                });
                button.attr('initialized', 'true');
            }
        });

        initialize_common_js();
    }
});

$('#location_reports').each(function () {
    var box = $(this);
    var form = box.find('form');
    form.find('input[name="report_type"]').each(function () {
        var report_type = $(this).val();
        var sub_location_selector = form.find('select[name="sub_location_id"]');
        var sub_location_selector_form_group = sub_location_selector.closest('.form-group');
        var location_selector = form.find('select[name="location_id"]');
        var location_selector_form_group = location_selector.closest('.form-group');
        var material_selector = form.find('select[name="material_id"]');
        var material_selector_form_group = material_selector.closest('.form-group');
        var project_selector = form.find('select[name="project_id"]');
        var project_selector_form_group = project_selector.closest('.form-group');
        var source_selector = form.find('select[name="source_id"]');
        var source_selector_form_group = source_selector.closest('.form-group');
        var client_selector = form.find('select[name="client_id"]');
        var client_selector_form_group = client_selector.closest('.form-group');
        var destination_selector = form.find('select[name="destination_id"]');
        var destination_selector_form_group = destination_selector.closest('.form-group');
        if (report_type == 'inventory_sales') {
            sub_location_selector_form_group.show();
            location_selector_form_group.show();
            project_selector_form_group.show();
            client_selector_form_group.show();
            material_selector_form_group.hide();
            source_selector_form_group.hide();
            destination_selector_form_group.hide();
            sub_location_selector.attr("disabled", true);

            location_selector.change(function () {
                if (location_selector.attr('initialized') != 'true') {
                    start_spinner();
                    $.post(
                        base_url + "inventory/load_sub_location_options",
                        {
                            location_id: location_selector.val()
                        }, function (data) {
                            sub_location_selector.attr("disabled", false);
                            sub_location_selector.html(data.sub_location_options).change();
                            stop_spinner();
                        }, 'json'
                    );
                }
            });
        } else if (report_type == 'cost_center_assignements') {
            sub_location_selector_form_group.hide();
            location_selector_form_group.hide();
            material_selector_form_group.hide();
            client_selector_form_group.hide();
            sub_location_selector.change();
            location_selector.change();
            project_selector_form_group.hide();
            source_selector_form_group.show();
            destination_selector_form_group.show();

            source_selector.change(function () {
                var selected_sources = Array();
                if (source_selector != '' && source_selector != 'all') {
                    selected_sources.push(source_selector.val());
                }

                var destination_id = source_selector.closest('form').find('select[name="destination_id"]').val();
                if (destination_id != 'all' && destination_id != '' && selected_sources.indexOf(destination_id) !== -1) {
                    source_selector.closest('form').find('select[name="destination_id"]').select2('val', '');
                    toast('error', 'You cant select the same project as both source and destination');
                }
            });


            destination_selector.change(function () {
                var selected_destinations = Array();
                if (destination_selector != '' && destination_selector != 'all') {
                    selected_destinations.push(destination_selector.val());
                }

                var source_id = destination_selector.closest('form').find('select[name="source_id"]').val();
                if (source_id != 'all' && source_id != '' && selected_destinations.indexOf(source_id) !== -1) {
                    destination_selector.closest('form').find('select[name="source_id"]').select2('val', '');
                    toast('error', 'You cant select the same project as both source and destination');
                }
            });


        } else {
            sub_location_selector_form_group.hide();
            location_selector_form_group.hide();
            source_selector_form_group.hide();
            destination_selector_form_group.hide();
            client_selector_form_group.hide();
            sub_location_selector.change();
            location_selector.change();
            material_selector_form_group.show();
            project_selector_form_group.show();
        }
    });

    $('#generate_inventory_report').each(function () {
        var button = $(this);
        var form = button.closest('form');
        button.click(function () {
            if (button.attr('initialized') != 'true') {
                var report_type = form.find('input[name="report_type"]').val();
                var material_id = form.find('select[name="material_id"]').val();
                var project_id = form.find('select[name="project_id"]').val();
                var client_id = form.find('select[name="client_id"]').val();
                var source_id = form.find('select[name="source_id"]').val();
                var destination_id = form.find('select[name="destination_id"]').val();
                var location_id = form.find('select[name="location_id"]').val();
                var sub_location_id = form.find('select[name="sub_location_id"]').val();
                var from = form.find('input[name="from"]').val();
                var to = form.find('input[name="to"]').val();
                if (report_type == 'material_item_availability' && material_id != '' && from != '' && to != '') {
                    start_spinner();
                    $.post(
                        base_url + "inventory/inventory_reports",
                        {
                            report_type: report_type,
                            project_id: project_id,
                            material_id: material_id,
                            from: from,
                            to: to
                        }, function (data) {
                            $('#report_container').html(data);
                            form.find('select').change();
                        }
                    ).complete(function () {
                        stop_spinner();
                    });
                } else if (report_type == 'inventory_sales' && from != '' && to != '') {
                    start_spinner();
                    $.post(
                        base_url + "inventory/inventory_reports",
                        {
                            report_type: report_type,
                            location_id: location_id,
                            project_id: project_id,
                            client_id: client_id,
                            sub_location_id: sub_location_id,
                            material_id: material_id,
                            from: from,
                            to: to
                        }, function (data) {
                            $('#report_container').html(data);
                            form.find('select').change();
                        }
                    ).complete(function () {
                        stop_spinner();
                    });
                } else if (report_type == 'cost_center_assignements' && from != '' && to != '') {
                    start_spinner();
                    $.post(
                        base_url + "inventory/inventory_reports",
                        {
                            report_type: report_type,
                            source_id: source_id,
                            destination_id: destination_id,
                            from: from,
                            to: to
                        }, function (data) {
                            $('#report_container').html(data);
                            form.find('select').change();
                        }
                    ).complete(function () {
                        stop_spinner();
                    });
                }
            }
        });
    });

});

/********************************************************
 * COSTS
 ********************************************************/

function load_material_average_price(selector, container, project_id) {
    start_spinner();
    var material_id = selector.val();
    var form_container = selector.closest(container);
    var rate_field = form_container.find('input[name="rate"]');

    if (project_id == 'undefined') {
        project_id = container == 'form' ? form_container.find('input[name="project_id"]').val() : form_container.find('select[name="project_id"]').val();
    }

    if (material_id != '' && project_id != '') {
        var sub_location_id = form_container.find('select[name="source_sub_location_id"]').val();
        $.post(
            base_url + "inventory/load_material_average_price",
            {
                project_id: project_id,
                material_id: material_id,
                sub_location_id: sub_location_id
            }, function (data) {
                rate_field.val(parseFloat(data));
                if (container == 'form') {
                    rate_field.priceFormat();
                }
                stop_spinner();
            }
        ).complete();
    } else {
        rate_field.val('');
    }
}

function save_project_miscellaneous_cost(button) {
    var modal = button.closest('.modal');
    var budget_id = modal.find('select[name="budget_id"]').val();
    var cost_id = modal.find('input[name="cost_id"]').val();
    var cost_item_name = modal.find('input[name="cost_item_name"]').val();
    var description = modal.find('textarea[name="description"]').val();
    var quantity = modal.find('input[name="quantity"]').val();
    var rate = modal.find('input[name="rate"]').unmask();
    var cost_date = modal.find('input[name="cost_date"]').val();
    if (budget_id != '' && quantity != '' && cost_date != '') {
        modal.modal('hide');

        $.post(
            base_url + "costs/save_project_miscellaneous_cost/",
            {
                cost_item_name: cost_item_name,
                budget_id: budget_id,
                cost_date: cost_date,
                description: description,
                quantity: quantity,
                rate: rate,
                cost_id: cost_id
            }, function (data) {
                modal.find('form')[0].reset();
                button.closest('.box').find('.general_miscellaneous_costs_list').DataTable().draw('page');
            }
        );
    }
}

function delete_material_cost(button) {
    if (confirm('Are you sure?')) {
        var cost_center = button.attr('cost_center');
        var cost_id = button.attr('cost_id');
        start_spinner();
        $.post(
            base_url + "costs/delete_material_cost",
            {
                cost_center: cost_center,
                cost_id: cost_id,
            }, function (data) {
                button.closest('table').DataTable().draw('page');
            }
        ).complete(function () {
            stop_spinner();
        });
    }
}

function delete_miscellaneous_cost(button) {
    if (confirm('Are you sure?')) {
        var cost_id = button.attr('cost_id');
        start_spinner();
        $.post(
            base_url + "costs/delete_miscellaneous_cost",
            {
                cost_id: cost_id
            }, function (data) {
                button.closest('table').DataTable().draw('page');
            }
        ).complete(function () {
            stop_spinner();
        });
    }
}

function save_bulk_material_cost(button) {

    var modal = button.closest('.modal');
    var project_id = modal.find('input[name="project_id"]').val();
    var source_sub_location_id = modal.find('input[name="source_sub_location_id"]').val();
    var date = modal.find('input[name="date"]').val();
    var form_cost_center_selector = modal.find('select[name="cost_center_id"]');
    var cost_center_id = form_cost_center_selector.val();

    var i = 0;
    var material_ids = new Array(), item_ids = new Array(), quantities = new Array(), rates = new Array(), descriptions = new Array();
    var tbody = modal.find('tbody'), error = 0;

    tbody.find('input[name="material_id"]').each(function () {
        var material_id = $(this).val();
        var row = $(this).closest('tr');
        var rate = row.find('input[name="rate"]').unmask();
        var quantity = row.find('input[name="quantity"]').val();
        var description = row.find('textarea[name="description"]').val();
        var item_id = row.find('input[name="item_id"]').val();


        if (parseFloat(quantity) > 0 && parseFloat(rate) > 0 && material_id != '') {
            material_ids[i] = material_id;
            quantities[i] = quantity;
            descriptions[i] = description;
            rates[i] = rate;
            item_ids[i] = item_id;
            i++;
        } else {

            error++;
        }
    });


    if (quantities.length > 0 && project_id != '' && rates.length > 0 && date != '') {

        start_spinner();

        modal.modal('hide');

        $.post(
            base_url + "costs/save_bulk_material_cost/",
            {
                source_sub_location_id: source_sub_location_id,
                project_id: project_id,
                cost_center_id: cost_center_id,
                date: date,
                descriptions: descriptions,
                quantities: quantities,
                rates: rates,
                material_ids: material_ids,
                item_ids: item_ids
            }
        ).complete(function () {
            //reset form
            var form = button.closest('form');
            form[0].reset();
            toast('success', 'Successful');
            modal.closest('.box').find('.sub_location_material_stock').DataTable().draw('page');
            stop_spinner();
        });

        button.attr('active', 'true');
    } else {
        toast('error', 'An Error occured');
    }
}

/********************************************************
 * STOCKS
 ********************************************************/

function save_asset_edit(button) {
    if (button.attr('initialized') != 'true') {

        button.click(function () {
            var modal = button.closest('.modal');
            var salvage_value = modal.find('input[name="salvage_value"]').unmask();
            var asset_id = modal.find('input[name="asset_id"]').val().trim();
            var asset_code = modal.find('input[name="asset_code"]').val().trim();
            var book_value = modal.find('input[name="book_value"]').unmask();
            var registration_date = modal.find('input[name="registration_date"]').val().trim();
            var status = modal.find('select[name="status"]').val().trim();

            if (asset_id != '' && registration_date != '' && book_value != '') {
                modal.modal('hide');
                start_spinner();
                $.post(
                    base_url + "assets/edit_asset_details",
                    {
                        asset_id: asset_id,
                        asset_code: asset_code,
                        salvage_value: salvage_value,
                        book_value: book_value,
                        registration_date: registration_date,
                        status: status
                    }, function (data) {
                        button.closest('table').DataTable().draw('page');
                    }
                ).complete(function () {
                    stop_spinner();
                });
            } else {
                display_form_fields_error();
            }
        });
        button.attr('initialized', 'true')
    }
};

function initialize_location_material_stock() {

    $('#location_material_stock_table').each(function () {
        var table = $(this);
        if (table.attr('dataTable_initialized') != 'true') {
            var location_id = table.attr('location_id');
            table.DataTable({
                "order": [[1, "asc"]],
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "inventory/location_material_stock/" + location_id,
                    type: 'POST'
                },
                "columns": [
                    { "orderable": false },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching items found</div>",
                    "emptyTable": "<div class='alert alert-info'>No items found</div>"
                }, "drawCallback": function () {
                    $(this).find('tr').each(function () {
                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                    });

                    //WITHIN TAB PANE
                    $('a[href="#location_assets_stock"]').on('shown.bs.tab', function (e) {
                        $('#location_assets_stock_table').each(function () {

                            var table = $(this);
                            if (table.attr('initialized') != 'true') {
                                table.DataTable({
                                    'order': [[2, "asc"]],
                                    'processing': true,
                                    'serverSide': true,
                                    'ajax': {
                                        url: base_url + "Assets/location_assets_datatable/location/" + table.attr('location_id'),
                                        type: 'POST'
                                    },
                                    'columns': [
                                        { 'orderable': true },
                                        { 'orderable': true },
                                        { 'orderable': true },
                                        { 'orderable': true },
                                        { 'orderable': false }
                                    ],
                                    'language': {
                                        "zeroRecords": "<div class='alert alert-info'>No matching assets found</div>",
                                        "emptyTable": "<div class='alert alert-info'>No assets found</div>"
                                    },
                                    'drawCallback': function () {
                                        table.find('.save_edit_asset').each(function () {
                                            save_asset_edit($(this));
                                        });

                                        table.find('.print_barcode').each(function () {
                                            var button = $(this);
                                            if (button.attr('initialized') != 'true') {
                                                button.click(function () {

                                                });
                                                button.attr('initialized', 'true');
                                            }
                                        });

                                        initialize_common_js();
                                    }
                                });
                                table.attr('initialized', 'true');
                            } else {
                                table.DataTable().draw('page');
                            }
                        });
                    });

                    $('.sub_location_material_stock_activator').on('shown.bs.tab', function (e) {
                        $($(this).attr('href')).find('.sub_location_material_stock').DataTable().draw('page');
                    });

                    $('a[href="#location_assets_handovers"]').on('shown.bs.tab', function (e) {
                        $('#assets_handover_list').each(function () {
                            var table = $(this);
                            if (table.attr('initialized') != 'true') {
                                table.DataTable({
                                    "order": [[2, "desc"]],
                                    colReorder: true,
                                    "processing": true,
                                    "serverSide": true,
                                    "ajax": {
                                        url: base_url + "assets/assets_handover_list/" + location_id,
                                        type: 'POST'
                                    },
                                    "columns": [
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": false }
                                    ],
                                    "language": {
                                        "zeroRecords": "<div class='alert alert-info'>No matching handovers found</div>",
                                        "emptyTable": "<div class='alert alert-info'>No handovers found</div>"
                                    }, "drawCallback": function () {

                                        table.find('tr').each(function () {
                                            $(this).find('td:last-child').attr('nowrap', 'nowrap');
                                        });

                                        $('.handover_form').each(function () {
                                            var modal = $(this);
                                            if (modal.attr('initialized') != 'true') {

                                                function initialize_tbody_row(tr) {
                                                    tr.find('.remove_row').each(function () {
                                                        $(this).click(function () {
                                                            $(this).closest('tr').remove();
                                                        });
                                                    });

                                                    tr.find('select[name="asset_id"]').each(function () {
                                                        var asset_selector = $(this);
                                                        asset_selector.select2({ width: '100%' });
                                                        asset_selector.change(function () {
                                                            var selected_assets = Array();
                                                            tr.closest('tbody').find('select[name="asset_id"]').each(function () {
                                                                if (asset_selector[0] !== $(this)[0]) {
                                                                    selected_assets.push($(this).val());
                                                                }
                                                            });

                                                            var asset_id = asset_selector.val()

                                                            if (asset_id != '' && selected_assets.indexOf(asset_id) !== -1) {
                                                                asset_selector.select2('val', '');
                                                                toast('error', 'The selected asset is already on the list');
                                                            }
                                                        });

                                                    });
                                                }

                                                initialize_tbody_row(modal.find('tbody tr'));

                                                modal.find('.handover_row_adder').click(function () {
                                                    var tbody = modal.find('tbody');
                                                    var new_row = modal.find('.handover_row_template').clone();
                                                    new_row.removeAttr('style').removeClass('handover_row_template').addClass('artificial_row').appendTo(tbody);
                                                    initialize_tbody_row(new_row);

                                                });

                                                modal.find('.save_handover_asset').click(function () {
                                                    modal.modal('hide');
                                                    start_spinner();
                                                    var handover_id = modal.find('input[name="handover_id"]').val();
                                                    var employee_id = modal.find('select[name="employee_id"]').val();
                                                    var handover_date = modal.find('input[name="handover_date"]').val();
                                                    var location_id = modal.find('input[name="location_id"]').val();
                                                    var comment = modal.find('textarea[name="comments"]').val();
                                                    var asset_ids = new Array(), remarks = new Array();
                                                    var i = 0;
                                                    modal.find('tbody tr').each(function () {
                                                        var row = $(this);
                                                        asset_ids[i] = row.find('select[name="asset_id"]').val();
                                                        remarks[i] = row.find('textarea[name="remarks"]').val();
                                                        i++;
                                                    });
                                                    $.post(
                                                        base_url + "assets/save_handover_asset",
                                                        {
                                                            handover_id: handover_id,
                                                            employee_id: employee_id,
                                                            handover_date: handover_date,
                                                            location_id: location_id,
                                                            comment: comment,
                                                            asset_ids: asset_ids,
                                                            remarks: remarks
                                                        }, function (data) {
                                                            stop_spinner();
                                                            modal.find('form')[0].reset();
                                                            modal.find('.artificial_row').remove();
                                                            table.DataTable().draw('page');
                                                        }
                                                    ).complete();

                                                });

                                                modal.attr('initialized', 'true');
                                            }

                                        });

                                        $('.delete_handover_asset').each(function () {
                                            var button = $(this);
                                            if (button.attr('initialized') != 'true') {
                                                button.click(function () {

                                                    $.confirm({
                                                        title: 'Delete Asset Handover',
                                                        content: 'This action is irreversible! Are you sure?',
                                                        buttons: {
                                                            confirm: {
                                                                text: 'Confirm Delete',
                                                                btnClass: 'btn btn-danger btn-xs',
                                                                action: function () {
                                                                    $.post(
                                                                        base_url + "assets/delete_handover_asset",
                                                                        {
                                                                            handover_id: button.attr('handover_id')
                                                                        }, function () {
                                                                            table.DataTable().draw('page');
                                                                        }
                                                                    );
                                                                }
                                                            },
                                                            cancel: {
                                                                text: "Don't Delete",
                                                                btnClass: 'btn btn-default btn-xs'
                                                            }
                                                        }
                                                    });
                                                });
                                                button.attr('initialized', 'true')
                                            }
                                        });

                                        initialize_common_js();
                                    }
                                });
                                table.attr('initialized', 'true');
                            } else {
                                table.DataTable().draw('page');
                            }

                        });
                    });

                    $('a[href="#location_transfer_orders"]').on('shown.bs.tab', function (e) {
                        $('#location_transfer_orders_table').each(function () {
                            var table = $(this);
                            if (table.attr('datatable_initialized') != 'true') {
                                var location_id = table.attr('location_id');
                                table.DataTable({
                                    "order": [[0, "desc"]],
                                    colReorder: true,
                                    "processing": true,
                                    "serverSide": true,
                                    "ajax": {
                                        url: base_url + "inventory/location_transfer_orders/" + location_id,
                                        type: 'POST'
                                    },
                                    "columns": [
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": false }
                                    ],
                                    "language": {
                                        "zeroRecords": "<div class='alert alert-info'>No matching transfer orders found</div>",
                                        "emptyTable": "<div class='alert alert-info'>No transfer orders found</div>"
                                    }, "drawCallback": function () {
                                        table.find('tr').each(function () {
                                            $(this).find('td:last-child').attr('nowrap', 'nowrap');
                                        });

                                        table.find('.transfer_order_transfer_form').each(function () {
                                            var transfer_form = $(this);
                                            var project_id = transfer_form.find('select[name="project_id"]').val();

                                            transfer_form.find('tbody tr').each(function () {
                                                var row = $(this);
                                                row.find('select').select2({ width: "100%" });
                                            });

                                            transfer_form.find('select[name="source_sub_location_id"]').each(function () {
                                                var source_selector = $(this);
                                                var row = source_selector.closest('tr');
                                                var item_type = row.find('input[name="item_type"]').val();
                                                row.find('.row_remover').click(function () {
                                                    row.remove();
                                                });
                                                source_selector.change(function () {
                                                    var sub_location_id = $(this).val();
                                                    if (item_type == 'material') {
                                                        validate_sub_store_material_quantity(source_selector, 'tr', project_id);
                                                    } else {
                                                        if (sub_location_id != '') {
                                                            start_spinner();
                                                            $.post(
                                                                base_url + "assets/get_asset_item_sub_location_assets_options",
                                                                {
                                                                    sub_location_id: sub_location_id,
                                                                    asset_item_id: row.find('input[name="asset_item_id"]').val(),
                                                                    project_id: project_id
                                                                }, function (data) {
                                                                    stop_spinner();
                                                                    row.find('select[name="asset_id"]').html(data).change();
                                                                }
                                                            );
                                                        } else {
                                                            row.find('select[name="asset_id"]').html('<option></option>').change();
                                                        }
                                                    }
                                                });
                                            });

                                            transfer_form.find('select[name="asset_id"]').change(function () {
                                                var current_selector = $(this);
                                                $(this).closest('tbody').find('select[name="asset_id"]').each(function () {
                                                    if ($(this)[0] !== current_selector[0] && $(this).val() != '' && $(this).val() == current_selector.val()) {
                                                        toast('error', 'The selected asset is already on the list');
                                                        current_selector.val('').change();
                                                    }
                                                });
                                            });
                                        });

                                        initialize_common_js();
                                    }
                                });
                                table.attr('datatable_initialized', true);
                            } else {
                                table.DataTable().draw('page');
                            }
                        });
                    });

                    $('a[href="#location_material_transfers"]').on('shown.bs.tab', function (e) {
                        var tab_pane = $($(this).attr('href'));
                        tab_pane.find('#location_material_transfers_table').each(function () {
                            var table = $(this);
                            if (table.attr('dataTable_initialized') != 'true') {
                                var location_id = table.attr('location_id');
                                table.DataTable({
                                    "order": [[1, "desc"]],
                                    colReorder: true,
                                    "processing": true,
                                    "serverSide": true,
                                    "ajax": {
                                        url: base_url + "inventory/location_material_transfers/" + location_id,
                                        type: 'POST'
                                    },
                                    "columns": [
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": false }
                                    ],
                                    "language": {
                                        "zeroRecords": "<div class='alert alert-info'>No matching material transfers found</div>",
                                        "emptyTable": "<div class='alert alert-info'>No material transfers found</div>"
                                    }, "drawCallback": function () {
                                        table.find('tr').each(function () {
                                            $(this).find('td:last-child').attr('nowrap', 'nowrap');
                                        });
                                        table.find('.remove_row').each(function () {
                                            $(this).click(function () {
                                                $(this).closest('tr').remove();
                                            });
                                        });
                                        table.find('.delete_external_material_transfer').each(function () {
                                            var button = $(this);
                                            if (button.attr('initialized') != 'true') {
                                                var transfer_id = button.attr('transfer_id');
                                                button.click(function () {
                                                    if (confirm('Are You Sure?')) {
                                                        start_spinner();
                                                        $.post(
                                                            base_url + "inventory/delete_transfer",
                                                            {
                                                                transfer_id: transfer_id
                                                            }, function (data) {
                                                                stop_spinner();
                                                                table.DataTable().draw('page');
                                                            }
                                                        ).complete();
                                                    }
                                                });
                                            }
                                        });
                                        initialize_material_movement_forms();
                                        initialize_common_js();
                                    }
                                });
                                table.attr('dataTable_initialized', 'true');
                            } else {
                                table.DataTable().draw('page');
                            }
                        });
                    });

                    $('a[href="#location_material_disposals"]').on('shown.bs.tab', function (e) {
                        $('#location_material_disposal').each(function () {
                            var table = $(this);
                            if (table.attr('datatable_initialized') != 'true') {
                                var location_id = table.attr('location_id');
                                table.DataTable({
                                    "order": [[0, "desc"]],
                                    colReorder: true,
                                    "processing": true,
                                    "serverSide": true,
                                    "ajax": {
                                        url: base_url + "inventory/location_material_disposals/" + location_id,
                                        type: 'POST'
                                    },
                                    "columns": [
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": false }
                                    ],
                                    "language": {
                                        "zeroRecords": "<div class='alert alert-info'>No matching Disposals found</div>",
                                        "emptyTable": "<div class='alert alert-info'>No Disposals found</div>"
                                    },
                                    "drawCallback": function () {

                                        table.find('tr').each(function () {
                                            $(this).find('td:last-child').attr('nowrap', 'nowrap');
                                        });

                                        $('.save_material_disposal').each(function () {
                                            var button = $(this);
                                            if (button.attr('active') != 'true') {
                                                button.click(function () {
                                                    var modal = button.closest('.modal');
                                                    var disposal_id = modal.find('input[name="disposal_id"]').val();
                                                    var disposal_date = modal.find('input[name="disposal_date"]').val();
                                                    var location_id = modal.find('input[name="location_id"]').val();
                                                    var project_id = modal.find('select[name="project_id"]').val(), i = 0;

                                                    var source_sub_location_ids = new Array(), material_item_ids = new Array(), asset_ids = new Array(), item_types = new Array(), quantities = new Array(), remarks = new Array(), rates = new Array();
                                                    var tbody = modal.find('tbody');
                                                    var quantity, error = 0;
                                                    tbody.find('input[name="item_type"]').each(function () {
                                                        var item_type = $(this).val();
                                                        item_types[i] = item_type;
                                                        var row = $(this).closest('tr');
                                                        quantity = item_type == 'material' ? row.find('input[name="quantity"]').val() : 503;
                                                        var id = item_type == 'material' ? row.find('select[name="material_id"]').val() : row.find('select[name="asset_id"]').val();

                                                        if (parseFloat(quantity) > 0 && location_id != '' && id != '') {
                                                            quantities[i] = quantity;
                                                            source_sub_location_ids[i] = row.find('select[name="source_sub_location_id"]').val();
                                                            rates[i] = row.find('input[name="rate"]').val();
                                                            if (item_type == 'material') {
                                                                material_item_ids[i] = id;
                                                            } else {
                                                                asset_ids[i] = id;
                                                            }
                                                            remarks[i] = row.find('textarea[name="remarks"]').val();
                                                        } else {
                                                            error++;
                                                        }
                                                        i++;
                                                    });

                                                    if (disposal_date != '' && location_id != '' && source_sub_location_ids.length > 0 && error == 0) {
                                                        modal.modal('hide');
                                                        start_spinner();
                                                        $.post(
                                                            base_url + "inventory/save_material_disposal/",
                                                            {
                                                                disposal_id: disposal_id,
                                                                disposal_date: disposal_date,
                                                                rates: rates,
                                                                quantities: quantities,
                                                                location_id: location_id,
                                                                project_id: project_id,
                                                                material_item_ids: material_item_ids,
                                                                asset_ids: asset_ids,
                                                                item_types: item_types,
                                                                source_sub_location_ids: source_sub_location_ids,
                                                                remarks: remarks
                                                            }, function () {
                                                                $('#location_material_disposal').DataTable().draw('page');
                                                                modal.find('form')[0].reset();
                                                                tbody.find('.artificial_row').remove();
                                                                tbody.find('.unit_display').html('');
                                                                initialize_common_js();
                                                            }
                                                        ).complete(function () {
                                                            stop_spinner();
                                                        });
                                                    } else {
                                                        toast('warning', 'Check if all fields are filled correctly');
                                                    }
                                                });
                                                button.attr('active', 'true');
                                            }
                                        });

                                        $('.delete_material_disposal').each(function () {
                                            var button = $(this);
                                            if (button.attr('active') != 'true') {
                                                button.click(function () {

                                                    $.confirm({
                                                        title: 'Delete Material Disposal.',
                                                        content: 'This action is irreversible! Are you sure?',
                                                        buttons: {
                                                            confirm: {
                                                                text: 'Confirm Delete',
                                                                btnClass: 'btn btn-danger',
                                                                action: function () {
                                                                    start_spinner();
                                                                    $.post(
                                                                        base_url + "inventory/delete_material_disposal",
                                                                        {
                                                                            disposal_id: button.attr('material_disposal_id')
                                                                        }, function () {
                                                                            button.closest('tr').remove()
                                                                            $('#location_material_disposal').DataTable().draw('page');
                                                                        }
                                                                    ).complete(function () {
                                                                        stop_spinner();
                                                                    });
                                                                }
                                                            },
                                                            cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                                                        }
                                                    });

                                                });
                                                button.attr('active', 'true');
                                            }
                                        });

                                        initialize_material_movement_forms();
                                        initialize_common_js();
                                    }
                                });
                                table.attr('datatable_initialized', true);
                            } else {
                                table.DataTable().draw('page');
                            }
                        });
                    });

                    $('a[href="#material_cost_center_assignment"]').on('shown.bs.tab', function (e) { //ptm1  added '#material_cost_center_assignment'
                        $('#material_cost_center_assignment_tab').each(function () {
                            var table = $(this);
                            if (table.attr('datatable_initialized') != 'true') {
                                var location_id = table.attr('location_id');
                                table.DataTable({
                                    "order": [[0, "desc"]],
                                    colReorder: true,
                                    "processing": true,
                                    "serverSide": true,
                                    "ajax": {
                                        url: base_url + "inventory/material_cost_center_assignment/" + location_id,
                                        type: 'POST'
                                    },
                                    "columns": [
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": false }
                                    ],
                                    "language": {
                                        "zeroRecords": "<div class='alert alert-info'>No matching Cost Assignment found</div>",
                                        "emptyTable": "<div class='alert alert-info'>No Cost Assignment found</div>"
                                    },
                                    "drawCallback": function () {
                                        $('.asset_cost_center_assignment_form').on('show.bs.modal', function (e) {
                                            var modal = $(this);
                                            if (modal.attr('initialized') != 'true') {
                                                var items_table = modal.find('table');

                                                modal.find('tbody tr').each(function () {
                                                    var selected_row = $(this);
                                                    selected_row.find('select').select2({ width: "100%" });
                                                });

                                                var is_asset_already_selected = function (selector, container) {
                                                    if (selector.val().trim() != '') {
                                                        var asset_ids = Array(), current_selector = selector;
                                                        container.closest('tbody').find('select[name="asset_id"]').each(function () {
                                                            if (current_selector[0] !== selector[0]) {
                                                                asset_ids.push(selector.val());
                                                            }
                                                        });
                                                        if (asset_ids.indexOf(current_selector.val()) != -1) {
                                                            toast('error', 'The selected asset is already on the list');
                                                            current_selector.select2('val', '');
                                                        }
                                                    }
                                                }

                                                var load_sub_location_available_asset_options = function (select_element, container) {
                                                    var source_sub_location_id = select_element.val();
                                                    var asset_selector = select_element.closest(container).find('select[name="asset_id"]');
                                                    var project_id = modal.find('select[name="project_id"]').val();

                                                    if (source_sub_location_id != '') {
                                                        start_spinner();
                                                        $.post(
                                                            base_url + "assets/load_sub_location_available_project_assets",
                                                            {
                                                                source_sub_location_id: source_sub_location_id,
                                                                project_id: project_id
                                                            }, function (data) {
                                                                asset_selector.html(data).change();
                                                            }
                                                        ).complete(function () {
                                                            stop_spinner();
                                                        });
                                                    } else {
                                                        asset_selector.html('').change();
                                                    }

                                                };

                                                modal.find('select[name="source_sub_location_id"]').change(function () {
                                                    var select_element = $(this);
                                                    if (select_element.attr('initialized') != 'true') {
                                                        load_sub_location_available_asset_options(select_element, 'tr');
                                                    }
                                                });

                                                modal.find('select[name="asset_id"]').change(function () {
                                                    if ($(this).attr('initialized') != 'true') {
                                                        is_asset_already_selected($(this), modal);
                                                    }
                                                });

                                                modal.find('.asset_row_adder').click(function () {
                                                    if ($(this).attr('initialized') != 'true') {
                                                        var new_row_table = $(this).closest('table');
                                                        var tbody = new_row_table.find('tbody');
                                                        var new_row = new_row_table.find('.asset_row_template').clone().removeAttr('style')
                                                            .removeClass('asset_row_template').addClass('artificial_row').appendTo(tbody);

                                                        new_row.find('select').select2({ width: "100%" });

                                                        new_row.find('select[name="source_sub_location_id"]').change(function () {
                                                            var select_element = $(this);
                                                            if (select_element.attr('initialized') != 'true') {
                                                                load_sub_location_available_asset_options(select_element, 'tr');
                                                            }
                                                        });

                                                        new_row.find('select[name="asset_id"]').change(function () {
                                                            if ($(this).attr('initialized') != 'true') {
                                                                is_asset_already_selected($(this), new_row);
                                                            }
                                                        });

                                                        new_row.find('.row_remover').click(function () {
                                                            $(this).closest('tr').remove();
                                                        });
                                                        initialize_common_js();
                                                    }
                                                });

                                                modal.find('.row_remover').click(function () {
                                                    $(this).closest('tr').remove();
                                                });

                                                modal.attr('initialized', 'true');
                                            }
                                        });

                                        $('#save_asset_cost_center_assignment').click(function () {
                                            var button = $(this);
                                            if (button.attr('active') != 'true') {
                                                var modal = button.closest('.modal');
                                                var assignment_date = modal.find('input[name="assignment_date"]').val();
                                                var location_id = modal.find('input[name="location_id"]').val();
                                                var source_project_id = modal.find('select[name="project_id"]').val();
                                                var destination_project_id = modal.find('select[name="destination_project_id"]').val(), i = 0;

                                                var sub_location_ids = new Array(), item_ids = new Array(), descriptions = new Array();
                                                var tbody = modal.find('tbody');
                                                var asset_id, error = 0, i = 0;
                                                tbody.find('select[name="asset_id"]').each(function () {
                                                    asset_id = $(this).val();
                                                    if (asset_id != '' && location_id != '') {
                                                        sub_location_ids[i] = tbody.find('select[name="source_sub_location_id"]').val();
                                                        item_ids[i] = asset_id;
                                                        descriptions[i] = tbody.find('textarea[name="remarks"]').val();
                                                    } else {
                                                        error++;
                                                    }
                                                    i++;
                                                });

                                                if (assignment_date != '' && location_id != '' && sub_location_ids.length > 0 && error == 0) {
                                                    modal.modal('hide');
                                                    start_spinner();
                                                    $.post(
                                                        base_url + "assets/save_asset_cost_center_assignment/",
                                                        {
                                                            assignment_date: assignment_date,
                                                            location_id: location_id,
                                                            destination_project_id: destination_project_id,
                                                            item_ids: item_ids,
                                                            sub_location_ids: sub_location_ids,
                                                            source_project_id: source_project_id,
                                                            descriptions: descriptions
                                                        }, function () {
                                                            $('#material_cost_center_assignment_tab').DataTable().draw('page');
                                                            modal.find('form')[0].reset();
                                                            tbody.find('.artificial_row').remove();
                                                            initialize_common_js();
                                                        }
                                                    ).complete(function () {
                                                        stop_spinner();
                                                    });
                                                } else {
                                                    display_form_fields_error();
                                                }
                                                button.attr('active', 'true');
                                            }
                                        });

                                        $('.save_material_cost_center_assignment').each(function () {
                                            var button = $(this);
                                            if (button.attr('active') != 'true') {
                                                button.click(function () {


                                                    var modal = button.closest('.modal');
                                                    var material_cost_center_assignment_id = modal.find('input[name="material_cost_center_assignment_id"]').val();
                                                    var assignment_date = modal.find('input[name="assignment_date"]').val();
                                                    var location_id = modal.find('input[name="location_id"]').val();
                                                    var source_project_id = modal.find('select[name="project_id"]').val();
                                                    var destination_project_id = modal.find('select[name="destination_project_id"]').val(), i = 0;

                                                    var sub_location_ids = new Array(), item_ids = new Array(), quantities = new Array(), descriptions = new Array(), prices = new Array();
                                                    var tbody = modal.find('tbody');
                                                    var quantity, material_id, error = 0;
                                                    tbody.find('input[name="quantity"]').each(function () {
                                                        quantity = $(this).val();
                                                        material_id = tbody.find('select[name="material_id"]:eq(' + i + ')').val();

                                                        if (parseFloat(quantity) > 0 && location_id != '') {
                                                            quantities[i] = quantity;
                                                            sub_location_ids[i] = tbody.find('select[name="source_sub_location_id"]:eq(' + i + ')').val();
                                                            prices[i] = tbody.find('input[name="rate"]:eq(' + i + ')').val();
                                                            item_ids[i] = material_id;
                                                            descriptions[i] = tbody.find('textarea[name="remarks"]:eq(' + i + ')').val();
                                                        } else {
                                                            error++;
                                                        }
                                                        i++;
                                                    });

                                                    if (assignment_date != '' && location_id != '' && sub_location_ids.length > 0 && error == 0) {
                                                        modal.modal('hide');
                                                        start_spinner();
                                                        $.post(
                                                            base_url + "inventory/save_material_cost_center_assignment/",
                                                            {
                                                                material_cost_center_assignment_id: material_cost_center_assignment_id,
                                                                assignment_date: assignment_date,
                                                                location_id: location_id,
                                                                destination_project_id: destination_project_id,
                                                                item_ids: item_ids,
                                                                sub_location_ids: sub_location_ids,
                                                                source_project_id: source_project_id,
                                                                quantities: quantities,
                                                                prices: prices,
                                                                descriptions: descriptions
                                                            }, function () {
                                                                $('#material_cost_center_assignment_tab').DataTable().draw('page');
                                                                modal.find('form')[0].reset();
                                                                tbody.find('.artificial_row').remove();
                                                                tbody.find('.unit_display').html('');
                                                                initialize_common_js();
                                                            }
                                                        ).complete(function () {
                                                            stop_spinner();
                                                        });
                                                    } else {
                                                        display_form_fields_error();
                                                    }
                                                });
                                                button.attr('active', 'true');
                                            }
                                        });

                                        table.find('tr').each(function () {
                                            $(this).find('td:last-child').attr('nowrap', 'nowrap');
                                        });
                                        initialize_material_movement_forms();
                                        initialize_common_js();
                                    }
                                });
                                table.attr('datatable_initialized', true);
                            } else {
                                table.DataTable().draw('page');
                            }
                        });

                    });


                    //UP ONE LEVEL
                    $('a[href="#location_grns"]').on('shown.bs.tab', function (e) {
                        $('#location_grns_table').each(function () {
                            var table = $(this);
                            if (table.attr('datatable_initialized') != 'true') {
                                var location_id = table.attr('location_id');
                                table.DataTable({
                                    "order": [[0, "desc"]],
                                    colReorder: true,
                                    "processing": true,
                                    "serverSide": true,
                                    "ajax": {
                                        url: base_url + "inventory/location_grns/" + location_id,
                                        type: 'POST'
                                    },
                                    "columns": [
                                        { "orderable": true },
                                        { "orderable": true },
                                        { "orderable": false },
                                        { "orderable": false },
                                        { "orderable": true },
                                        { "orderable": false }
                                    ],
                                    "language": {
                                        "zeroRecords": "<div class='alert alert-info'>No matching GRNs found</div>",
                                        "emptyTable": "<div class='alert alert-info'>No GRNs found</div>"
                                    }, "drawCallback": function () {
                                        $('#site_grn_form').each(function () {
                                            var modal = $(this);
                                            if (modal.attr('initialized') != 'true') {
                                                modal.on('show.bs.modal', function () {
                                                    modal.find('tbody tr').each(function () {
                                                        $(this).find('select').select2({ width: "100%" });
                                                        initialize_form_amount_calculator($(this));

                                                        $(this).find('.row_remover').click(function () {
                                                            var table = $(this).closest('table');
                                                            $(this).closest('tr').remove();
                                                            calculate_table_total_amount(table)
                                                        });
                                                    });

                                                    modal.delegate(' input[name="rate"],  input[name="quantity"]', 'change keyup', function () {
                                                        calculate_table_total_amount(modal.find('table'));
                                                    });

                                                    modal.find('tbody select[name="item_id"]').each(function () {
                                                        var selector = $(this);
                                                        var item_type = selector.closest('tr').find('input[name="item_type"]').val();
                                                        selector.change(function () {
                                                            if (selector.val() != '' && item_type == "material") {
                                                                load_material_unit(selector, ' tr ');
                                                            } else {
                                                                selector.closest('tr').find('.unit_display').html('');
                                                            }
                                                        });
                                                    });

                                                    modal.find('.material_row_adder').each(function () {
                                                        if ($(this).attr('initialized') != 'true') {
                                                            $(this).click(function () {
                                                                var tbody = $(this).closest('.row').find('tbody');
                                                                var new_row = tbody.closest('table').find('.material_row_template').clone().removeAttr('style')
                                                                    .removeClass('material_row_template').addClass('artificial_row').appendTo(tbody);

                                                                new_row.find('.number_format').priceFormat();

                                                                initialize_form_amount_calculator(new_row, 2);

                                                                new_row.delegate(' input[name="rate"],  input[name="quantity"]', 'change keyup', function () {
                                                                    calculate_table_total_amount(new_row.closest('table'));
                                                                });

                                                                new_row.find('select[name="item_id"]').change(function () {
                                                                    var material_selector = $(this);
                                                                    load_material_unit(material_selector, new_row)
                                                                });

                                                                new_row.find('select').select2({ width: "100%" });

                                                                new_row.find('.row_remover').click(function () {
                                                                    var table = $(this).closest('table');
                                                                    $(this).closest('tr').remove();
                                                                    calculate_table_total_amount(table)
                                                                });
                                                                initialize_common_js();
                                                            });
                                                            $(this).attr('initialized', 'true');
                                                        }
                                                    });

                                                    modal.find('.asset_row_adder').each(function () {
                                                        if ($(this).attr('initialized') != 'true') {
                                                            $(this).click(function () {
                                                                var tbody = $(this).closest('.row').find('tbody');
                                                                var new_row = tbody.closest('table').find('.asset_row_template').clone().removeAttr('style')
                                                                    .removeClass('asset_row_template').addClass('artificial_row').appendTo(tbody);

                                                                new_row.find('.number_format').priceFormat();

                                                                initialize_form_amount_calculator(new_row, 2);

                                                                new_row.delegate(' input[name="rate"],  input[name="quantity"]', 'change keyup', function () {
                                                                    calculate_table_total_amount(new_row.closest('table'));
                                                                });

                                                                new_row.find('select').select2({ width: "100%" });

                                                                new_row.find('.row_remover').click(function () {
                                                                    var table = $(this).closest('table');
                                                                    $(this).closest('tr').remove();
                                                                    calculate_table_total_amount(table)
                                                                });
                                                                initialize_common_js();
                                                            });
                                                            $(this).attr('initialized', 'true');
                                                        }
                                                    });

                                                    modal.find('.receive_delivery').each(function () {
                                                        var button = $(this);
                                                        button.unbind().bind('click', function () {
                                                            if (button.attr('initialized') != 'true') {
                                                                var modal = button.closest('.modal'); var receiving_sub_location_id = modal.find('select[name="receiving_sub_location_id"]').val();
                                                                var receiving_sub_location_id = modal.find('select[name="receiving_sub_location_id"]').val();
                                                                var project_id = modal.find('select[name="project_id"]').val();
                                                                var receive_date = modal.find('input[name="receive_date"]').val();
                                                                var location_id = modal.find('input[name="location_id"]').val();
                                                                var item_types = new Array(), item_ids = new Array(), quantities = new Array(),
                                                                    rejected_quantities = new Array(), prices = new Array(), remarks = new Array(), i = 0, error = 0;
                                                                var tbody = modal.find('tbody');

                                                                tbody.find('input[name="quantity"]').each(function () {
                                                                    var quantity = $(this).val();
                                                                    var row = $(this).closest('tr');
                                                                    var item_id = row.find('select[name="item_id"]').val(), item_type;
                                                                    if (item_id != '') {
                                                                        quantities[i] = quantity;
                                                                        rejected_quantities[i] = row.find('input[name="rejected_quantity"]').val();
                                                                        item_types[i] = item_type = row.find('input[name="item_type"]').val();
                                                                        prices[i] = parseFloat(row.find('input[name="rate"]').unmask());
                                                                        item_ids[i] = item_id;
                                                                        remarks[i] = row.find('textarea[name="remarks"]').val();
                                                                        i++;
                                                                    }
                                                                });

                                                                if (receive_date != '' && receiving_sub_location_id != '') {
                                                                    modal.modal('hide');
                                                                    var comments = modal.find('textarea[name="comments"]').val();
                                                                    start_spinner();
                                                                    $.post(
                                                                        base_url + "procurements/receive_unordered_items/",
                                                                        {
                                                                            project_id: project_id,
                                                                            location_id: location_id,
                                                                            rejected_quantities: rejected_quantities,
                                                                            item_types: item_types,
                                                                            item_ids: item_ids,
                                                                            receiving_sub_location_id: receiving_sub_location_id,
                                                                            quantities: quantities,
                                                                            prices: prices,
                                                                            receive_date: receive_date,
                                                                            remarks: remarks,
                                                                            comments: comments
                                                                        }, function (data) {
                                                                            toast('success', 'Delivery received Successfuly');
                                                                            modal.find('form')[0].reset();
                                                                            modal.find('.unit_display, .total_amount_display').html('');
                                                                            modal.closest('.box').find('#location_grns_table').DataTable().draw('page');
                                                                            initialize_common_js();
                                                                        }
                                                                    ).complete(function () {
                                                                        stop_spinner();
                                                                    });
                                                                }

                                                                button.attr('initialized', 'true');
                                                            }
                                                        });
                                                    });
                                                });
                                                modal.attr('initialized', 'true');
                                            }
                                        });
                                    }
                                });
                                table.attr('datatable_initialized', true);
                            } else {
                                table.DataTable().draw('page');
                            }
                        });

                    });

                    $('a[href="#location_sales"]').on('shown.bs.tab', function (e) {
                        $('#sales_table').each(function () {
                            draw_sales_table($(this), 'location', location_id);
                        });

                    });

                    $('a[href="#location_purchase_orders"]').on('shown.bs.tab', function (e) {
                        $('#location_purchase_orders_table').each(function () {
                            draw_purchase_orders_table($(this));
                        });
                    });

                    $('a[href="#location_sub_locations"]').on('shown.bs.tab', function (e) {
                        load_location_sub_locations();

                        initialize_opening_stock_form();
                    });

                    $('a[href="#location_reports"]').on('shown.bs.tab', function (e) {
                        var tab = $($(this).attr('href'));
                        var form = tab.find('form');
                        form.find('select[name="report_type"]').change(function () {
                            var report_type = $(this).val();
                            var material_selector = form.find('select[name="material_id"]');
                            var sub_location_selector = form.find('select[name="sub_location_id"]');
                            var material_category_selector = form.find('select[name="category_id"]');
                            var asset_group_selector = form.find('select[name="asset_group_id"]');
                            var material_selector_form_group = material_selector.closest('.form-group');
                            var sub_location_selector_form_group = sub_location_selector.closest('.form-group');
                            var material_category_selector_form_group = material_category_selector.closest('.form-group');
                            var asset_group_selector_form_group = asset_group_selector.closest('.form-group');
                            if (report_type == 'location_material_item_movement' || report_type == 'location_material_item_availability') {
                                if (material_selector.html().trim() == '') {
                                    start_spinner();
                                    $.post(
                                        base_url + "inventory/load_material_item_movement_material_options",
                                        {
                                            location_id: form.find('input[name="location_id"]').val()
                                        }, function (data) {
                                            material_selector.html(data);
                                            stop_spinner();
                                        }
                                    );
                                }
                                material_selector_form_group.show();
                                material_category_selector_form_group.hide();
                                sub_location_selector_form_group.show();
                                asset_group_selector_form_group.hide();
                            } else if (report_type == 'location_material_balance') {
                                material_category_selector_form_group.show();
                                asset_group_selector_form_group.hide();
                                sub_location_selector_form_group.show();
                                material_selector_form_group.hide();
                            } else if (report_type == 'location_asset_stock' || report_type == 'location_asset_movement') {
                                asset_group_selector_form_group.show();
                                material_category_selector_form_group.hide();
                                sub_location_selector_form_group.show();
                                material_selector_form_group.hide();
                            } else if (report_type == 'location_material_movement') {
                                asset_group_selector_form_group.hide();
                                material_category_selector_form_group.show();
                                sub_location_selector_form_group.show();
                                material_selector_form_group.hide();
                            } else if (report_type == 'material_item_availability') {
                                material_selector_form_group.show();
                                material_category_selector_form_group.hide();
                                sub_location_selector_form_group.hide();
                                asset_group_selector_form_group.hide();
                            } else if (report_type == 'location_material_disposal') {
                                material_selector_form_group.hide();
                                material_category_selector_form_group.hide();
                                asset_group_selector_form_group.hide();
                            }  else {
                                material_category_selector_form_group.hide();
                                asset_group_selector_form_group.hide();
                                sub_location_selector_form_group.show();
                                material_selector_form_group.show();
                            }
                        });

                        $('#generate_location_report').off('click').on('click', function () {
                            var report_type = form.find('select[name="report_type"]').val();
                            var material_id = form.find('select[name="material_id"]').val();
                            var category_id = form.find('select[name="category_id"]').val();
                            var asset_group_id = form.find('select[name="asset_group_id"]').val();
                            var project_id = form.find('select[name="project_id"]').val();
                            if ((report_type != 'location_item_movement' && report_type != 'location_item_availability') || material_id.trim() != '') {
                                start_spinner();
                                $.post(
                                    base_url + "inventory/location_reports",
                                    {
                                        report_type: report_type,
                                        category_id: category_id,
                                        location_id: form.find('input[name="location_id"]').val(),
                                        sub_location_id: form.find('select[name="sub_location_id"]').val(),
                                        project_id: project_id,
                                        material_id: material_id,
                                        asset_group_id: asset_group_id,
                                        from: form.find('input[name="from"]').val(),
                                        to: form.find('input[name="to"]').val()
                                    }, function (data) {
                                        $('#location_report_container').html(data);
                                    }
                                ).complete(function () {
                                    stop_spinner();
                                });
                            }
                        });
                    });

                    initialize_common_js();
                }
            });
            table.attr('dataTable_initialized', 'true');
        } else {
            table.DataTable().draw('page');
        }

        $('a[href="#location_material_stock"], a[href="#location_material"]').on('shown.bs.tab', function (e) {
            var tab_pane = $($(this).attr('href'));
            tab_pane.find('#location_material_stock_table').DataTable().draw('page');
        });
    });
}

function draw_sales_table(table, sales_for, id) {
    if (table.attr('initialized') != 'true')
        table.DataTable({
            "order": [[1, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "inventory/stock_sales_list/" + sales_for + "/" + id,
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'> No matching sales found</div>",
                "emptyTable": "<div class='alert alert-info'> No sales found</div>"
            },
            "drawCallback": function () {

                table.find('td:last-child').attr('nowrap', 'nowrap');

                $('.location_sales_form').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        modal.on('show.bs.modal', function (e) {
                            var tbody = modal.find('tbody');
                            tbody.find('select').select2({ width: "100%" });
                            modal.find('tbody select[name="source_sub_location_id"]').each(function () {
                                var selector = $(this);
                                selector.change(function () {
                                    load_sub_location_available_material_options(selector, 'tr');
                                });
                            });

                            modal.find('tbody select[name="material_id"]').each(function () {
                                var selector = $(this);
                                var project_field = selector.closest('.modal').find('select[name="project_id"]');
                                validate_sub_store_material_quantity(selector, 'tr', project_field.val());
                                selector.change(function () {
                                    if (selector.val() != '') {
                                        load_material_unit(selector, ' tr ');
                                        validate_sub_store_material_quantity(selector, 'tr', project_field.val());
                                    } else {
                                        selector.closest('tr').find('.unit_display').html('');
                                        selector.closest('tr').find('input[name="available_quantity"],input[name="quantity"]').val('');
                                    }
                                });
                            });

                            modal.find('select[name="project_id"]').change(function () {
                                var project_id = $(this).val();
                                modal.find('tbody select[name="material_id"]').val('').change();
                            });


                            /*Sales Material row adder*/
                            modal.find('.sales_material_row_adder').each(function () {
                                if ($(this).attr('initialized') != 'true') {
                                    $(this).click(function () {
                                        var tbody = $(this).closest('table').find('tbody');
                                        var new_row = tbody.closest('table').find('.sales_material_row_template').clone().removeAttr('style')
                                            .removeClass('sales_material_row_template').addClass('sales_artificial_row').appendTo(tbody);

                                        new_row.find('.sales_row_remover').click(function () {
                                            $(this).closest('tr').remove();
                                        });

                                        new_row.find('select[name="source_sub_location_id"]').change(function () {
                                            load_sub_location_available_material_options($(this), 'tr');
                                        });

                                        new_row.find(' select[name="material_id"]').each(function () {
                                            var selector = $(this);
                                            selector.change(function () {
                                                var project_id = selector.closest('.modal').find('select[name="project_id"]').val();
                                                if ($(this).val() != '') {
                                                    load_material_unit($(this), ' tr ');
                                                    validate_sub_store_material_quantity($(this), 'tr', project_id);
                                                } else {
                                                    new_row.find('.unit_display').html('');
                                                    new_row.find('input[name="available_quantity"],input[name="quantity"]').val('');
                                                }
                                            });
                                        });

                                        new_row.find('select').select2({ width: "290px" });
                                        initialize_common_js();
                                    });
                                    $(this).attr('initialized', 'true');
                                }
                            });

                            /*Sales Asset row adder*/
                            modal.find('.sales_asset_row_adder').each(function () {
                                if ($(this).attr('initialized') != 'true') {
                                    $(this).click(function () {
                                        var tbody = $(this).closest('table').find('tbody');
                                        var new_row = tbody.closest('table').find('.sales_asset_row_template').clone().removeAttr('style')
                                            .removeClass('sales_asset_row_template').addClass('sales_artificial_row').appendTo(tbody);

                                        new_row.find('.sales_row_remover').click(function () {
                                            $(this).closest('tr').remove();
                                        });

                                        new_row.find('select[name="source_sub_location_id"]').change(function () {
                                            load_sub_location_available_assets_options($(this));
                                        });

                                        new_row.find('select').select2({ width: "290px" });
                                        initialize_common_js();
                                    });
                                    $(this).attr('initialized', 'true');
                                }
                            });

                            modal.find('.sales_row_remover').click(function () {
                                $(this).closest('tr').remove();
                            });
                        });

                        modal.attr('initialized', 'true');
                    }

                    modal.find('.save_location_sales').each(function () {
                        var button = $(this);
                        if (button.attr('active') != 'true') {
                            button.click(function () {
                                var modal = button.closest('.modal');
                                var sale_date = modal.find('input[name="sale_date"]').val();
                                var stakeholder_id = modal.find('select[name="stakeholder_id"]').val();
                                var project_id = modal.find('select[name="project_id"]').val();
                                var location_id = modal.find('input[name="location_id"]').val();
                                var reference = modal.find('input[name="reference"]').val();
                                var currency_id = modal.find('select[name="currency_id"]').val();
                                var comments = modal.find('textarea[name="comments"]').val();
                                var i = 0;

                                var source_sub_location_ids = new Array(), material_item_ids = new Array(), asset_ids = new Array(), item_types = new Array(),
                                    quantities = new Array(), remarks = new Array(), prices = new Array();
                                var tbody = modal.find('tbody');
                                var quantity,
                                    material_id,
                                    error = 0;
                                tbody.find('input[name="item_type"]').each(function () {
                                    var item_type = $(this).val();
                                    var row = $(this).closest('tr');
                                    material_id = tbody.find('select[name="material_id"]').val();
                                    quantity = item_type == 'material' ? parseFloat(row.find('input[name="quantity"]').val()) : 503;

                                    var id = item_type == 'material' ? row.find('select[name="material_id"]').val() : row.find('select[name=asset_id]').val();
                                    var price = parseFloat(row.find('input[name="price"]').unmask());
                                    if (id != '' && quantity != '' && price > 0) {
                                        quantities[i] = quantity;
                                        item_types[i] = item_type;
                                        prices[i] = price;
                                        source_sub_location_ids[i] = row.find('select[name="source_sub_location_id"]').val();
                                        if (item_type == 'asset') {
                                            asset_ids[i] = id;
                                        } else {
                                            material_item_ids[i] = id;
                                        }
                                        remarks[i] = row.find('textarea[name="remarks"]').val()

                                        i++;
                                    } else {
                                        error++;
                                    }
                                });

                                if (stakeholder_id != '' && sale_date != '' && location_id != '' && source_sub_location_ids.length > 0 && error == 0) {
                                    modal.modal('hide');
                                    start_spinner();
                                    $.post(
                                        base_url + "inventory/save_location_sales/",
                                        {
                                            location_id: location_id,
                                            stock_sale_id: modal.find('input[name="stock_sale_id"]').val(),
                                            sale_date: sale_date,
                                            currency_id: currency_id,
                                            stakeholder_id: stakeholder_id,
                                            reference: reference,
                                            project_id: project_id,
                                            comments: comments,
                                            prices: prices,
                                            item_types: item_types,
                                            asset_ids: asset_ids,
                                            quantities: quantities,
                                            material_item_ids: material_item_ids,
                                            source_sub_location_ids: source_sub_location_ids,
                                            remarks: remarks
                                        }, function (data) {

                                            modal.find('form')[0].reset();
                                            tbody.find('.sales_artificial_row').remove();
                                            initialize_common_js();
                                        }
                                    ).complete(function () {
                                        modal.find('form')[0].reset();
                                        tbody.find('.sales_artificial_row').remove();
                                        table.DataTable().draw('page');
                                        initialize_common_js();
                                        stop_spinner();
                                    });
                                } else {
                                    display_form_fields_error();
                                }
                            });
                            button.attr('active', 'true');
                        }

                    });

                });

                $('.delete_sales_record').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var sale_id = $(this).attr('sale_id');
                            $.confirm({
                                title: 'Delete Stock Sale No. ' + sale_id,
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger btn-xs',
                                        action: function () {
                                            $.post(
                                                base_url + "Inventory/delete_location_sales",
                                                {
                                                    sale_id: sale_id
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                }
                                            ).complete();
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default btn-xs'
                                    }
                                }
                            });
                        });
                    } else {
                        button.attr('intialized', 'true');
                    }
                });

                $('.save_stock_sales_invoice_form').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');

                            var sales_id = modal.find('input[name="sales_id"]').val();
                            var sales_invoiced_date = modal.find('input[name="sales_invoiced_date"]').val();
                            var vat_percentage = modal.find('input[name="vat_percentage"]').val();
                            var remarks = modal.find('textarea[name="remarks"]').val();
                            if (sales_id != '' && sales_invoiced_date != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "Inventory/save_stock_sales_invoice",
                                    {
                                        sales_id: sales_id,
                                        sales_invoiced_date: sales_invoiced_date,
                                        vat_percentage: vat_percentage,
                                        remarks: remarks
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        stop_spinner();
                                        table.DataTable().draw('page');
                                        toast('success', 'Stock Sale Invoice saved!');
                                    }
                                )

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                initialize_common_js();

            }
        });
    table.attr('initialized', 'true');
}

initialize_location_material_stock();

function check_material_opening_stock_selected_material(select_element) {
    select_element.change(function () {
        select_element.closest('tbody').find('select[name="item_id"]').each(function () {
            $(this).attr('active', 'false');
            select_element.attr('active', 'true');
            if ($(this).attr('active') != 'true' && $(this).val() == select_element.val() && $(this).val() != '') {
                select_element.val('').change();
            }
        });
    });
}

function initialize_opening_stock_form() {

    $('.opening_stock_form').on('show.bs.modal', function (e) {
        var modal = $(this);

        load_sub_location_opening_stock_material_options($(this).find('select[name="project_id"]'));

        if ($(this).attr('loaded') != 'true') {
            modal.find('tbody tr').each(function () {
                var selected_row = $(this);
                selected_row.find('select').select2({ width: "100%" });
            });

            $(this).find('select[name="project_id"]').change(function () {
                var select_element = $(this);
                load_sub_location_opening_stock_material_options(select_element);
                initialize_common_js();
            });

            $(this).find('select[name="item_id"]').change(function () {
                var select_element = $(this);
                check_material_opening_stock_selected_material(select_element);
            });

            $(this).find('table').each(function () {

                var table = $(this);

                var row_template = table.find('.row_template');
                if (row_template.attr('initialized') != 'true') {
                    var tbody = table.find('tbody');

                    table.find('.row_adder').click(function () {
                        var new_row = row_template.clone().removeAttr('style')
                            .removeClass('row_template').addClass('artificial_row').appendTo(tbody);

                        var material_selector = new_row.find('select[name="item_id"]');
                        material_selector.select2({ width: "100%" });
                        material_selector.change(function () {
                            load_material_unit($(this), 'tr');
                        });
                        check_material_opening_stock_selected_material(material_selector);
                        new_row.find('.row_remover').click(function () {
                            $(this).closest('tr').remove();
                        });
                        initialize_common_js();
                        row_template.attr('initialized', 'true');
                    });
                }
            });

            modal.find('.material_selector').change(function () {
                load_material_unit($(this), 'tr');
            });

            $(this).attr('loaded', 'true');
        }
    });
}

function load_sub_location_opening_stock_material_options(select_element) {
    start_spinner();
    var project_id = select_element.val();
    var form_container = select_element.closest('form');

    var sub_location_id = select_element.attr('sub_location_id');

    start_spinner();
    $.post(
        base_url + "inventory/load_sub_location_opening_stock_material_options",
        {
            project_id: project_id,
            sub_location_id: sub_location_id
        }, function (data) {
            var table = form_container.find('table');

            table.find(' select[name="item_id"]').each(function () {
                $(this).html(data);
            });

            table.find('tbody select[name="item_id"]').each(function () {
                $(this).change();
            });
        }
    ).complete(function () {
        stop_spinner();
    });

}

function save_material_opening_stock(button) {
    var modal = button.closest('.modal');
    var project_id = modal.find('select[name="project_id"]').val();
    var date = modal.find('input[name="date"]').val();

    var quantities = new Array(), item_ids = new Array(), prices = new Array(), remarks = new Array(), i = 0;
    modal.find('tbody').find('input[name="quantity"]').each(function () {
        var quantity = parseFloat($(this).val());
        var row = $(this).closest('tr');
        var item_id = row.find('select[name="item_id"]').val();
        if (quantity > 0 && item_id != null) {
            quantities[i] = quantity;
            item_ids[i] = item_id;
            prices[i] = row.find('input[name="rate"]').unmask();
            remarks[i] = row.find('textarea[name="remarks"]').val();
            i++;
        }
    });

    if (date != '' && quantities.length > 0 && prices.length > 0) {
        modal.modal('hide');
        var sub_location_id = modal.find('select[name="project_id"]').attr('sub_location_id');

        $.post(
            base_url + "inventory/save_material_opening_stock/",
            {
                project_id: project_id,
                quantities: quantities,
                date: date,
                sub_location_id: sub_location_id,
                item_ids: item_ids,
                prices: prices,
                remarks: remarks
            }, function () {
                modal.find('form')[0].reset();
                modal.find('.artificial_row').remove();
                modal.closest('.box').find('.sub_location_material_stock').DataTable().draw('page');
            }
        );
    } else {
        display_form_fields_error();
    }
}

function validate_sub_store_material_quantity(select_element, container, project_id) {
    var form_container = select_element.closest(container);
    var material_selector = form_container.find('select[name="material_id"]');
    var material_id = material_selector.val();
    var sub_location_id = form_container.find('select[name="source_sub_location_id"]').val();
    var project_id_field = container == 'tr' ? 'select[name="project_id"]' : 'input[name="project_id"]';
    project_id = typeof project_id !== 'undefined' ? project_id : form_container.find(project_id_field).val();
    var input_element = form_container.find('input[name="quantity"]');
    var form = form_container.closest('form');
    var available_quantity_field = form_container.find('input[name="available_quantity"]');
    if (material_id != '' && sub_location_id != '') {
        project_id = project_id != '' ? project_id : null;
        start_spinner();
        $.post(
            base_url + "inventory/validate_sub_store_material_quantity",
            {
                project_id: project_id,
                material_id: material_id,
                sub_location_id: sub_location_id
            }, function (data) {
                data = parseFloat(data);
                var previous_quantity = parseFloat(input_element.attr('previous_quantity'));
                previous_quantity = !isNaN(previous_quantity) ? previous_quantity : 0;
                data = data + previous_quantity;
                input_element.attr('available_quantity', data);
                available_quantity_field.val((parseFloat(data)));
                calculate_allowed_material_quantity(input_element, false, container);
                load_material_average_price(material_selector, container, project_id);
                input_element.keyup(function () {
                    calculate_allowed_material_quantity(input_element, true, container);
                });
            }
        ).complete(function () {
            stop_spinner();
        });
    } else {
        input_element.val('');
        available_quantity_field.val('')
    }
}

function calculate_allowed_material_quantity(input_element, typed, container) {

    var allowed_amount = parseFloat(input_element.attr('available_quantity'));

    var form_container = input_element.closest(container);

    var material_id = form_container.find('select[name="material_id"]').val();
    var sub_location_id = form_container.find('select[name="source_sub_location_id"]').val();

    var current_quantity = input_element.val();
    current_quantity = current_quantity != '' ? parseFloat(current_quantity) : 0;
    if (container == 'tr') {
        var project_id = form_container.find('select[name="project_id"]').val();
        input_element.closest('form').find('select[name="material_id"]').each(function () {
            var row = $(this).closest('tr');
            var row_sub_location_id = row.find('select[name="source_sub_location_id"]').val();
            var row_project_id = row.find('select[name="project_id"]').val();
            var row_quantity = row.find('input[name="quantity"]').val();
            row_quantity = row_quantity != '' ? parseFloat(row_quantity) : 0;
            if (material_id != '' && material_id == $(this).val() && row_sub_location_id == sub_location_id && row_project_id == project_id) {
                allowed_amount -= row_quantity;
            }
        });

        allowed_amount += parseFloat(current_quantity);
    } else {
        allowed_amount += parseFloat(input_element.attr('previous_quantity'));
    }

    if (current_quantity > allowed_amount) {
        toast('error', 'The quantity ' + current_quantity + ' you entered exceeds the available quantity of ' + allowed_amount);
        input_element.val(allowed_amount);
    }

    if (!typed && container == 'tr') {
        input_element.val(current_quantity);
    }

}

function load_sub_location_available_material_options(select_element, container) {
    var source_sub_location_id = select_element.val();
    var material_selector = select_element.closest(container).find('select[name="material_id"]');

    if (source_sub_location_id != '') {
        start_spinner();
        $.post(
            base_url + "inventory/load_sub_location_available_material_options",
            {
                source_sub_location_id: source_sub_location_id
            }, function (data) {
                material_selector.html(data).select2("val", "");
            }
        ).complete(function () {
            stop_spinner();
        });
    } else {
        material_selector.html('').select2("val", "");
    }
}

function load_sub_location_material_transfer_project_options(material_selector) {
    start_spinner();
    var row = material_selector.closest('tr');
    var material_id = material_selector.val();
    var sub_location_id = row.find('select[name="source_sub_location_id"]').val();
    $.post(
        base_url + "inventory/load_sub_location_material_transfer_project_options",
        {
            material_item_id: material_id,
            sub_location_id: sub_location_id
        }, function (data) {
            var project_selector = row.find('select[name="project_id"]');
            project_selector.html(data);
            project_selector.select2('val', '');

            if (project_selector.attr('initialized') != 'true') {
                project_selector.change(function () {
                    validate_sub_store_material_quantity(project_selector, 'tr');
                    load_material_average_price(project_selector.closest('tr').find('select[name="material_id"]'), 'tr');
                });
                project_selector.attr('initialized', 'true');
            }
        }
    ).complete(function () {
        stop_spinner();
    });
}

function load_sub_location_available_assets_options(source_sub_location, container) {
    var container = typeof container !== 'undefined' && container !== '' ? container : 'tr';
    var project_id = source_sub_location.closest('.modal').find('select[name="project_id"]').val();
    var container = typeof container !== 'undefined' && container !== '' ? container : 'tr';
    var select_element = source_sub_location;
    var source_sub_location_id = select_element.val();
    var asset_selector = select_element.closest(container).find('select[name="asset_id"]');
    if (source_sub_location_id != '') {
        start_spinner();
        $.post(
            base_url + "assets/location_available_stock_options/",
            {
                id: source_sub_location_id,
                level: 'sub_location',
                project_id: project_id
            }, function (data) {
                asset_selector.html(data).select2();
                stop_spinner();
            }
        );
    } else {
        asset_selector.html('');
    }
};

function initialize_material_movement_forms() {
    $('.internal_material_transfer_form, .external_material_transfer_form, .material_disposal_form, .material_cost_center_assignment_form').each(function () {
        var modal = $(this);
        if (modal.attr('initialized') != 'true') {
            modal.on('show.bs.modal', function (e) {

                var project_id = modal.find('select[name="project_id"]').val();

                if ($(this).hasClass('external_material_transfer_form') && $(this).attr('loaded') != 'true') {
                    var source_id = $(this).attr('location_id');
                    var destination_id = $(this).attr('destination_id');

                    $.post(
                        base_url + "inventory/load_external_material_form_requirements/",
                        {
                            source_id: source_id,
                            destination_id: destination_id
                        }, function (data) {
                            modal.find('select[name="destination_location_id"]').html(data.destination_options).addClass('searchable').select2();
                        },
                        'JSON'
                    );

                    modal.find('.edit_row select[name="material_id"]').each(function () {
                        validate_sub_store_material_quantity($(this), 'tr', project_id);
                    });
                }

                modal.find('select[name="source_sub_location_id"]').each(function () {
                    var select_element = $(this);
                    if (select_element.attr('initialized') != 'true') {
                        select_element.change(function () {
                            load_sub_location_available_material_options(select_element, 'tr');
                        });
                        select_element.attr('initialized', 'true');
                    }
                });

                modal.find('tbody tr').each(function () {
                    var selected_row = $(this);
                    selected_row.find('select').select2({ width: "100%" });
                });

                modal.find('select[name="project_id"]').change(function () {
                    modal.find('tbody select[name="source_sub_location_id"]').each(function () {
                        var select_element = $(this);
                        if (select_element.closest('tr').find('input[name="item_type"]').val() == 'material') {
                            load_sub_location_available_material_options(select_element, 'tr');
                        } else {
                            load_sub_location_available_assets_options(select_element);
                        }
                    });
                });

                modal.find('select[name="material_id"]').change(function () {
                    if ($(this).val() != '') {
                        load_material_unit($(this), ' tr ');
                        validate_sub_store_material_quantity($(this), 'tr', modal.find('select[name="project_id"]').val());
                    } else {
                        $(this).closest('tr').find('.unit_display').html('');
                        $(this).closest('tr').find('input[name="available_quantity"],input[name="quantity"]').val('');
                    }
                });

                modal.find('.material_row_adder').each(function () {
                    if ($(this).attr('initialized') != 'true') {
                        $(this).click(function () {
                            var tbody = $(this).closest('table').find('tbody');
                            var new_row = tbody.closest('table').find('.material_row_template').clone().removeAttr('style')
                                .removeClass('material_row_template').addClass('artificial_row').appendTo(tbody);

                            new_row.find('select').select2({ width: "100%" });
                            new_row.find('select[name="source_sub_location_id"]').change(function () {
                                var select_element = $(this);
                                load_sub_location_available_material_options(select_element, 'tr');
                            });
                            new_row.find('select[name="material_id"]').change(function () {
                                if ($(this).val() != '') {
                                    load_material_unit($(this), ' tr ');
                                    validate_sub_store_material_quantity($(this), 'tr', modal.find('select[name="project_id"]').val());
                                } else {
                                    $(this).closest('tr').find('.unit_display').html('');
                                    $(this).closest('tr').find('input[name="available_quantity"],input[name="quantity"]').val('');
                                }
                            });
                            new_row.find('.row_remover').click(function () {
                                $(this).closest('tr').remove();
                            });
                            initialize_common_js();
                        });
                        $(this).attr('initialized', 'true');
                    }
                });

                modal.find('.asset_row_adder').each(function () {
                    if ($(this).attr('initialized') != 'true') {
                        $(this).click(function () {
                            var tbody = $(this).closest('table').find('tbody');
                            var new_row = tbody.closest('table').find('.asset_row_template').clone().removeAttr('style')
                                .removeClass('asset_row_template').addClass('artificial_row').appendTo(tbody);

                            new_row.find('select[name="source_sub_location_id"]').change(function () {
                                load_sub_location_available_assets_options($(this));
                            });
                            new_row.find('select[name="asset_id"]').change(function () {
                                if ($(this).val().trim() != '') {
                                    var asset_ids = Array(), current_selector = $(this);
                                    new_row.closest('tbody').find('select[name="asset_id"]').each(function () {
                                        if (current_selector[0] !== $(this)[0]) {
                                            asset_ids.push($(this).val());
                                        }
                                    });
                                    if (asset_ids.indexOf(current_selector.val()) != -1) {
                                        toast('error', 'The selected asset is already on the list');
                                        current_selector.select2('val', '');
                                    }
                                }
                            });

                            new_row.find('select').select2({ width: "100%" });

                            new_row.find('.row_remover').click(function () {
                                $(this).closest('tr').remove();
                            });
                            initialize_common_js();
                        });
                        $(this).attr('initialized', 'true');
                    }
                });

                modal.find('.row_remover').click(function () {
                    $(this).closest('tr').remove();
                });
            });
            modal.attr('initialized', 'true');
        }
    });
}

function save_external_material_transfer(button) {
    var modal = button.closest('.modal');
    var transfer_id = modal.find('input[name="transfer_id"]').val();
    var destination_location_id = modal.find('select[name="destination_location_id"]').val();
    var source_location_id = modal.find('input[name="source_location_id"]').val();
    var project_id = modal.find('select[name="project_id"]').val();
    var driver_name = modal.find('input[name="driver_name"]').val();
    var vehicle_number = modal.find('input[name="vehicle_number"]').val();
    var is_transfer_order = modal.hasClass('transfer_order_transfer_form');
    var requisition_approval_id = is_transfer_order ? modal.find('input[name="requisition_approval_id"]').val() : null;
    var transfer_date = modal.find('input[name="transfer_date"]').val(), i = 0;
    var source_sub_location_ids = new Array(), material_item_ids = new Array(), asset_ids = new Array(), item_types = new Array(), quantities = new Array(), prices = new Array(), remarks = new Array();
    var tbody = modal.find('tbody');
    var available_quantity, error = 0;

    tbody.find('tr input[name="item_type"]').each(function () {
        var item_type = $(this).val();
        var row = $(this).closest('tr');
        var quantity = item_type == 'material' ? parseFloat(row.find('input[name="quantity"]').val()) : 0;
        var id = item_type == 'material' ? row.find('select[name="material_id"]').val() : row.find('select[name="asset_id"]').val();
        available_quantity = item_type == 'material' ? parseFloat(row.find('input[name="quantity"]').attr('available_quantity')) : 0;


        if (id != '' && available_quantity >= quantity && item_type != '') {
            quantities[i] = quantity;
            item_types[i] = item_type;
            prices[i] = row.find('input[name="rate"]').val();
            source_sub_location_ids[i] = row.find('select[name="source_sub_location_id"]').val();
            if (item_type == 'material' && quantity > 0 && prices[i] > 0) {
                material_item_ids[i] = id;
            } else if (item_type == 'asset') {
                asset_ids[i] = id;
            }
            remarks[i] = row.find('textarea[name="remarks"]').val();

        } else {
            error++;
        }
        i++;
    });

    if (source_location_id != '' && transfer_date != '' && destination_location_id != '' && (material_item_ids.length > 0 || asset_ids.length > 0) && error == 0) {
        modal.modal('hide');
        var comments = modal.find('textarea[name="comments"]').val();
        start_spinner();
        $.post(
            base_url + "inventory/save_external_material_transfer/",
            {
                transfer_id: transfer_id,
                destination_location_id: destination_location_id,
                vehicle_number: vehicle_number,
                driver_name: driver_name,
                item_types: item_types,
                asset_ids: asset_ids,
                source_location_id: source_location_id,
                quantities: quantities,
                requisition_approval_id: requisition_approval_id,
                is_transfer_order: is_transfer_order,
                transfer_date: transfer_date,
                prices: prices,
                material_item_ids: material_item_ids,
                project_id: project_id,
                source_sub_location_ids: source_sub_location_ids,
                remarks: remarks,
                comments: comments
            }, function () {
                button.closest('.tab-pane').find('#location_material_transfers_table, #location_transfer_orders_table').DataTable().draw('page');
                modal.find('form')[0].reset();
                if (transfer_id == '') {
                    tbody.find('select[name="material_id"],select[name="asset_id"]').select2();
                }
                tbody.find('.artificial_row').remove();
                tbody.find('.unit_display').html('');
                initialize_common_js();
            }
        ).complete(function () {
            stop_spinner();
        });
    } else {
        display_form_fields_error();
    }
}

function save_internal_material_transfer(button) {
    var modal = button.closest('.modal');
    var transfer_id = modal.find('input[name="transfer_id"]').val();
    var location_id = modal.find('input[name="location_id"]').val();
    var receiver = modal.find('input[name="receiver"]').val();
    var project_id = modal.find('select[name="project_id"]').val();
    var transfer_date = modal.find('input[name="transfer_date"]').val(), i = 0;
    var source_sub_location_ids = new Array(), material_item_ids = new Array(), asset_item_ids = new Array(), item_types = new Array(), quantities = new Array(), remarks = new Array();
    var tbody = modal.find('tbody'), destination_sub_location_ids = new Array();

    var error = 0;
    tbody.find('input[name="item_type"]').each(function () {
        var item_type = $(this).val();
        var row = $(this).closest('tr');
        var quantity = item_type == 'material' ? parseFloat(row.find('input[name="quantity"]').val()) : 503;
        var id = item_type == 'material' ? row.find('select[name="material_id"]').val() : row.find('select[name="asset_id"]').val();
        var source_sub_location_id = row.find('select[name="source_sub_location_id"]').val();
        var destination_sub_location_id = row.find('select[name="destination_sub_location_id"]').val();
        if (id != '' && source_sub_location_id != '' && destination_sub_location_id != '' && quantity > 0 && source_sub_location_id != destination_sub_location_id) {
            item_types[i] = item_type;
            quantities[i] = quantity;
            source_sub_location_ids[i] = source_sub_location_id;
            destination_sub_location_ids[i] = destination_sub_location_id;
            if (item_type == 'material') {
                material_item_ids[i] = id;
            } else {
                asset_item_ids[i] = id;
            }
            remarks[i] = row.find('textarea[name="remarks"]').val();
        } else {
            error++;
        }
        i++;
    });

    if (location_id != '' && transfer_date != '' && quantities.length > 0 && error == 0) {
        modal.modal('hide');
        var comments = modal.find('textarea[name="comments"]').val();
        start_spinner();
        $.post(
            base_url + "inventory/save_internal_material_transfer/",
            {
                transfer_id: transfer_id,
                location_id: location_id,
                item_types: item_types,
                quantities: quantities,
                receiver: receiver,
                transfer_date: transfer_date,
                asset_item_ids: asset_item_ids,
                material_item_ids: material_item_ids,
                project_id: project_id,
                source_sub_location_ids: source_sub_location_ids,
                destination_sub_location_ids: destination_sub_location_ids,
                remarks: remarks,
                comments: comments
            }, function (data) {
                toast('success', data);
                $('#location_material_transfers_table').DataTable().draw('page');
                modal.find('form')[0].reset();
                if (transfer_id == '') {
                    tbody.find('select[name="material_id"], select[name="asset_id"]').select2();
                }
                tbody.find('.artificial_row').remove();
                tbody.find('.unit_display').html('');
                initialize_common_js();
            }
        ).complete(function () {
            stop_spinner();
        });
    } else {
        toast('error', 'Please fill all fields correctly');
    }
}

function receive_external_material_transfer(button) {
    var modal = button.closest('.modal');
    var location_id = modal.find('input[name="location_id"]').val();
    var source_location_id = modal.find('input[name="source_location_id"]').val();
    var receive_date = modal.find('input[name="receive_date"]').val();
    var receiving_sub_location_id = modal.find('select[name="receiving_sub_location_id"]').val();
    if (receiving_sub_location_id != '' && receive_date != '') {
        start_spinner();
        modal.modal('hide');
        var transfer_id = modal.find('input[name="transfer_id"]').val();
        var comments = modal.find('textarea[name="comments"]').val();
        var error = 0, material_ids = new Array(), project_ids = new Array(), asset_ids = new Array(), item_types = new Array(), quantities = new Array(), prices = new Array(), remarks = new Array(), i = 0;
        var tbody = modal.find('tbody');
        tbody.find('input[name="item_type"]').each(function () {
            var item_type = $(this).val();
            var row = $(this).closest('tr');
            var quantity = item_type == 'material' ? parseFloat(row.find('input[name="quantity"]').val()) : 503;
            var id = item_type == 'material' ? row.find('input[name="material_id"]').val() : row.find('input[name="asset_id"]').val();

            if (id != '' && quantity != '') {
                quantities[i] = quantity;
                item_types[i] = item_type;
                project_ids[i] = row.find('input[name="project_id"]').val();
                prices[i] = row.find('input[name="rate"]').val();
                if (item_type == 'material') {
                    material_ids[i] = id;
                } else if (item_type == 'asset') {
                    if (row.find('input[name="asset_id"]').is(":checked")) {
                        asset_ids[i] = id;
                    }
                }
                remarks[i] = row.find('textarea[name="remarks"]').val();

            } else {
                error++;
            }
            i++;
        });


        $.post(
            base_url + "inventory/receive_external_material_transfer",
            {
                transfer_id: transfer_id,
                location_id: location_id,
                source_location_id: source_location_id,
                receiving_sub_location_id: receiving_sub_location_id,
                receive_date: receive_date,
                project_ids: project_ids,
                material_ids: material_ids,
                item_types: item_types,
                asset_ids: asset_ids,
                quantities: quantities,
                prices: prices,
                remarks: remarks,
                comments: comments
            }
        ).complete(function () {
            stop_spinner();
            toast('success', 'Transaction Submitted Successfully');
            $('#location_material_transfers_table').DataTable().draw('page');
        });
    }
}

/***************************************************
 * REQUISITIONS
 ***************************************************/

function save_requisition(button) {
    var modal = button.closest('.modal');
    var requisition_id = modal.find('input[name="requisition_id"]').val();
    var approval_module_id = modal.find('select[name="approval_module_id"]').val();
    var requisition_cost_center_field = modal.find('select[name="requisition_cost_center_id"]');
    var requisition_cost_center_id = requisition_cost_center_field.val();
    var request_date = modal.find('input[name="request_date"]').val();
    var currency_id = modal.find('select[name="currency_id"]').val();
    var required_date = modal.find('input[name="required_date"]').val(), i = 0;
    var cost_center_ids = new Array(), expense_account_ids = new Array(), item_types = new Array(), source_types = Array(),
        source_or_unit_ids = new Array(), unit_ids = new Array(), item_ids = new Array(), quantities = new Array(), rates = new Array();
    var tbody = modal.find('tbody'), error = 0;

    tbody.find('input[name="quantity"]').each(function () {
        var item_id, source_or_unit_id, unit_id, payee;
        var quantity = $(this).val();
        var row = $(this).closest('tr');
        var rate = row.find('input[name="rate"]').unmask();
        var item_type = row.find('input[name="item_type"]').val();
        var source_type;
        if (item_type == 'material') {
            item_id = row.find('select[name="material_id"]').val();
            unit_id = '';
            source_type = row.find('select[name="source_type"]').val();
            source_or_unit_id = source_type == 'cash' ? row.find('input[name="payee"]').val() : row.find('select[name="source_id"]').val();
        } else if (item_type == 'asset') {
            item_id = row.find('select[name="asset_item_id"]').val();
            unit_id = '';
            source_type = row.find('select[name="source_type"]').val();
            source_or_unit_id = source_type == 'cash' ? row.find('input[name="payee"]').val() : row.find('select[name="source_id"]').val();
        } else if (item_type == 'service') {
            item_id = row.find('input[name="service_description"]').val();
            unit_id = row.find('select[name="uom_id"]').val();
            source_type = row.find('select[name="source_type"]').val();
            source_or_unit_id = source_type == 'cash' ? row.find('input[name="payee"]').val() : row.find('select[name="source_id"]').val();
        } else {
            item_id = row.find('input[name="description"]').val();
            unit_id = row.find('select[name="uom_id"]').val();
            source_type = '';
            source_or_unit_id = row.find('input[name="payee"]').val();
        }
        if (parseFloat(quantity) > 0 && parseFloat(rate) > 0 && item_id != '' && (((item_type == 'material' || item_type == 'asset' || (item_type == 'service' && unit_id != '')) && (source_type == 'cash' && source_or_unit_id.trim() != '')) || source_or_unit_id.trim() != '')) {
            quantities[i] = quantity;
            item_types[i] = item_type;
            cost_center_ids[i] = '';
            expense_account_ids[i] = '';
            source_or_unit_ids[i] = source_or_unit_id;
            unit_ids[i] = unit_id;
            source_types[i] = source_type;
            rates[i] = rate;
            item_ids[i] = item_id;
            i++;
        } else {
            error++;
        }
    });

    if (error == 0 && request_date != '' && quantities.length > 0 && approval_module_id.trim() != '' && approval_module_id != '' && requisition_cost_center_id.trim() != '') {
        modal.modal('hide');
        var freight = parseFloat(modal.find('input[name="freight"]').unmask());
        var inspection_and_other_charges = parseFloat(modal.find('input[name="inspection_and_other_charges"]').unmask());
        var vat_priced_po = modal.find('input[name="vat_priced_po"]').val();
        var vat_inclusive;
        if (vat_priced_po == 'true') {
            vat_inclusive = modal.find('input[name="vat_inclusive"]').is(':checked') ? 'VAT PRICED' : 'NULL';
        } else {
            vat_inclusive = modal.find('input[name="vat_inclusive"]').is(':checked') ? 'VAT COMPONENT' : 'NULL';
        }
        var vat_percentage = modal.find('select[name="vat_percentage"]').val();
        var comments = modal.find('textarea[name="comments"]').val();
        var foward_to = modal.find('select[name="foward_to"]').val();
        var status = button.hasClass('suspend_requisition') ? 'INCOMPLETE' : 'PENDING';

        start_spinner();
        $.post(
            base_url + "requisitions/save_requisition/",
            {
                requisition_id: requisition_id,
                approval_module_id: approval_module_id,
                requisition_cost_center_id: requisition_cost_center_id,
                quantities: quantities,
                rates: rates,
                currency_id: currency_id,
                request_date: request_date,
                required_date: required_date,
                item_types: item_types,
                item_ids: item_ids,
                source_or_unit_ids: source_or_unit_ids,
                unit_ids: unit_ids,
                cost_center_ids: cost_center_ids,
                expense_account_ids: expense_account_ids,
                source_types: source_types,
                freight: freight,
                inspection_and_other_charges: inspection_and_other_charges,
                vat_inclusive: vat_inclusive,
                vat_percentage: vat_percentage,
                status: status,
                comments: comments,
                foward_to: foward_to

            }, function (data) {
                modal.find('form')[0].reset();
                tbody.find('.artificial_row').remove();
                requisition_cost_center_field.closest('form-group').hide();
                modal.find('.unit_display, .total_amount_display').html('');
                modal.closest('.box').find('.requisitions_table').DataTable().draw('page');
                initialize_common_js();
            }
        ).complete(function () {
            stop_spinner();
        });
    } else {
        toast('error', 'Please make sure all fields are correctly filled');
    }
}

function initialize_requisition_approval_forms(table) {
    table.find('.requisition_approval_form').each(function () {
        var modal = $(this);
        $(this).on('show.bs.modal', function (e) {
            var material_sources_row_template = modal.find('.material_source_row_template');
            var cash_sources_row_template = modal.find('.cash_source_row_template');
            var items_table = modal.find('table');
            var vat_inclusive = modal.find('input[name="vat_inclusive"]');
            var vat_percentage_selector = modal.find('select[name="vat_percentage"]').val();

            var get_table_total_amount = function () {
                var total_amount = 0;
                items_table.find('tbody input[name="amount"]').each(function () {
                    $(this).priceFormat();
                    var amount = $(this).val();
                    amount = amount != '' ? parseFloat($(this).unmask()) : 0;
                    total_amount += amount;
                });
                return total_amount;
            };

            var calculate_vat_amount = function () {
                var total_table_amount = get_table_total_amount();
                var freight = parseFloat(modal.find('input[name="freight"]').unmask());
                var other_charges = parseFloat(modal.find('input[name="inspection_and_other_charges"]').unmask());
                total_table_amount = !isNaN(total_table_amount) ? total_table_amount : 0;
                freight = !isNaN(freight) ? freight : 0;
                other_charges = !isNaN(other_charges) ? other_charges : 0;
                var overall_total_amount = (total_table_amount + freight + other_charges);
                var vat_percentage = vat_percentage_selector.val();
                var vat_amount = (parseFloat(vat_percentage) / 100) * (overall_total_amount-other_charges);
                var grand_total_amount = parseFloat(overall_total_amount) + parseFloat(vat_amount);
                items_table.find('input[name="vat"]').val((vat_amount).toFixed(2)).priceFormat();
                modal.find('.vat_amount_display').val((vat_amount).toFixed(2)).priceFormat();
                items_table.find('.grand_total_display').html((grand_total_amount).toFixed(2)).priceFormat();
            }


            vat_inclusive.change(function () {
                var total_table_amount = get_table_total_amount();
                var freight = parseFloat(modal.find('input[name="freight"]').unmask());
                var other_charges = parseFloat(modal.find('input[name="inspection_and_other_charges"]').unmask());
                total_table_amount = !isNaN(total_table_amount) ? total_table_amount : 0;
                freight = !isNaN(freight) ? freight : 0;
                other_charges = !isNaN(other_charges) ? other_charges : 0;
                var overall_total_amount = (total_table_amount + freight + other_charges);
                var vat_percentage_selector = modal.find('select[name="vat_percentage"]');
                var vat_percentage_selector_form_group = vat_percentage_selector.closest('.form-group');
                var vat_inclusive = $(this);
                if (vat_inclusive.is(':checked')) {
                    vat_percentage_selector_form_group.show();
                    calculate_vat_amount();
                } else {
                    vat_percentage_selector_form_group.hide();
                    vat_percentage_selector.val(0).trigger('change');
                    items_table.find('input[name="vat"]').val((0).toFixed(2));
                    items_table.find('.grand_total_display').html((overall_total_amount).toFixed(2)).priceFormat();
                }
            });

            modal.find('.sources_table').each(function () {
                var sources_table = $(this);

                sources_table.find('tr').each(function () {
                    initialize_form_amount_calculator($(this), 3);
                });

                var initialize_source_change = function () {
                    var cashbook_options = modal.find('.sources_options_templates select[name="cashbook_options"]').html();
                    var vendor_options = modal.closest('table').find('.sources_options_templates select[name="vendor_options"]').html();
                    var main_location_options = modal.closest('table').find('.sources_options_templates select[name="main_location_options"]').html();
                    sources_table.find('select[name="source_type"]').each(function () {
                        if ($(this).attr('initialized') != 'true') {
                            $(this).change(function () {
                                var source_selector = $(this).closest('tr').find('select[name="source"]');
                                if ($(this).val() == 'cash') {
                                    source_selector.html(cashbook_options).select2('val', '');
                                    source_selector.attr('disabled', 'disabled');
                                } else if ($(this).val() == 'store') {
                                    source_selector.html(main_location_options).select2('val', '');
                                    source_selector.removeAttr('disabled');
                                } else {
                                    source_selector.html(vendor_options).select2('val', '');
                                    source_selector.removeAttr('disabled');
                                }
                            });
                            $(this).attr('initialized', 'true');
                        }
                    });
                };

                initialize_source_change();


                sources_table.find(' .material_source_adder').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        var tbody = button.closest('table').find('tbody');
                        button.click(function () {
                            var new_row = material_sources_row_template.clone().removeAttr('style').removeClass('material_source_row_template').addClass('artificial_row').prependTo(tbody);
                            new_row.find('select[name="source"]').select2();
                            new_row.find('.number_format').priceFormat();
                            initialize_form_amount_calculator(new_row, 3);
                            new_row.find('.row_remover').click(function () {
                                $(this).closest('tr').remove();
                                calculate_vat_amount(vat_inclusive, vat_percentage);
                            });
                            initialize_source_change();
                        });
                        button.attr('initialized', 'true');
                    }
                });

                sources_table.find(' .cash_source_adder').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        var tbody = button.closest('table').find('tbody');
                        button.click(function () {
                            var new_row = cash_sources_row_template.clone().removeAttr('style').removeClass('cash_source_row_template').addClass('artificial_row').prependTo(tbody);
                            new_row.find('select[name="source"]').select2();
                            new_row.find('.number_format').priceFormat();
                            initialize_form_amount_calculator(new_row, 3);
                            new_row.find('.row_remover').click(function () {
                                $(this).closest('tr').remove();
                                calculate_vat_amount(vat_inclusive, vat_percentage);
                            });
                            initialize_source_change();
                        });
                        button.attr('initialized', 'true');
                    }
                });
            });

            modal.find('input[name="set_final"]').change(function () {
                var set_final_checkbox = $(this);
                if (set_final_checkbox.is(':checked')) {
                    modal.find('select[name="forward_to"]').attr('disabled', true);
                } else {
                    modal.find('select[name="forward_to"]').selectedIndex = -1;
                    modal.find('select[name="forward_to"]').attr('disabled', false);
                }

            });

            modal.delegate('  .major_table_tbody input[name="rate"], .major_table_tbody input[name="quantity"], input[name="freight"], input[name="inspection_and_other_charges"], input[name="vat_inclusive"], select[name="vat_percentage"]  ', 'change keyup', function () {
                calculate_vat_amount();
            });

        });
    });
}

function approve_requisition(button) {
    var modal = button.closest('.modal');
    var status = button.hasClass('reject_requisition') ? 'REJECTED' : '';
    var requisition_id = modal.find('input[name="requisition_id"]').val();
    var has_sources = modal.find('input[name="has_sources"]').val();
    var approval_chain_level_id = modal.find('input[name="approval_chain_level_id"]').val();
    var returned_chain_level_id = modal.find('select[name="returned_chain_level_id"]').val();
    var currency_id = modal.find('select[name="currency_id"]').val();
    var approve_date = modal.find('input[name="approve_date"]').val(), i = 0;
    var item_ids = new Array(), expense_account_ids = [], item_types = Array(), quantities = new Array(), source_types = new Array(), sources = new Array(),
        rates = new Array(), remarks = new Array();
    var tbody = modal.find(' .major_table_tbody');

    var error = 0;
    tbody.find('input[name="item_id"]').each(function () {
        var row = $(this).closest('tr');
        var row_index = 0;
        item_ids[i] = $(this).val();
        item_types[i] = row.find('input[name="item_type"]').val();
        expense_account_ids[i] = row.find('select[name="expense_account_id"]').val();
        if (has_sources == 'true') {
            var row_quantities = new Array(), row_rates = new Array(), row_source_types = new Array(), row_currencies = new Array(), row_sources = new Array();
            row.find('.source_approved_quantity').each(function () {
                var source_row = $(this).closest('tr');
                row_quantities[row_index] = $(this).val();
                row_rates[row_index] = source_row.find('input[name="rate"]').unmask();
                row_currencies[row_index] = source_row.find('select[name="currency_id"]').val();
                row_source_types[row_index] = source_row.find('select[name="source_type"]').val();
                if (item_types[i] == 'cash') {
                    row_sources[row_index] = source_row.find('input[name="payee"]').val();
                } else {
                    row_sources[row_index] = row_source_types[row_index] == 'cash' ? source_row.find('input[name="payee"]').val() : source_row.find('select[name="source"]').val();
                }
                if ((row_source_types[row_index] != 'cash' && item_types[i] != 'cash') && (row_sources[row_index] == '' || row_source_types[row_index] == '')) {
                    error++;
                }
                row_index++;
            });

            quantities[i] = row_quantities;
            rates[i] = row_rates;
            sources[i] = row_sources;
            source_types[i] = row_source_types;
        } else {
            item_types[i] = row.find('input[name="item_type"]').val();
            quantities[i] = row.find('input[name="quantity"]').val();
            rates[i] = row.find('input[name="rate"]').unmask();
        }
        i++;
    });


    if (approve_date != '' && error == 0) {
        var freight = modal.find('input[name="freight"]').unmask();
        var inspection_and_other_charges = modal.find('input[name="inspection_and_other_charges"]').unmask();
        var vat_priced_po = modal.find('input[name="vat_priced_po"]').val();
        var vat_inclusive;
        if (vat_priced_po == 'true') {
            vat_inclusive = modal.find('input[name="vat_inclusive"]').is(':checked') ? 'VAT PRICED' : 'NULL';
        } else {
            vat_inclusive = modal.find('input[name="vat_inclusive"]').is(':checked') ? 'VAT COMPONENT' : 'NULL';
        }
        var vat_percentage = modal.find('select[name="vat_percentage"]').val();
        var freight_charges = parseFloat(freight);
        var inspection_charges = parseFloat(inspection_and_other_charges);
        var comments = modal.find('textarea[name="comments"]').val();
        var set_final = modal.find('input[name="set_final"]').is(':checked') ? 1 : null;
        var forward_to = modal.find('select[name="forward_to"]').val();

        var send_data = function () {
            modal.modal('hide');
            start_spinner();
            $.post(
                base_url + "requisitions/approve_requisition/",
                {
                    requisition_id: requisition_id,
                    has_sources: has_sources,
                    approval_chain_level_id: approval_chain_level_id,
                    returned_chain_level_id: returned_chain_level_id,
                    quantities: quantities,
                    rates: rates,
                    currency_id: currency_id,
                    expense_account_ids: expense_account_ids,
                    approve_date: approve_date,
                    item_ids: item_ids,
                    sources: sources,
                    source_types: source_types,
                    item_types: item_types,
                    remarks: remarks,
                    status: status,
                    set_final: set_final,
                    forward_to: forward_to,
                    freight: freight_charges,
                    inspection_and_other_charges: inspection_charges,
                    vat_inclusive: vat_inclusive,
                    vat_percentage: vat_percentage,
                    comments: comments
                }, function (data) {
                    toast('success', 'Your Approval has been submitted');
                    modal.closest('.box').find('.requisitions_table').DataTable().draw('page');
                    initialize_common_js();
                }
            ).complete(function () {
                stop_spinner();
            });
        };

        if (status == 'REJECTED') {
            $.confirm({
                title: 'Reject Requisition No. ' + requisition_id,
                content: 'This action is irreversible! Are you sure?',
                buttons: {
                    confirm: {
                        text: 'Confirm Reject',
                        btnClass: 'btn btn-danger btn-xs',
                        action: function () {
                            send_data();
                        }
                    },
                    cancel: {
                        text: "Cancel",
                        btnClass: 'btn btn-default btn-xs'
                    }
                }
            });
        } else {
            send_data();
        }
    } else {
        display_form_fields_error();
    }
}

function load_project_dropdown_options(select_field) {
    start_spinner();
    $.post(
        base_url + "projects/load_project_dropdown_options",
        {

        }, function (data) {
            var modal = select_field.closest('.modal');
            var material_selector = modal.find('select[name="material_id"]');
            material_selector.html('');
            select_field.html(data).trigger('change');

            if (select_field.attr('project_initialized') != 'true') {
                select_field.change(function () {
                    var module_id = modal.find('select[name="approval_module_id"]').val();
                    if (module_id == '2') {
                        $.post(
                            base_url + "projects/load_project_material_options",
                            {
                                project_id: $(this).val()
                            }, function (data) {
                                material_selector.each(function () {
                                    $(this).html(data).change();
                                });
                            }
                        );
                    }
                });

                select_field.attr('project_initialized', 'true');
            }
            stop_spinner();
        }
    );
}

function load_general_cost_centers_options(select_field) {
    start_spinner();
    $.post(
        base_url + "finance/load_cost_centers_dropdown_options",
        {

        }, function (data) {
            select_field.html(data).trigger('change');
            stop_spinner();
        }
    );
}

function load_material_last_approved_price(material_selector) {
    if (material_selector.attr('load_price_initialized') != 'true') {

        material_selector.change(function () {
            start_spinner();
            var material_item_id = $(this).val();
            var currency_id = material_selector.closest('.modal').find('select[name="currency_id"]').val();
            currency_id = typeof currency_id !== 'undefined' && currency_id !== '' ? currency_id : 1;
            $.post(
                base_url + "inventory/load_material_last_approved_price",
                {
                    currency_id: currency_id,
                    material_item_id: material_item_id
                }, function (data) {
                    material_selector.closest('tr').find('input[name="rate"]').val(data).priceFormat();
                    stop_spinner();
                }
            );
        });
        material_selector.attr('load_price_initialized', 'true');
    }
}

function initialize_requisition_and_order_form() {

    $('.requisition_form, .purchase_order_form, .purchase_order_receive_form, .pre_ordered_purchase_order_form ').on('show.bs.modal', function (e) {
        var modal = $(this);
        var items_table = modal.find('table');
        var vat_inclusive = modal.find('input[name="vat_inclusive"]');
        var vat_percentage_selector = modal.find('select[name="vat_percentage"]');

        var calculate_vat_amount = function () {
            var total_table_amount = parseFloat(items_table.find('.total_amount_display').unmask());
            var freight = parseFloat(modal.find('input[name="freight"]').unmask());
            var other_charges = parseFloat(modal.find('input[name="inspection_and_other_charges"]').unmask());
            total_table_amount = !isNaN(total_table_amount) ? total_table_amount : 0;
            freight = !isNaN(freight) ? freight : 0;
            other_charges = !isNaN(other_charges) ? other_charges : 0;
            var overall_total_amount = (total_table_amount + freight + other_charges);
            var vat_percentage = vat_percentage_selector.val();
            var vat_amount = (parseFloat(vat_percentage) / 100) * (overall_total_amount-other_charges);
            var grand_total_amount = parseFloat(overall_total_amount) + parseFloat(vat_amount);
            items_table.find('input[name="vat"]').val((vat_amount).toFixed(2)).priceFormat();
            modal.find('.vat_amount_display').val((vat_amount).toFixed(2)).priceFormat();
            items_table.find('.grand_total_display').html((grand_total_amount).toFixed(2)).priceFormat();
        };

        if (modal.hasClass('requisition_form')) {

            var check_store_available_stock = function (source_id_selector) {
                var row = source_id_selector.closest('tr');
                var modal = row.closest('.modal');
                if (row.attr('initialized') != 'true') {
                    row.delegate(' select[name="source_id"], select[name="material_id"],select[name="asset_item_id"],  input[name="quantity"] ', 'change keyup', function () {
                        var approval_module_id = modal.find('select[name="approval_module_id"]').val();
                        var source_type = row.find('select[name="source_type"]').val().trim();
                        var source_id = row.find('select[name="source_id"]').val().trim();
                        var item_type = row.find('select[name="asset_item_id"]').length ? 'asset' : 'material';
                        var item_id = item_type == 'material' ? row.find('select[name="material_id"]').val() : row.find('select[name="asset_item_id"]').val();
                        var quantity_field = row.find('input[name="quantity"]');
                        var project_id = modal.find('select[name="requisition_cost_center_id"]').val();

                        var validate_typed_quantity = function () {
                            var available_quantity = parseFloat(quantity_field.attr('available_quantity'));
                            var typed_quantity = parseFloat(quantity_field.val());
                            if (available_quantity < typed_quantity) {
                                toast('error', 'Only ' + available_quantity + ' is available at the selected store');
                                quantity_field.val(available_quantity);
                            }
                        };

                        if (source_type == 'store' && source_id != '' && item_type == 'material' && item_id.trim() != '') {
                            var send_request = $(this).is('select');
                            if (send_request) {
                                start_spinner();
                                $.post(
                                    base_url + "inventory/check_store_available_material_quantity",
                                    {
                                        material_id: item_id,
                                        location_id: source_id,
                                        approval_module_id: approval_module_id,
                                        project_id: project_id
                                    }, function (data) {
                                        toast('info', data + ' of them available at the selected store', 'Info:');
                                        quantity_field.attr('available_quantity', data);
                                        validate_typed_quantity();
                                        stop_spinner();
                                    })
                            } else {
                                validate_typed_quantity();
                            }
                        } else if (source_type == 'store' && source_id != '' && item_type == 'asset' && item_id.trim() != '') {
                            var send_request = $(this).is('select');
                            if (send_request) {
                                start_spinner();
                                $.post(
                                    base_url + "assets/check_store_available_asset_item_quantity",
                                    {
                                        asset_item_id: item_id,
                                        location_id: source_id,
                                        approval_module_id: approval_module_id,
                                        project_id: project_id
                                    }, function (data) {
                                        toast('info', data + ' of them available at the selected store', 'Info:');
                                        quantity_field.attr('available_quantity', data);
                                        validate_typed_quantity();
                                        stop_spinner();
                                    })
                            } else {
                                validate_typed_quantity();
                            }
                        }
                    });
                    row.attr('initialized', 'true');
                }
            };

            var load_level_to_approve_requisition = function (approval_module_id, container) {
                var foward_to_options = container.find('.foward_to_options');
                start_spinner();
                $.post(
                    base_url + "requisitions/load_level_to_approve_requisition",
                    {
                        approval_module_id: approval_module_id
                    }, function (data) {
                        foward_to_options.html(data);
                        stop_spinner();
                    }
                )

            };

            modal.find('tbody select[name="material_id"]').each(function () {
                var select_element = $(this);
                load_material_last_approved_price(select_element);
                select_element.select2({ width: '300px' });
            });

            modal.find('select[name="approval_module_id"]').each(function () {
                var requisition_type_field = $(this);
                if (requisition_type_field.attr('initialized') != 'true') {
                    var requisition_cost_center_field = requisition_type_field.closest('.modal-body').find('select[name="requisition_cost_center_id"]');
                    var general_options = modal.find('select[name="material_id"]:first ').html();

                    requisition_type_field.change(function () {
                        var module_id = requisition_type_field.val();
                        var foward_to_options = modal.find('.foward_to_options');

                        if (module_id == '2') {
                            load_project_dropdown_options(requisition_cost_center_field);
                            modal.find('.cost_center_form_group').show();
                            load_level_to_approve_requisition(module_id, modal);
                        } else if (module_id == '1') {
                            load_general_cost_centers_options(requisition_cost_center_field);
                            modal.find('.cost_center_form_group').hide();
                            modal.find('select[name="material_id"]').html(general_options).trigger('change');
                            load_level_to_approve_requisition(module_id, modal);
                        } else {
                            requisition_cost_center_field.html('');
                            foward_to_options.val('').trigger('change');
                        }
                    });
                    requisition_type_field.attr('initialized', 'true');
                }
            });

            function initialize_source_type(container) {
                container.find('select[name="source_type"]').each(function () {
                    var type_selector = $(this);
                    if (type_selector.attr('initialized') != 'true') {
                        type_selector.change(function () {

                            var source_id_selector = type_selector.closest('tr').find('select[name="source_id"]');
                            var payee_input_div = type_selector.closest('tr').find('.payee_input_div');
                            var source_selector = type_selector.closest('tr').find('.source_selector');
                            var vendor_options = modal.find('select[name="stakeholder_selector_template"]').html();
                            var main_location_options = modal.find('select[name="main_location_selector_template"]').html();
                            var account_options = modal.find('select[name="account_selector_template"]').html();
                            var selected_source = type_selector.val();

                            if (selected_source == 'vendor') {
                                payee_input_div.hide();
                                source_selector.show();
                                source_id_selector.html(vendor_options).val('');
                            } else if (selected_source == 'store') {
                                payee_input_div.hide();
                                source_selector.show();
                                source_id_selector.html(main_location_options).val('');
                                source_id_selector.change(function () {
                                    if (source_id_selector.val().trim() != '') {
                                        check_store_available_stock(source_id_selector);
                                    }
                                });
                            } else if (selected_source == 'cash') {
                                payee_input_div.show();
                                source_selector.hide();
                            }

                            source_id_selector.select2('val', '');
                            type_selector.attr('initialized', 'true');
                        });
                    }
                });
            };

            var row = modal.find('tbody tr');
            initialize_source_type(row);
        }

        var locations_with_particular_item = function (material_selector, container) {
            var tbody = container.closest('tbody');
            var modal = tbody.closest('.modal');

            var item_type = container.find('select[name="asset_item_id"]').length ? 'asset' : 'material';
            var item_id = item_type == 'material' ? container.find('select[name="material_id"]').val() : container.find('select[name="asset_item_id"]').val();

            if (item_id != '') {
                start_spinner();
                $.post(
                    base_url + "inventory/locations_with_particular_item",
                    {
                        item_id: item_id,
                        item_type: item_type

                    }, function (data) {
                        tbody.find('.item_display_availability_row').remove();
                        var temporary_row = container.closest('table').find('.row_display_item_availability').clone().removeAttr('style').removeClass('row_display_item_availability').addClass('item_display_availability_row');
                        temporary_row.find('.item_display').html(data.table_view);
                        container.after(temporary_row);
                        stop_spinner();
                    }, 'json'
                );
            }
        };

        if (modal.hasClass('purchase_order_form')) {
            modal.find('select[name="order_type"]').each(function () {
                var type_selector = $(this);
                if (type_selector.attr('initialized') != 'true') {
                    type_selector.change(function () {
                        if (type_selector.val() == 'project_purchase_order') {
                            modal.find('.project_options_form_group').show();
                            modal.find('.cost_center_options_form_group').hide();
                        } else {
                            modal.find('.project_options_form_group').hide();
                            modal.find('.cost_center_options_form_group').show();
                        }
                        modal.find('select[name="cost_center_id"],select[name="project_id"]').select2('val', '');
                    });
                    type_selector.attr('initialized', 'true');
                }
            });
        }

        vat_inclusive.change(function () {
            var total_table_amount = parseFloat(items_table.find('.total_amount_display').unmask());
            var freight = parseFloat(modal.find('input[name="freight"]').unmask());
            var other_charges = parseFloat(modal.find('input[name="inspection_and_other_charges"]').unmask());
            total_table_amount = !isNaN(total_table_amount) ? total_table_amount : 0;
            freight = !isNaN(freight) ? freight : 0;
            other_charges = !isNaN(other_charges) ? other_charges : 0;
            var overall_total_amount = (total_table_amount + freight + other_charges);
            var vat_percentage_selector = modal.find('select[name="vat_percentage"]');
            var vat_percentage_selector_form_group = vat_percentage_selector.closest('.form-group');
            var vat_inclusive = $(this);
            if (vat_inclusive.is(':checked')) {
                vat_percentage_selector_form_group.show();
                calculate_vat_amount();
            } else {
                vat_percentage_selector_form_group.hide();
                vat_percentage_selector.val(0).trigger('change');
                items_table.find('input[name="vat"]').val((0).toFixed(2));
                items_table.find('.grand_total_display').html((overall_total_amount).toFixed(2)).priceFormat();
            }
        });

        modal.find('tbody select[name="source_id"]').each(function () {
            $(this).select2({ width: '200px' });
        });

        modal.find('tbody tr').each(function () {
            initialize_form_amount_calculator($(this));
            $(this).find('.row_remover').click(function () {
                var table = $(this).closest('table');
                $(this).closest('tr').remove();
                calculate_table_total_amount(table);
                calculate_vat_amount();
            });
        });

        modal.find('tbody select[name="material_id"]').each(function () {
            var select_element = $(this);
            select_element.select2({ width: '300px' });
            select_element.change(function () {
                locations_with_particular_item(select_element, select_element.closest('tr'));
                load_material_unit(select_element, 'tr');
            });
        });

        modal.find('input, select, textarea').each(function () {
            $(this).attr('style', 'min-width :100px !important');
        });

        modal.find('.material_row_adder').each(function () {
            var button = $(this);
            if (button.attr('initialized') != 'true') {
                button.click(function () {
                    var tbody = $(this).closest('.row').find('tbody');
                    var new_row = tbody.closest('table').find('.material_row_template').clone().removeAttr('style').removeClass('material_row_template').addClass('artificial_row').appendTo(tbody);

                    tbody.find('select[name="material_id"]').each(function () {
                        var select_element = $(this);

                        load_material_last_approved_price(select_element);

                    });

                    new_row.find('select[name="material_id"]').each(function () {
                        var select_element = $(this);

                        select_element.select2({ width: '300px' });

                        select_element.change(function () {
                            load_material_unit(select_element, 'tr');
                        });
                    });

                    if (modal.hasClass('requisition_form')) {
                        new_row.find('select[name="source_id"]').each(function () {
                            var select_element = $(this);

                            select_element.select2({ width: '200px' });

                        });

                        new_row.find('select[name="material_id"]').each(function () {
                            var select_element = $(this);

                            select_element.change(function () {
                                locations_with_particular_item($(this), new_row);
                            });
                        });
                        initialize_source_type(new_row);
                    }

                    new_row.find('.row_remover').click(function () {
                        var table = $(this).closest('table');
                        $(this).closest('tr').remove();
                        calculate_table_total_amount(table);
                        calculate_vat_amount();
                    });
                    initialize_form_amount_calculator(new_row);
                    initialize_common_js();
                    new_row.find('.number_format').priceFormat();

                });
                $(this).attr('initialized', 'true');
            }
        });

        modal.find('.asset_row_adder').each(function () {
            var button = $(this);
            if (button.attr('initialized') != 'true') {
                button.click(function () {
                    var tbody = $(this).closest('.row').find('tbody');
                    var new_row = tbody.closest('table').find('.asset_row_template').clone().removeAttr('style').removeClass('asset_row_template').addClass('artificial_row').appendTo(tbody);

                    new_row.find('select[name="asset_item_id"]').each(function () {
                        var select_element = $(this);
                        select_element.select2({ width: '300px' });
                    });

                    if (modal.hasClass('requisition_form')) {
                        new_row.find('select[name="source_id"]').each(function () {
                            var select_element = $(this);

                            select_element.select2({ width: '200px' });

                        });

                        new_row.find('select[name="asset_item_id"]').each(function () {
                            var select_element = $(this);

                            select_element.change(function () {
                                locations_with_particular_item(select_element, new_row);
                            });
                        });

                        initialize_source_type(new_row);
                    }

                    new_row.find('.row_remover').click(function () {
                        var table = $(this).closest('table');
                        $(this).closest('tr').remove();
                        calculate_table_total_amount(table);
                        calculate_vat_amount();
                    });
                    initialize_form_amount_calculator(new_row);
                    initialize_common_js();
                    new_row.find('.number_format').priceFormat();
                });
                $(this).attr('initialized', 'true');
            }
        });

        modal.find('.cash_row_adder').each(function () {
            if ($(this).attr('initialized') != 'true') {
                $(this).click(function () {
                    var tbody = $(this).closest('.row').find('tbody');
                    var new_row = tbody.closest('table').find('.cash_row_template').clone().removeAttr('style')
                        .removeClass('cash_row_template').addClass('artificial_row').appendTo(tbody);

                    new_row.find('select').addClass('searchable');
                    new_row.find('.row_remover').click(function () {
                        var table = $(this).closest('table');
                        $(this).closest('tr').remove();
                        calculate_table_total_amount(table);
                        calculate_vat_amount();
                    });
                    initialize_form_amount_calculator(new_row);
                    initialize_common_js();
                    new_row.find('.number_format').priceFormat();

                });
                $(this).attr('initialized', 'true');
            }
        });

        modal.find('.service_row_adder').each(function () {
            if ($(this).attr('initialized') != 'true') {
                $(this).click(function () {
                    var tbody = $(this).closest('.row').find('tbody');
                    var new_row = tbody.closest('table').find('.service_row_template').clone().removeAttr('style')
                        .removeClass('service_row_template').addClass('artificial_row').appendTo(tbody);

                    new_row.find('select').select2();

                    new_row.find('.row_remover').click(function () {
                        var table = $(this).closest('table');
                        $(this).closest('tr').remove();
                        calculate_table_total_amount(table);
                        calculate_vat_amount();
                    });

                    new_row.find('select[name="source_id"]').each(function () {
                        var select_element = $(this);
                        select_element.select2({ width: '170px' });
                    });

                    if (modal.hasClass('requisition_form')) {
                        initialize_source_type(new_row);
                    }
                    initialize_form_amount_calculator(new_row);
                    initialize_common_js();
                    new_row.find('.number_format').priceFormat();

                });
                $(this).attr('initialized', 'true');
            }
        });

        modal.find('.number_format').priceFormat();

        if (modal.hasClass('purchase_order_receive_form')) {

            var factor_finder = function () {
                var form = modal.find('form');
                var exchange_rate = form.find('input[name="exchange_rate"]').unmask();
                var clearance_charges = form.find('input[name="clearance_charges"]').unmask();
                var total_amount = parseFloat(items_table.find('.total_amount_display').unmask());
                var additional_costs = parseFloat(form.find('input[name="freight"]').unmask()) + parseFloat(form.find('input[name="insurance"]').unmask()) + parseFloat(form.find('input[name="other_charges"]').unmask());
                var total_cif = total_amount + additional_costs;
                additional_costs += parseFloat(form.find('input[name="import_duty"]').unmask()) / exchange_rate;
                additional_costs += parseFloat(form.find('input[name="cpf"]').unmask()) / exchange_rate;
                additional_costs += parseFloat(form.find('input[name="rdl"]').unmask()) / exchange_rate;
                additional_costs += parseFloat(form.find('input[name="wharfage"]').unmask()) / exchange_rate;
                additional_costs += parseFloat(form.find('input[name="service_fee"]').unmask()) / exchange_rate;
                var factor = (total_amount + additional_costs + (clearance_charges / exchange_rate)) / total_amount;
                form.find('input[name="factor"]').val(factor);
            };

            calculate_table_total_amount(items_table);
            factor_finder();

            modal.find('input[name="exchange_rate"]').priceFormat();

            modal.delegate(' input[name="rate"],  input[name="quantity"], input[name="import_duty"],' +
                'input[name="freight"],  input[name="insurance"] ,  input[name="other_charges"],' +
                'input[name="vat"],  input[name="cpf"],  input[name="rdl"],  input[name="wharfage"],  input[name="service_fee"],  input[name="clearance_charges"] ',
                'change keyup', function () {
                    if($(this).attr('name') == 'quantity'){
                        var quantity_balance = parseFloat($(this).attr('quantity_balance'));
                        if($(this).val() > quantity_balance){
                            toast("error",'The quantity received cannot exceed the ordered balance of '+quantity_balance);
                            $(this).val(quantity_balance);
                        }
                    }
                    calculate_table_total_amount(items_table);
                    factor_finder();
                });

            modal.find(' .next_to_duties').click(function () {
                modal.find(' .import_duties').tab("show");
            });

            modal.find(' .previous_to_item_details').click(function () {
                modal.find(' .item_details').tab("show");
                $(this).hide();
            });

            modal.find('.item_details').on('shown.bs.tab', function (e) {
                modal.find(' .previous_to_item_details, .preview_purchase_order_grn, .receive_purchase_order').hide();
                modal.find('.next_to_duties').show();
            });

            modal.find('.import_duties').on('shown.bs.tab', function (e) {
                modal.find(' .previous_to_item_details, .preview_purchase_order_grn, .receive_purchase_order').show();
                modal.find('.next_to_duties').hide();
            });
        } else {
            modal.delegate(' input[name="rate"],  input[name="quantity"], input[name="freight"], input[name="inspection_and_other_charges"], input[name="vat_inclusive"], select[name="vat_percentage"] ', 'change keyup', function () {
                calculate_table_total_amount(items_table);
                calculate_vat_amount();
            });
        }
    });

    $('.delete_purchase_order').each(function () {
        var button = $(this);
        if (button.attr('initialized') != 'true') {
            button.click(function () {
                var order_id = button.attr('order_id');
                $.confirm({
                    title: 'Delete Purchase Order N0. ' + order_id,
                    content: 'This action is irreversible! Are you sure?',
                    buttons: {
                        confirm: {
                            text: 'Confirm Delete',
                            btnClass: 'btn btn-danger btn-xs',
                            action: function () {
                                $.post(
                                    base_url + "procurements/delete_purchase_order",
                                    {
                                        order_id: button.attr('order_id')
                                    }, function () {
                                        button.closest('table').DataTable().draw('page');
                                    }
                                );
                            }
                        },
                        cancel: {
                            text: "Don't Delete",
                            btnClass: 'btn btn-default btn-xs'
                        }
                    }
                });
            });
            button.attr('initialized', 'true');
        }
    });
}

function delete_attachment(button, attachment_type) {
    if (button.attr('initialized') != 'true') {
        button.click(function () {
            $.confirm({
                title: 'Delete Attachment',
                content: 'This action is irreversible! Are you sure?',
                buttons: {
                    confirm: {
                        text: 'Confirm Delete',
                        btnClass: 'btn btn-danger btn-xs',
                        action: function () {
                            start_spinner();
                            $.post(
                                base_url + "attachments/delete_attachment",
                                {
                                    attachment_id: button.attr('attachment_id')
                                }, function () {
                                    if (attachment_type == 'requisition_attachment') {
                                        update_requisition_attachments(button.closest('.modal'));
                                    } else if (attachment_type == 'sub_contract_requisition_attachment') {
                                        update_sub_contract_requisition_attachments(button.closest('.modal'))
                                    } else if (attachment_type == 'journal_voucher_attachment') {
                                        update_journal_voucher_attachments(button.closest('.modal'))
                                    } else if (attachment_type == 'procurements_attachment') {
                                        update_procurements_attachments(button.closest('.modal'))
                                    } else {
                                        button.closest('table').DataTable().draw('page');
                                    }
                                    stop_spinner();
                                }
                            );
                        }
                    },
                    cancel: {
                        text: "Cancel",
                        btnClass: 'btn btn-default btn-xs'
                    }
                }
            });
        });
        button.attr('initialized','true');
    }
};

function update_requisition_attachments(form_container) {
    var requisition_attachments_container = form_container.find(' .requisition_attachments_container')
    var requisition_id = requisition_attachments_container.attr('requisition_id');
    $.post(
        base_url + "attachments/requisition_attachments",
        {
            requisition_id: requisition_id
        }, function (data) {
            form_container.parent().parent().find(' form').get(0).reset();
            form_container.find('button').removeAttr('disabled');
            requisition_attachments_container.html(data);
            requisition_attachments_container.find('.delete_attachment').each(function () {
                delete_attachment($(this), 'requisition_attachment');
            });
        }
    ).complete();
};

function update_sub_contract_requisition_attachments(form_container) {
    var srq_attachments_container = form_container.find(' .srq_attachments_container');
    var sub_contract_requisition_id = srq_attachments_container.attr('sub_contract_requisition_id');
    $.post(
        base_url + "attachments/sub_contract_payment_requisition_attachments",
        {
            sub_contract_requisition_id: sub_contract_requisition_id

        }, function (data) {
            form_container.parent().parent().find(' form').get(0).reset();
            form_container.find('button').removeAttr('disabled');
            srq_attachments_container.html(data);
            srq_attachments_container.find('.delete_attachment').each(function () {
                delete_attachment($(this), 'sub_contract_requisition_attachment');
            });
        }
    ).complete();
};

function update_procurements_attachments(form_container) {
    var procurements_attachments_container = form_container.find(' .procurements_attachments_container');
    var reffering_id = procurements_attachments_container.attr('reffering_id');
    $.post(
        base_url + "attachments/procurements_attachments",
        {
            reffering_id: reffering_id,
            reffering_to: form_container.find('input[name="reffering_to"]').val()

        }, function (data) {
            form_container.parent().parent().find(' form').get(0).reset();
            form_container.find('button').removeAttr('disabled');
            procurements_attachments_container.html(data);
            procurements_attachments_container.find('.delete_attachment').click(function () {
                delete_attachment($(this), 'procurements_attachment');
            });
        }
    ).complete();
};

function procurement_attach() {
    $('.procurements_attach').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                var form_container = $(this).closest('.modal');
                var captured = form_container.find(' input[name="file"] ')[0];
                var caption = form_container.find(' input[name="caption"] ').val();
                var reffering_id = form_container.find(' input[name="reffering_id"] ').val();
                var reffering_to = form_container.find(' input[name="reffering_to"] ').val();
                var file = captured.files[0], formdata = false;
                form_container.find('.requisition_attach').attr('disabled', 'disabled');
                if (window.FormData) {
                    formdata = new FormData();

                    if (formdata) {
                        start_spinner();
                        formdata.append("file", file);
                        formdata.append("caption", caption);
                        formdata.append("reffering_id", reffering_id);
                        formdata.append("reffering_to", reffering_to);

                        $.ajax({
                            url: base_url + 'attachments/save_procurements_attachments/',
                            type: "POST",
                            timeout: 250000,
                            cache: false,
                            data: formdata,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                update_procurements_attachments(form_container);
                                stop_spinner();
                            }
                        });

                    }
                    button.attr('active', 'true');
                }
            });
        }
    });

    $('.delete_attachment').each(function () {
        delete_attachment($(this), 'procurements_attachment');
    });
}

function update_journal_voucher_attachments(form_container) {
    var jv_attachments_container = form_container.find('.jv_attachments_container');
    var journal_voucher_id = jv_attachments_container.attr('journal_voucher_id');
    $.post(
        base_url + "attachments/journal_voucher_attachments",
        {
            journal_voucher_id: journal_voucher_id

        }, function (data) {
            form_container.parent().parent().find(' form').get(0).reset();
            form_container.find('button').removeAttr('disabled');
            jv_attachments_container.html(data);
            jv_attachments_container.find('.delete_attachment').each(function () {
                delete_attachment($(this), 'journal_voucher_attachment');
            });
        }
    ).complete();
};

function initialize_requisition_buttons() {

    $('.delete_requisition').click(function () {
        if (confirm('Are you sure?')) {
            var requisition_id = $(this).attr('requisition_id');
            var table = $(this).closest('table');
            $.post(
                base_url + "requisitions/delete_requisition",
                {
                    requisition_id: requisition_id
                }
            ).complete(function () {
                table.DataTable().draw('page');
            });
        }
    });

    $('.requisition_attach').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                var form_container = $(this).closest('.modal');
                var captured = form_container.find(' input[name="file"] ')[0];
                var caption = form_container.find(' input[name="caption"] ').val();
                var requisition_id = form_container.find(' input[name="requisition_id"] ').val();
                var file = captured.files[0], formdata = false;
                form_container.find('.requisition_attach').attr('disabled', 'disabled');
                if (window.FormData) {
                    formdata = new FormData();

                    if (formdata) {
                        start_spinner();
                        formdata.append("file", file);
                        formdata.append("caption", caption);
                        formdata.append("requisition_id", requisition_id);

                        $.ajax({
                            url: base_url + 'attachments/save_requisition_attachment/',
                            type: "POST",
                            timeout: 250000,
                            cache: false,
                            data: formdata,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                update_requisition_attachments(form_container);
                                stop_spinner();
                            }
                        });

                    }
                    button.attr('active', 'true');
                }
            });
        }
    });

    $('.delete_attachment').each(function () {
        delete_attachment($(this), 'requisition_attachment');
    });

}

function initialize_sub_contract_requisition_buttons() {
    $('.delete_sub_contract_requisition').each(function () {
        var button = $(this);
        var table = button.closest('table');
        if (button.attr('initialized') != 'true') {
            button.click(function () {
                $.confirm({
                    title: 'Delete This Requisition',
                    content: 'This action is irreversible! Are you sure?',
                    buttons: {
                        confirm: {
                            text: 'Confirm Delete',
                            btnClass: 'btn btn-danger',
                            action: function () {
                                start_spinner();
                                $.post(base_url + "requisitions/delete_sub_contract_requisition",
                                    {
                                        sub_contract_requisition_id: button.attr('sub_contract_requisition_id')
                                    }, function (data) {
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                    });
                            }
                        },
                        cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                    }
                });
            });
        }
    });

    $('.sub_contract_requisition_attach').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                var form_container = $(this).closest('.modal');
                var captured = form_container.find(' input[name="file"] ')[0];
                var caption = form_container.find(' input[name="caption"] ').val();
                var sub_contract_requisition_id = form_container.find(' input[name="sub_contract_requisition_id"] ').val();
                var file = captured.files[0], formdata = false;
                form_container.find('.sub_contract_requisition_attach').attr('disabled', 'disabled');
                if (window.FormData) {
                    formdata = new FormData();

                    if (formdata) {
                        start_spinner();
                        formdata.append("file", file);
                        formdata.append("caption", caption);
                        formdata.append("sub_contract_requisition_id", sub_contract_requisition_id);

                        $.ajax({
                            url: base_url + 'attachments/save_sub_contract_requisition_attachment/',
                            type: "POST",
                            timeout: 250000,
                            cache: false,
                            data: formdata,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                update_sub_contract_requisition_attachments(form_container);
                                stop_spinner();
                            }
                        });

                    }
                    button.attr('active', 'true');
                }
            });
        }
    });

    $('.delete_attachment').each(function () {
        delete_attachment($(this), 'sub_contract_requisition_attachment');
    });
}

function initialize_journal_voucher_buttons() {
    $('.delete_jv_transaction').each(function () {
        var button = $(this);
        if (button.attr('initialized') != 'true') {
            button.click(function () {
                $.confirm({
                    title: 'Delete This Transaction',
                    content: 'This action is irreversible! Are you sure?',
                    buttons: {
                        confirm: {
                            text: 'Confirm Delete',
                            btnClass: 'btn btn-danger',
                            action: function () {
                                start_spinner();
                                $.post(base_url + "finance/delete_journal_voucher",
                                    {
                                        jv_transaction_id: button.attr('jv_transaction_id')
                                    }, function (data) {
                                        button.closest('table').DataTable().draw('page');
                                        stop_spinner();
                                    });
                            }
                        },
                        cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                    }
                });
            });
        }
    });

    $('.jv_attach').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                var form_container = button.closest('.modal');
                var captured = form_container.find(' input[name="file"] ')[0];
                var caption = form_container.find(' input[name="caption"] ').val();
                var journal_voucher_id = form_container.find('input[name="journal_voucher_id"]').val();
                var file = captured.files[0], formdata = false;
                form_container.find('.jv_attach').attr('disabled', 'disabled');
                if (window.FormData) {
                    formdata = new FormData();

                    if (formdata) {
                        start_spinner();
                        formdata.append("file", file);
                        formdata.append("caption", caption);
                        formdata.append("journal_voucher_id", journal_voucher_id);

                        $.ajax({
                            url: base_url + 'attachments/save_journal_voucher_attachment/',
                            type: "POST",
                            timeout: 250000,
                            cache: false,
                            data: formdata,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                update_journal_voucher_attachments(form_container);
                                stop_spinner();
                            }
                        });

                    }
                    button.attr('active', 'true');
                }
            });
        }
    });

    $('.delete_attachment').each(function () {
        delete_attachment($(this), 'journal_voucher_attachment');
    });
}

function draw_requisition_table(table) {
    if (table.attr('initialized') != 'true') {
        var status_field = table.closest('.box ').find('select[name="status"]');
        var approval_module_field = table.closest('.box ').find('select[name="approval_module"]');
        var approval_level_field = table.closest('.box ').find('select[name="approval_level"]');
        table.DataTable({
            "order": [[0, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "requisitions/requisitions_list",
                type: 'POST',
                data: function (d) {
                    d.status = status_field.val();
                    d.approval_module_id = approval_module_field.val();
                    d.approval_level = approval_level_field.val();
                }
            },
            "lengthMenu": [[10, 20, 30], [10, 20, 30]],
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": true },
                { "orderable": false },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching requisitions found</div>",
                "emptyTable": "<div class='alert alert-info'>No requisitions found</div>"
            },
            "drawCallback": function () {
                $(this).find('tr').each(function () {
                    $(this).find('td:last-child').attr('nowrap', 'nowrap');
                });

                status_field.each(function () {
                    if (status_field.attr('initialized') != 'true') {
                        status_field.change(function () {
                            if (status_field.val() == 'approved') {
                                status_field.closest('.box').find('.event_date_title').html('Date Approved');
                                status_field.closest('.box').find('.event_amount_title').html('Approved Amount');
                            } else if (status_field.val() == 'rejected') {
                                status_field.closest('.box').find('.event_date_title').html('Date Rejected');
                                status_field.closest('.box').find('.event_amount_title').html('Requested Amount');
                            } else {
                                status_field.closest('.box').find('.event_date_title').html('Date Requested');
                                status_field.closest('.box').find('.event_amount_title').html('Requested Amount');
                            }
                            table.DataTable().draw('page');
                        });
                        status_field.attr('initialized', 'true');
                    }
                });

                approval_module_field.each(function () {
                    if (approval_module_field.attr('initialized') != 'true') {
                        approval_module_field.change(function () {
                            table.DataTable().draw('page');
                        });
                        approval_module_field.attr('initialized', 'true');
                    }
                });

                approval_level_field.each(function () {
                    if (approval_level_field.attr('initialized') != 'true') {
                        approval_level_field.change(function () {
                            table.DataTable().draw('page');
                        });
                        approval_level_field.attr('initialized', 'true');
                    }
                });

                $('.sub_contract_payment_requisition_form').each(function () {
                    var modal = $(this);
                    initialize_sub_contract_payment_requisition_form(modal);
                });

                $('.sub_contract_payment_requisition_approval_form').each(function () {
                    var modal = $(this);
                    initialize_sub_contract_payment_requisition_approval_form(modal);
                });

                $('.sub_contract_payment_requisition_attachments_modal').each(function () {
                    var modal = $(this);
                    modal.on('show.bs.modal', function (e) {
                        update_sub_contract_requisition_attachments(modal);
                    });
                });

                initialize_requisition_approval_forms($(this));
                initialize_requisition_buttons();
                initialize_sub_contract_requisition_buttons();
                initialize_common_js();
                initialize_requisition_and_order_form();
            }
        });
    } else {
        table.dataTable().draw('page');
    }
}

draw_requisition_table($('#requisitions_table, #my_desk_requisitions_table'));

function load_the_available_location_materials(select_element, container_element) {
    var source_location_id = select_element.val();
    var display_location_materials = select_element.closest(container_element).find('tbody').find('select[name="material_id"]');
    if (source_location_id != '') {
        start_spinner();
        $.post(
            base_url + "inventory/load_location_materials",
            {
                source_location_id: source_location_id
            }, function (data) {
                display_location_materials.html(data);
            }
        ).complete(stop_spinner());
    } else {
        display_location_materials.html('');
    }
}

function load_the_available_location_assets(select_element, container_element) {
    var source_location_id = select_element.val();
    var display_location_assets = select_element.closest(container_element).find('tbody').find('select[name="asset_item_id"]');
    if (source_location_id != '') {
        start_spinner();
        $.post(
            base_url + "inventory/load_location_assets/location",
            {
                source_location_id: source_location_id
            }, function (data) {
                display_location_assets.html(data);
            }
        ).complete(stop_spinner());
    } else {
        display_location_assets.html('');
    }
}

$('#enquiries_table').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        var filter_field = table.closest('.box ').find('select[name="filter"]');
        table.DataTable({
            "order": [[0, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "requisitions/enquiries_list",
                type: 'POST',
                data: function (d) {
                    d.filter = filter_field.val()
                }
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching pending enquiry found</div>",
                "emptyTable": "<div class='alert alert-info'>No pending enquiry found</div>"
            }, "drawCallback": function () {
                $(this).find('td:last-child').attr('nowrap', 'nowrap');

                filter_field.each(function () {
                    if (filter_field.attr('initialized') != 'true') {
                        filter_field.change(function () {
                            table.DataTable().draw('page');
                        });
                        filter_field.attr('initialized', 'true');
                    }
                });

                $('.enquiry_form, .enquiry_to_requisition_form').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        modal.on('show.bs.modal', function (e) {

                            var load_level_to_approve_requisition = function (approval_module_id, container) {
                                var foward_to_options = container.find('.foward_to_options');
                                start_spinner();
                                $.post(
                                    base_url + "requisitions/load_level_to_approve_requisition",
                                    {
                                        approval_module_id: approval_module_id
                                    }, function (data) {
                                        foward_to_options.html(data);
                                    }
                                )

                            };

                            var load_project_options = function (select_field) {
                                start_spinner();
                                $.post(
                                    base_url + "projects/load_project_dropdown_options",
                                    {

                                    }, function (data) {
                                        var modal = select_field.closest('.modal');
                                        select_field.html(data).trigger('change');
                                        stop_spinner();
                                    }
                                );
                            };

                            var load_cost_centers_options = function (select_field) {
                                start_spinner();
                                $.post(
                                    base_url + "finance/load_cost_centers_dropdown_options",
                                    {

                                    }, function (data) {
                                        select_field.html(data).trigger('change');
                                        stop_spinner();
                                    }
                                );
                            };

                            modal.find('tbody select[name="material_id"]').each(function () {
                                var select_element = $(this);
                                select_element.select2({ width: "350px" });
                                select_element.change(function () {
                                    load_material_unit(select_element, 'tr');
                                });

                            });

                            modal.find('tbody select[name="asset_item_id"]').each(function () {
                                var select_element = $(this);
                                select_element.select2({ width: "350px" });
                            });

                            modal.find('tbody select[name="measurement_unit_id"]').each(function () {
                                var select_element = $(this);
                                select_element.select2({ width: "80px" });
                            });

                            modal.find('select[name="approval_module_id"]').each(function () {
                                var requisition_type_field = $(this);
                                if (requisition_type_field.attr('initialized') != 'true') {
                                    var requisition_cost_center_field = requisition_type_field.closest('.modal-body').find('select[name="requisition_cost_center_id"]');

                                    requisition_type_field.change(function () {
                                        var module_id = requisition_type_field.val();
                                        var foward_to_options = modal.find('.foward_to_options');

                                        if (module_id == '2') {
                                            modal.find('.cost_center_form_group').show();
                                            load_project_options(requisition_cost_center_field);
                                            load_level_to_approve_requisition(module_id, modal);
                                        } else if (module_id == '1') {
                                            modal.find('.cost_center_form_group').hide();
                                            load_cost_centers_options(requisition_cost_center_field);
                                            load_level_to_approve_requisition(module_id, modal);
                                        } else {
                                            requisition_cost_center_field.html('');
                                            foward_to_options.val('').trigger('change');
                                        }
                                    });
                                    requisition_type_field.attr('initialized', 'true');
                                }
                            });

                            modal.find('.save_enquiry').each(function () {
                                var button = $(this);
                                if (button.attr('initialized') != 'true') {
                                    button.click(function () {
                                        var enquiry_id = modal.find('input[name="enquiry_id"]').val();
                                        var vendor_id = modal.find('select[name="vendor_id"]').val();
                                        var enquiry_date = modal.find('input[name="enquiry_date"]').val();
                                        var request_date = modal.find('input[name="request_date"]').val();
                                        var comments = modal.find('textarea[name="comments"]').val();
                                        var required_date = modal.find('input[name="required_date"]').val(), i = 0;
                                        var item_types = new Array(), items = new Array(), quantities = new Array(), measurement_unit_ids = new Array(), remarks = new Array();
                                        var tbody = modal.find('tbody'), error = 0;

                                        tbody.find('input[name="enquired_quantity"]').each(function () {
                                            var item, measurement_unit_id;
                                            var quantity = $(this).val();
                                            var row = $(this).closest('tr');
                                            var item_type = row.find('input[name="item_type"]').val();
                                            if (item_type == 'material') {
                                                item = row.find('select[name="material_id"]').val();
                                                measurement_unit_id = '';
                                            } else if (item_type == 'asset') {
                                                item = row.find('select[name="asset_item_id"]').val();
                                                measurement_unit_id = '';
                                            } else {
                                                item = row.find('input[name="description"]').val();
                                                measurement_unit_id = row.find('select[name="measurement_unit_id"]').val();
                                            }

                                            if (item != '' && (item_type == 'material' || item_type == 'asset' || (item_type == 'service' && measurement_unit_id != ''))) {
                                                quantities[i] = quantity;
                                                item_types[i] = item_type;
                                                items[i] = item;
                                                remarks[i] = row.find('textarea[name="remarks"]').val();
                                                measurement_unit_ids[i] = measurement_unit_id;
                                                i++;
                                            } else {
                                                error++;
                                            }
                                        });

                                        if (error == 0 && enquiry_date != '' && items.length > 0) {
                                            modal.modal('hide');
                                            start_spinner();
                                            $.post(
                                                base_url + "requisitions/save_enquiry/",
                                                {
                                                    enquiry_id: enquiry_id,
                                                    vendor_id: vendor_id,
                                                    quantities: quantities,
                                                    enquiry_date: enquiry_date,
                                                    required_date: required_date,
                                                    item_types: item_types,
                                                    items: items,
                                                    measurement_unit_ids: measurement_unit_ids,
                                                    comments: comments,
                                                    remarks: remarks

                                                }, function (data) {
                                                    modal.find('form')[0].reset();
                                                    tbody.find('.artificial_row').remove();
                                                    modal.closest('.box').find('#enquiries_table').DataTable().draw('page');
                                                    initialize_common_js();
                                                }
                                            ).complete(function () {
                                                stop_spinner();
                                            });
                                        } else {
                                            toast('error', 'Please make sure all fields are correctly filled');
                                        }

                                        button.attr('initialized', 'true');
                                    });
                                    button.attr('initialized', 'true');
                                }
                            });

                            modal.find('.material_row_adder').each(function () {
                                if ($(this).attr('initialized') != 'true') {
                                    $(this).click(function () {
                                        var tbody = $(this).closest('table').find('tbody');
                                        var new_row = tbody.closest('table').find('.material_row_template').clone().removeAttr('style')
                                            .removeClass('material_row_template').addClass('artificial_row').appendTo(tbody);

                                        new_row.find('select[name="material_id"]').each(function () {
                                            var select_element = $(this);
                                            select_element.select2({ width: "350px" });
                                            select_element.change(function () {
                                                load_material_unit(select_element, 'tr');
                                            });

                                        });

                                        new_row.find('.number_format').priceFormat();

                                        new_row.find('.row_remover').click(function () {
                                            var table = $(this).closest('table');
                                            $(this).closest('tr').remove();
                                            calculate_table_total_amount(table);
                                        });
                                        initialize_form_amount_calculator(new_row);
                                        initialize_common_js();
                                    });
                                    $(this).attr('initialized', 'true');
                                }
                            });

                            modal.find('.asset_row_adder').each(function () {
                                if ($(this).attr('initialized') != 'true') {
                                    $(this).click(function () {
                                        var tbody = $(this).closest('table').find('tbody');
                                        var new_row = tbody.closest('table').find('.asset_row_template').clone().removeAttr('style')
                                            .removeClass('asset_row_template').addClass('artificial_row').appendTo(tbody);

                                        new_row.find('select[name="asset_item_id"]').each(function () {
                                            var select_element = $(this);
                                            select_element.select2({ width: "350px" })
                                        });

                                        new_row.find('.row_remover').click(function () {
                                            var table = $(this).closest('table');
                                            $(this).closest('tr').remove();
                                            calculate_table_total_amount(table);
                                        });
                                        initialize_form_amount_calculator(new_row);
                                        initialize_common_js();
                                        new_row.find('.number_format').priceFormat();
                                    });
                                    $(this).attr('initialized', 'true');
                                }
                            });

                            modal.find('.service_row_adder').each(function () {
                                if ($(this).attr('initialized') != 'true') {
                                    $(this).click(function () {
                                        var tbody = $(this).closest('table').find('tbody');
                                        var new_row = tbody.closest('table').find('.service_row_template').clone().removeAttr('style')
                                            .removeClass('service_row_template').addClass('artificial_row').appendTo(tbody);

                                        new_row.find('select[name="measurement_unit_id"]').each(function () {
                                            var select_element = $(this);
                                            select_element.select2({ width: "80px" })
                                        });

                                        new_row.find('.row_remover').click(function () {
                                            var table = $(this).closest('table');
                                            $(this).closest('tr').remove();
                                            calculate_table_total_amount(table);
                                        });
                                        initialize_form_amount_calculator(new_row);
                                        initialize_common_js();
                                        new_row.find('.number_format').priceFormat();
                                    });
                                    $(this).attr('initialized', 'true');
                                }
                            });

                            modal.find('tbody tr').each(function () {
                                initialize_form_amount_calculator($(this));
                                $(this).find('.row_remover').click(function () {
                                    $(this).closest('tr').remove();
                                    var table = $(this).closest('table');
                                    calculate_table_total_amount(table);
                                });
                            });

                            var items_table = modal.find('table');
                            modal.delegate(' input[name="rate"],  input[name="quantity"], input[name="freight"], input[name="inspection_and_other_charges"] ', 'change keyup', function () {
                                calculate_table_total_amount(items_table);
                                var total_amount = parseFloat(items_table.find('.total_amount_display').unmask());
                                var freight = parseFloat(modal.find('input[name="freight"]').unmask());
                                var other_charges = parseFloat(modal.find('input[name="inspection_and_other_charges"]').unmask());
                                freight = !isNaN(freight) ? freight : 0;
                                other_charges = !isNaN(other_charges) ? other_charges : 0;
                                modal.find('.grand_total_display').html(total_amount + freight + other_charges).priceFormat();
                            });

                        });
                        modal.attr('initialized', 'true');
                    }
                });

                $('.delete_enquiry').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete This Enquiry',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(base_url + "requisitions/delete_enquiry",
                                                {
                                                    enquiry_id: button.attr('enquiry_id')
                                                }, function (data) {
                                                    $('#enquiries_table').DataTable().draw('page');
                                                    stop_spinner();
                                                });
                                        }
                                    },
                                    cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                                }
                            });
                        });
                    }
                });

                $('.save_enquiry_requisition').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');
                            var requisition_id = modal.find('input[name="requisition_id"]').val();
                            var approval_module_id = modal.find('select[name="approval_module_id"]').val();
                            var requisition_cost_center_field = modal.find('select[name="requisition_cost_center_id"]');
                            var requisition_cost_center_id = requisition_cost_center_field.val();
                            var request_date = modal.find('input[name="request_date"]').val();
                            var currency_id = modal.find('select[name="currency_id"]').val();
                            var required_date = modal.find('input[name="required_date"]').val(), i = 0;
                            var cost_center_ids = new Array(), expense_account_ids = new Array(), item_types = new Array(), source_types = Array(),
                                source_or_unit_ids = new Array(), unit_ids = new Array(), item_ids = new Array(), quantities = new Array(), rates = new Array();
                            var tbody = modal.find('tbody'), error = 0;

                            tbody.find('input[name="quantity"]').each(function () {
                                var item_id, source_or_unit_id, unit_id, payee;
                                var quantity = $(this).val();
                                var row = $(this).closest('tr');
                                var rate = row.find('input[name="rate"]').unmask();
                                var item_type = row.find('input[name="item_type"]').val();
                                var source_type;
                                if (item_type == 'material') {
                                    item_id = row.find('select[name="material_id"]').val();
                                    unit_id = '';
                                    source_type = row.find('input[name="source_type"]').val();
                                    source_or_unit_id = source_type == 'cash' ? row.find('input[name="payee"]').val() : row.find('input[name="source_id"]').val();
                                } else if (item_type == 'asset') {
                                    item_id = row.find('select[name="asset_item_id"]').val();
                                    unit_id = '';
                                    source_type = row.find('input[name="source_type"]').val();
                                    source_or_unit_id = source_type == 'cash' ? row.find('input[name="payee"]').val() : row.find('input[name="source_id"]').val();
                                } else if (item_type == 'service') {
                                    item_id = row.find('input[name="service_description"]').val();
                                    unit_id = row.find('select[name="uom_id"]').val();
                                    source_type = row.find('input[name="source_type"]').val();
                                    source_or_unit_id = source_type == 'cash' ? row.find('input[name="payee"]').val() : row.find('input[name="source_id"]').val();
                                }

                                if (parseFloat(quantity) > 0 && parseFloat(rate) > 0 && item_id != '' && ((item_type == 'material' || item_type == 'asset' || (item_type == 'service' && unit_id != '')) || source_or_unit_id.trim() != '')) {
                                    quantities[i] = quantity;
                                    item_types[i] = item_type;
                                    cost_center_ids[i] = '';
                                    expense_account_ids[i] = '';
                                    source_or_unit_ids[i] = source_or_unit_id;
                                    unit_ids[i] = unit_id;
                                    source_types[i] = source_type;
                                    rates[i] = rate;
                                    item_ids[i] = item_id;
                                    i++;
                                } else {
                                    error++;
                                }
                            });

                            if (error == 0 && request_date != '' && quantities.length > 0 && approval_module_id.trim() != '' && approval_module_id != '' && requisition_cost_center_id.trim() != '') {
                                modal.modal('hide');
                                var freight = parseFloat(modal.find('input[name="freight"]').unmask());
                                var inspection_and_other_charges = parseFloat(modal.find('input[name="inspection_and_other_charges"]').unmask());
                                var vat_inclusive = modal.find('  input[name="vat_inclusive"]').is(":checked") ? 1 : 0;
                                var vat_percentage = modal.find('input[name="vat_percentage"]').val();
                                var comments = modal.find('textarea[name="comments"]').val();
                                var foward_to = modal.find('select[name="foward_to"]').val();
                                var status = button.hasClass('suspend_requisition') ? 'INCOMPLETE' : 'PENDING';

                                start_spinner();
                                $.post(
                                    base_url + "requisitions/save_requisition/",
                                    {
                                        requisition_id: requisition_id,
                                        approval_module_id: approval_module_id,
                                        requisition_cost_center_id: requisition_cost_center_id,
                                        quantities: quantities,
                                        rates: rates,
                                        currency_id: currency_id,
                                        request_date: request_date,
                                        required_date: required_date,
                                        item_types: item_types,
                                        item_ids: item_ids,
                                        source_or_unit_ids: source_or_unit_ids,
                                        unit_ids: unit_ids,
                                        cost_center_ids: cost_center_ids,
                                        expense_account_ids: expense_account_ids,
                                        source_types: source_types,
                                        freight: freight,
                                        inspection_and_other_charges: inspection_and_other_charges,
                                        vat_inclusive: vat_inclusive,
                                        vat_percentage: vat_percentage,
                                        status: status,
                                        comments: comments,
                                        foward_to: foward_to

                                    }, function (data) {
                                        modal.find('form')[0].reset();
                                        tbody.find('.artificial_row').remove();
                                        requisition_cost_center_field.closest('form-group').hide();
                                        modal.find('.unit_display, .total_amount_display').html('');
                                        $('#enquiries_table').DataTable().draw('page');
                                        initialize_common_js();
                                    }
                                ).complete(function () {
                                    stop_spinner();
                                });
                            } else {
                                toast('error', 'Please make sure all fields are correctly filled');
                            }
                        });
                        button.attr('initialized', 'true');
                    }
                });

                initialize_common_js();
            }
        });
    }
});

$('.requisition_header_container').each(function () {
    var container = $(this);
    window.addEventListener('DOMContentLoaded', function () {
        var approval_module_selector = container.find('select[name="approval_module"]');
        var approval_level_selector = container.find('select[name="approval_level"]');
        var status_selector = container.find('select[name="status"]');
        approval_module_selector.change(function () {
            start_spinner();
            $.post(
                base_url + "requisitions/load_level_to_approve_requisition/not_forwarding_to",
                {
                    approval_module_id: approval_module_selector.val()
                }, function (data) {
                    approval_level_selector.html(data);
                    stop_spinner();
                }
            )
        });

        status_selector.change(function () {
            (status_selector.val() != 'pending' && status_selector.val() != 'all') ? (
                container.find('select[name="approval_level"]').val('') &&
                container.find('select[name="approval_level"]').attr('disabled', true)
            ) : container.find('select[name="approval_level"]').attr('disabled', false);
        });
    });
});

/****************************************************
 * PURCHASE ORDERS
 ****************************************************/

$('#pre_orders_table').DataTable({
    "order": [[0, "desc"]],
    colReorder: true,
    "processing": true,
    "serverSide": true,
    "ajax": {
        url: base_url + "procurements/pre_orders/",
        type: 'POST'
    },
    "columns": [
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": false }
    ],
    "language": {
        "zeroRecords": "<div class='alert alert-info'>No matching pending pre-orders found</div>",
        "emptyTable": "<div class='alert alert-info'>No pending pre-orders found</div>"
    }, "drawCallback": function () {

        $(this).find('tr').each(function () {
            $(this).find('td:last-child').attr('nowrap', 'nowrap');
        });
        initialize_requisition_and_order_form();
        initialize_common_js();
    }
});

function save_purchase_order(button) {
    var modal = button.closest('.modal');
    var order_id = modal.find('input[name="order_id"]').val();
    var handler_id = modal.find('select[name="handler_id"]').val();
    var vendor_id = modal.find('select[name="vendor_id"]').val();
    var currency_id = modal.find('select[name="currency_id"]').val();
    var location_id = modal.find('select[name="location_id"]').val();
    var project_id = modal.find('select[name="project_id"]').val();
    var cost_center_id = modal.find('select[name="cost_center_id"]').val();
    var issue_date = modal.find('input[name="issue_date"]').val();
    var delivery_date = modal.find('input[name="delivery_date"]').val();
    var reference = modal.find('input[name="reference"]').val();
    var item_ids = new Array(), unit_ids = new Array(), item_types = new Array(), quantities = new Array(), prices = new Array(), remarks = new Array(), i = 0;
    var tbody = modal.find('tbody');
    var unit_id;

    tbody.find('input[name="quantity"]').each(function () {
        var quantity = $(this).val();
        var row = $(this).closest('tr');
        var item_type = row.find('input[name="item_type"]').val();
        if (item_type == 'material') {
            var item_id = row.find('select[name="material_id"]').val();
        } else if (item_type == 'service') {
            var item_id = row.find('input[name="service_description"]').val();
            var unit_id = row.find('select[name="uom_id"]').val();
        } else {
            var item_id = row.find('select[name="asset_item_id"]').val();
        }
        if (parseFloat(quantity) > 0 && item_id != '') {
            quantities[i] = quantity;
            item_types[i] = item_type;
            unit_ids[i] = unit_id;
            prices[i] = row.find('input[name="rate"]').unmask();
            item_ids[i] = item_id;
            remarks[i] = row.find('textarea[name="remarks"]').val();
            i++;
        }
    });

    if (location_id != '' && vendor_id != '' && issue_date != '' && quantities.length > 0 && handler_id != '') {
        modal.modal('hide');
        var freight = modal.find('input[name="freight"]').unmask();
        var inspection_and_other_charges = modal.find('input[name="inspection_and_other_charges"]').unmask();
        var vat_priced_po = modal.find('input[name="vat_priced_po"]').val();
        var vat_inclusive;
        if (vat_priced_po == 'true') {
            vat_inclusive = modal.find('input[name="vat_inclusive"]').is(':checked') ? 'VAT PRICED' : 'NULL';
        } else {
            vat_inclusive = modal.find('input[name="vat_inclusive"]').is(':checked') ? 'VAT COMPONENT' : 'NULL';
        }
        var vat_percentage = modal.find('select[name="vat_percentage"]').val();
        var freight_charges = parseFloat(freight);
        var inspection_charges = parseFloat(inspection_and_other_charges);
        var comments = modal.find('textarea[name="comments"]').val();
        start_spinner();
        $.post(
            base_url + "procurements/save_purchase_order/",
            {
                order_id: order_id,
                unit_ids: unit_ids,
                location_id: location_id,
                project_id: project_id,
                cost_center_id: cost_center_id,
                currency_id: currency_id,
                handler_id: handler_id,
                reference: reference,
                delivery_date: delivery_date,
                vendor_id: vendor_id,
                item_types: item_types,
                item_ids: item_ids,
                quantities: quantities,
                prices: prices,
                issue_date: issue_date,
                remarks: remarks,
                freight: freight_charges,
                inspection_and_other_charges: inspection_charges,
                vat_inclusive: vat_inclusive,
                vat_percentage: vat_percentage,
                comments: comments
            }, function () {
                modal.find('form')[0].reset();
                tbody.find('.artificial_row').remove();
                modal.find('.unit_display, .total_amount_display').html('');
                modal.closest('.box').find('#purchase_orders_table').DataTable().draw('page');
                initialize_common_js();
                initialize_requisition_and_order_form();
            }
        ).complete(function () {
            stop_spinner();
        });
    }
}

function save_pre_ordered_purchase_order(button) {
    var modal = button.closest('.modal');
    var requisition_id = modal.find('input[name="requisition_id"]').val();
    var vendor_id = modal.find('select[name="vendor_id"]').val();
    var handler_id = modal.find('select[name="handler_id"]').val();
    var location_id = modal.find('select[name="location_id"]').val();
    var project_id = modal.find('input[name="project_id"]').val();
    var cost_center_id = modal.find('input[name="cost_center_id"]').val();
    var issue_date = modal.find('input[name="issue_date"]').val();
    var delivery_date = modal.find('input[name="delivery_date"]').val();
    var reference = modal.find('input[name="reference"]').val();
    var currency_id = modal.find('select[name="currency_id"]').val();
    var item_ids = new Array(), item_types = new Array(), quantities = new Array(), prices = new Array(), unit_ids = new Array(), i = 0;
    var tbody = modal.find('tbody');

    tbody.find('input[name="quantity"]').each(function () {
        var quantity = $(this).val();
        var row = $(this).closest('tr');
        var item_type = row.find('input[name="item_type"]').val();
        var item_id = row.find('input[name="item_id"]').val();
        if (parseFloat(quantity) > 0 && item_id != '') {
            quantities[i] = quantity;
            item_types[i] = item_type;
            prices[i] = row.find('input[name="rate"]').unmask();
            unit_ids[i] = row.find('input[name="unit_id"]').val();
            item_ids[i] = item_id;
            i++;
        }
    });

    if (location_id != '' && vendor_id != '' && issue_date != '' && quantities.length > 0) {
        modal.modal('hide');
        var freight = modal.find('input[name="freight"]').unmask();
        var inspection_and_other_charges = modal.find('input[name="inspection_and_other_charges"]').unmask();
        var vat_priced_po = modal.find('input[name="vat_priced_po"]').val();
        var vat_inclusive;
        if (vat_priced_po == 'true') {
            vat_inclusive = modal.find('input[name="vat_inclusive"]').is(':checked') ? 'VAT PRICED' : 'NULL';
        } else {
            vat_inclusive = modal.find('input[name="vat_inclusive"]').is(':checked') ? 'VAT COMPONENT' : 'NULL';
        }
        var vat_percentage = modal.find('select[name="vat_percentage"]').val();
        var freight_charges = parseFloat(freight);
        var inspection_charges = parseFloat(inspection_and_other_charges);
        var comments = modal.find('textarea[name="comments"]').val();
        start_spinner();
        $.post(
            base_url + "procurements/save_purchase_order/",
            {
                requisition_id: requisition_id,
                location_id: location_id,
                project_id: project_id,
                cost_center_id: cost_center_id,
                handler_id: handler_id,
                reference: reference,
                delivery_date: delivery_date,
                currency_id: currency_id,
                vendor_id: vendor_id,
                item_types: item_types,
                unit_ids: unit_ids,
                item_ids: item_ids,
                quantities: quantities,
                prices: prices,
                issue_date: issue_date,
                freight: freight_charges,
                inspection_and_other_charges: inspection_charges,
                vat_inclusive: vat_inclusive,
                vat_percentage: vat_percentage,
                comments: comments
            }, function (data) {
                toast('success', 'Order Submitted Successfully');
                modal.closest('#pre_orders_table').DataTable().draw('page');
                initialize_requisition_and_order_form();
                initialize_common_js();
            }
        ).complete(function () {
            stop_spinner();
        });
    }
}

function receive_purchase_order(button) {
    var modal = button.closest('.modal');
    var grn_id = modal.find('input[name="grn_id"]').val();
    var order_id = modal.find('input[name="order_id"]').val();
    var receiving_sub_location_id = modal.find('select[name="receiving_sub_location_id"]').val();
    var exchange_rate = modal.find('input[name="exchange_rate"]').unmask();
    var factor = modal.find('input[name="factor"]').val();
    factor = !isNaN(factor) ? factor : Math.pow(10, -1000);
    var freight = modal.find('input[name="freight"]').unmask();
    var insurance = modal.find('input[name="insurance"]').unmask();
    var other_charges = modal.find('input[name="other_charges"]').unmask();
    var clearance_charges = modal.find('input[name="clearance_charges"]').unmask();
    var clearance_vat = modal.find('input[name="clearance_vat"]').unmask();
    var import_duty = modal.find('input[name="import_duty"]').unmask();
    var vat = modal.find('input[name="vat"]').unmask();
    var cpf = modal.find('input[name="cpf"]').unmask();
    var rdl = modal.find('input[name="rdl"]').unmask();
    var wharfage = modal.find('input[name="wharfage"]').unmask();
    var service_fee = modal.find('input[name="service_fee"]').unmask();
    var receive_date = modal.find('input[name="receive_date"]').val();
    var status = button.hasClass('preview_purchase_order_grn') ? 'PREVIEW' : 'SUBMIT';
    var item_types = new Array(), item_ids = new Array(), order_item_ids = new Array(), quantities = new Array(),
        rejected_quantities = new Array(), prices = new Array(), remarks = new Array(), i = 0, error = 0;
    var tbody = modal.find('tbody');

    tbody.find('input[name="quantity"]').each(function () {
        var quantity = $(this).val();
        var row = $(this).closest('tr');
        var item_id = row.find('input[name="item_id"]').val(), item_type;
        if (item_id != '') {
            quantities[i] = quantity;
            rejected_quantities[i] = row.find('input[name="rejected_quantity"]').val();
            item_types[i] = item_type = row.find('input[name="item_type"]').val();
            prices[i] = parseFloat(row.find('input[name="rate"]').unmask()) * parseFloat(factor);
            item_ids[i] = item_id;
            order_item_ids[i] = row.find('input[name="order_item_id"]').val();
            remarks[i] = row.find('textarea[name="remarks"]').val();
            i++;
        }
    });

    if (receive_date != '' && receiving_sub_location_id != '') {
        modal.modal('hide');
        var comments = modal.find('textarea[name="comments"]').val();
        start_spinner();
        $.post(
            base_url + "procurements/receive_purchase_order/",
            {
                grn_id: grn_id,
                order_id: order_id,
                exchange_rate: exchange_rate,
                freight: freight,
                insurance: insurance,
                clearance_charges: clearance_charges,
                clearance_vat: clearance_vat,
                other_charges: other_charges,
                import_duty: import_duty,
                vat: vat,
                cpf: cpf,
                rdl: rdl,
                wharfage: wharfage,
                service_fee: service_fee,
                factor: factor,
                rejected_quantities: rejected_quantities,
                item_types: item_types,
                item_ids: item_ids,
                order_item_ids: order_item_ids,
                receiving_sub_location_id: receiving_sub_location_id,
                quantities: quantities,
                prices: prices,
                receive_date: receive_date,
                status: status,
                remarks: remarks,
                comments: comments
            }, function (data) {
                if (status == 'PREVIEW') {
                    window.location.replace(base_url + "procurements/preview_grn/" + data.grn_id);
                } else {
                    toast('success', 'Transaction Submitted Successfuly');
                    modal.find('form')[0].reset();
                    modal.find('.unit_display, .total_amount_display').html('');
                    modal.closest('.box').find('#purchase_orders_table,#location_purchase_orders_table').DataTable().draw('page');
                    initialize_requisition_and_order_form();
                    initialize_common_js();
                }
            }, 'json'
        ).complete(function () {
            stop_spinner();
        });
    }
}

function draw_purchase_orders_table(table) {
    if (table.attr('initialized') != 'true') {
        var status_field = table.closest('.box ').find('select[name="status"]');
        var orders_for = table.attr('orders_for'), columns, holder_id;
        if (orders_for == 'all') {
            columns = [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false }
            ];
        } else {
            columns = [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false }
            ];
            holder_id = orders_for == 'stakeholder' ? table.attr('stakeholder_id') : table.attr('location_id');
        }

        table.DataTable({
            "order": [[0, "desc"]],
            "lengthMenu": [[5, 10, 25, 50, 100], [5, 10, 25, 50, 100]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "procurements/purchase_orders/" + orders_for + "/" + holder_id,
                type: 'POST',
                data: function (d) {
                    d.status = status_field.val()
                }
            },
            "columns": columns,
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching purchase orders found</div>",
                "emptyTable": "<div class='alert alert-info'>No purchase orders found</div>"
            }, "drawCallback": function () {
                $(this).find('tr').each(function () {
                    $(this).find('td:last-child').attr('nowrap', 'nowrap');
                });

                status_field.each(function () {
                    if (status_field.attr('initialized') != 'true') {
                        status_field.change(function () {
                            table.DataTable().draw('page');
                        });
                        status_field.attr('initialized', 'true');
                    }
                });

                $('.order_invoice_grn').each(function () {
                    var grn_selector = $(this);
                    var order_id = grn_selector.closest('.modal-body').attr('order_id');
                    if (grn_selector.attr('initialized') != 'true') {
                        var row = grn_selector.closest('tr');
                        var amount_field = row.find('input[name="invoice_amount"]');

                        grn_selector.change(function () {
                            var grn_id = grn_selector.val();
                            if (grn_id.trim() != '') {
                                start_spinner();
                                $.post(
                                    base_url + "procurements/get_grn_cif",
                                    {
                                        grn_id: grn_id,
                                        order_id: order_id
                                    }, function (data) {
                                        var grn_maximum_amount = data.grn_maximum_amount;
                                        amount_field.val(data.grn_maximum_amount).priceFormat();
                                        amount_field.off('keyup change').on('keyup change', function () {
                                            var total_invoiced_amount = row.closest('table').find('.total_invoiced_amount').unmask();
                                            var balance_to_invoice = data.order_cif - total_invoiced_amount;
                                            if (balance_to_invoice < amount_field.unmask()) {
                                                toast('error', 'The total amount will exceed the order CIF value');
                                            }

                                            if (amount_field.unmask() > balance_to_invoice) {
                                                toast('error', 'The amount entered exceeds the remaining uninvoiced amount of ' + grn_maximum_amount);
                                                amount_field.val(balance_to_invoice).priceFormat();
                                            }
                                        });
                                        stop_spinner();
                                    },
                                    'json'
                                );
                            } else {
                                amount_field.val('');
                            }
                        });

                        function initialize_invoice_delete() {
                            $('.delete_grn_invoice').each(function () {
                                var button = $(this);
                                if (button.attr('initialized') != 'true') {
                                    button.click(function () {
                                        $.confirm({
                                            title: 'Delete Invoice',
                                            content: 'This action is irreversible! Are you sure?',
                                            buttons: {
                                                confirm: {
                                                    text: 'Confirm Delete',
                                                    btnClass: 'btn btn-danger btn-xs',
                                                    action: function () {
                                                        start_spinner();
                                                        $.post(
                                                            base_url + "procurements/delete_grn_invoice",
                                                            {
                                                                invoice_id: button.attr('invoice_id'),
                                                                order_id: order_id
                                                            }, function (data) {
                                                                button.closest('tbody').html(data.invoices_tbody);
                                                                initialize_invoice_delete();
                                                            },
                                                            'json'
                                                        ).complete(function () {
                                                            stop_spinner();
                                                        });
                                                    }
                                                },
                                                cancel: {
                                                    text: "Don't Delete",
                                                    btnClass: 'btn btn-default btn-xs'
                                                }
                                            }
                                        });
                                    });
                                    button.attr('initialized', 'true');
                                }
                            });
                        };

                        initialize_invoice_delete();

                        row.find('.save_grn_invoice').click(function () {
                            var invoice_date_field = row.find('input[name="invoice_date"]');
                            var reference_field = row.find('input[name="reference"]');
                            var description_field = row.find('textarea[name="description"]');
                            var invoice_date = invoice_date_field.val().trim();
                            var reference = reference_field.val().trim();
                            var grn_id = grn_selector.val().trim();
                            var invoice_amount = amount_field.unmask();
                            if (grn_id != '' && reference != '' && invoice_amount > 0 && invoice_date != '' && invoice_amount != '') {
                                start_spinner();
                                $.post(
                                    base_url + "procurements/save_grn_invoice",
                                    {
                                        grn_id: grn_id,
                                        reference: reference,
                                        invoice_date: invoice_date,
                                        description: description_field.val(),
                                        invoice_amount: invoice_amount,
                                        currency_id: row.find('input[name="currency_id"]').val(),
                                        order_id: order_id
                                    }, function (data) {
                                        row.closest('table').find('tbody').html(data.invoices_tbody);
                                        initialize_invoice_delete();
                                    },
                                    'JSON'
                                ).complete(function () {
                                    invoice_date_field.val('');
                                    reference_field.val('');
                                    description_field.val('');
                                    grn_selector.select2('val', '');
                                    amount_field.val('');
                                    stop_spinner();
                                });
                            } else {
                                display_form_fields_error();
                            }
                        });

                        grn_selector.attr('initialized', 'true');
                    }
                });

                $('.order_general_invoice_stakeholder').each(function () {
                    var stakeholder_selector = $(this);
                    var order_id = stakeholder_selector.closest('.modal-body').attr('order_id');
                    if (stakeholder_selector.attr('initialized') != 'true') {
                        var row = stakeholder_selector.closest('tr');

                        row.find('.save_order_invoice').each(function () {
                            var button = $(this);
                            if (button.attr('initilaized') != 'true') {
                                button.click(function () {
                                    var invoice_date_field = row.find('input[name="invoice_date"]');
                                    var amount_field = row.find('input[name="invoice_amount"]');
                                    var reference_field = row.find('input[name="reference"]');
                                    var description_field = row.find('textarea[name="description"]');
                                    var invoice_date = invoice_date_field.val().trim();
                                    var reference = reference_field.val().trim();
                                    var stakeholder_id = stakeholder_selector.val().trim();
                                    var invoice_amount = amount_field.unmask();
                                    if (stakeholder_id != '' && invoice_amount > 0 && invoice_date != '' && invoice_amount != '') {
                                        start_spinner();
                                        $.post(
                                            base_url + "procurements/save_order_invoice",
                                            {
                                                stakeholder_id: stakeholder_id,
                                                reference: reference,
                                                invoice_date: invoice_date,
                                                description: description_field.val(),
                                                invoice_amount: invoice_amount,
                                                currency_id: row.find('select[name="currency_id"]').val(),
                                                order_id: order_id
                                            }, function (data) {
                                                row.closest('table').find('tbody').html(data.invoices_tbody);
                                                initialize_invoice_delete();
                                            },
                                            'JSON'
                                        ).complete(function () {
                                            invoice_date_field.val('');
                                            reference_field.val('');
                                            description_field.val('');
                                            stakeholder_selector.select2('val', '');
                                            amount_field.val('');
                                            stop_spinner();
                                        });
                                    } else {
                                        display_form_fields_error();
                                    }
                                });
                                button.attr('initilaized', 'true');
                            }
                        });

                        function initialize_invoice_delete() {
                            $('.delete_order_invoice').each(function () {
                                var button = $(this);
                                if (button.attr('initialized') != 'true') {
                                    button.click(function () {
                                        $.confirm({
                                            title: 'Delete Invoice',
                                            content: 'This action is irreversible! Are you sure?',
                                            buttons: {
                                                confirm: {
                                                    text: 'Confirm Delete',
                                                    btnClass: 'btn btn-danger btn-xs',
                                                    action: function () {
                                                        start_spinner();
                                                        $.post(
                                                            base_url + "procurements/delete_order_invoice",
                                                            {
                                                                invoice_id: button.attr('invoice_id'),
                                                                order_id: order_id
                                                            }, function (data) {
                                                                button.closest('tbody').html(data.invoices_tbody);
                                                                initialize_invoice_delete();
                                                            },
                                                            'json'
                                                        ).complete(function () {
                                                            stop_spinner();
                                                        });
                                                    }
                                                },
                                                cancel: {
                                                    text: "Don't Delete",
                                                    btnClass: 'btn btn-default btn-xs'
                                                }
                                            }
                                        });
                                    });
                                    button.attr('initialized', 'true');
                                }
                            });
                        };

                        initialize_invoice_delete();

                        stakeholder_selector.attr('initialized', 'true');
                    }
                });

                $('.cancel_purchase_order').each(function () {
                    var submit_button = $(this);
                    if (submit_button.attr('initialized') != 'true') {

                        submit_button.click(function () {
                            var order_id = submit_button.attr('order_id');
                            $.confirm({
                                title: 'Cancel Purchase Order No.' + order_id,
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Cancel',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            var form = submit_button.closest('form');
                                            var cancellation_date = form.find('input[name="cancellation_date"]').val().trim();
                                            var reason = form.find('textarea[name="reason"]').val().trim();
                                            if (cancellation_date != '' && reason != '') {
                                                start_spinner();
                                                $.post(
                                                    base_url + "procurements/cancel_purchase_order",
                                                    {
                                                        order_id: order_id,
                                                        reason: reason,
                                                        cancellation_date: cancellation_date
                                                    }, function (data) {
                                                        toast('success', data);
                                                        submit_button.closest('.modal').modal('hide');
                                                        submit_button.closest('table').DataTable().draw('page');
                                                        stop_spinner();
                                                    }
                                                );
                                            } else {
                                                display_form_fields_error();
                                            }
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Cancel",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });

                        submit_button.attr('initialized', 'true');
                    }
                });

                $('.close_purchase_order').each(function () {
                    var submit_button = $(this);
                    if (submit_button.attr('initialized') != 'true') {

                        submit_button.click(function () {
                            var order_id = submit_button.attr('order_id');
                            $.confirm({
                                title: 'Close Purchase Order No.' + order_id,
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Close',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            var form = submit_button.closest('form');
                                            var closing_date = form.find('input[name="closing_date"]').val().trim();
                                            var remarks = form.find('textarea[name="remarks"]').val().trim();
                                            if (closing_date != '') {
                                                start_spinner();
                                                $.post(
                                                    base_url + "procurements/close_purchase_order",
                                                    {
                                                        order_id: order_id,
                                                        remarks: remarks,
                                                        closing_date: closing_date
                                                    }, function (data) {
                                                        toast('success', data);
                                                        submit_button.closest('.modal').modal('hide');
                                                        submit_button.closest('table').DataTable().draw('page');
                                                        stop_spinner();
                                                    }
                                                );
                                            } else {
                                                display_form_fields_error();
                                            }
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Close",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });

                        submit_button.attr('initialized', 'true');
                    }
                });

                $('.purchase_order_invoices').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        modal.on('show.bs.modal', function () {
                            var head_row = modal.find('thead tr');

                            var validate_typed_amount = function (container) {
                                container.delegate('input[name="invoice_amount"]', 'change keyup', function () {
                                    var amount_input = container.find('input[name="invoice_amount"]');
                                    var amount_buffer = container.find('input[name="amount_buffer"]');
                                    var flag = amount_buffer.attr('flag');
                                    if ($(this).attr('initialized') != 'true') {
                                        if (flag == 1) {
                                            var amount = amount_input.unmask();
                                            amount = amount != '' ? parseFloat(amount) : 0;
                                            var buffered_amount = amount_buffer.val();
                                            buffered_amount = buffered_amount != '' ? parseFloat(buffered_amount) : 0;
                                            if (amount > buffered_amount) {
                                                toast('error', 'The amount ' + amount + ' you entered exceeds ' + buffered_amount + ' as univoiced amount from supplier');
                                                container.find('input[name="invoice_amount"]').val(buffered_amount).change();
                                            }
                                        }
                                    }
                                });
                            };

                            head_row.delegate(' input[name="invoice_amount"], select[name="stakeholder_id"] ', 'change keyup', function () {
                                var order_id = head_row.find('input[name="order_id"]').val();
                                var vendor_id = head_row.find('select[name="stakeholder_id"]').val();
                                if (vendor_id != '') {
                                    $.post(
                                        base_url + "procurements/validate_invoice_amount_against_order",
                                        {
                                            vendor_id: vendor_id,
                                            order_id: order_id

                                        }, function (data) {
                                            head_row.find('input[name="amount_buffer"]').val(data.amount);
                                            head_row.find('input[name="amount_buffer"]').attr('flag', data.flag);
                                        }, 'json'
                                    )
                                }
                            });

                            validate_typed_amount(head_row);
                        });
                        modal.attr('initalized', 'true');
                    }
                });

                $('.procurement_attachment_modal').each(function () {
                    var modal = $(this);
                    modal.on('show.bs.modal', function (e) {
                        update_procurements_attachments(modal);
                    });
                });

                procurement_attach();
                initialize_requisition_and_order_form();
                initialize_common_js();
            }
        });
        table.attr('initialized', 'true');
    } else {
        table.DataTable().draw('page');
    }
}

$('#goods_received_notes_preview').each(function () {
    var container = $(this);
    window.addEventListener('DOMContentLoaded', function () {
        initialize_requisition_and_order_form();
    });
});

$('#purchase_orders_table').each(function () {
    draw_purchase_orders_table($(this));
});

$('#purchase_order_grns_table').DataTable({
    "order": [[0, "desc"]],
    colReorder: true,
    "processing": true,
    "serverSide": true,
    "ajax": {
        url: base_url + "procurements/purchase_orders_grns/",
        type: 'POST'
    },
    "columns": [
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": false },
        { "orderable": true },
        { "orderable": false }
    ],
    "language": {
        "zeroRecords": "<div class='alert alert-info'>No matching GRNs found</div>",
        "emptyTable": "<div class='alert alert-info'>No GRNs found</div>"
    }, "drawCallback": function () {
        $(this).find('tr').each(function () {
            $(this).find('td:last-child').attr('nowrap', 'nowrap');
        });

        $('.procurement_attachment_modal').each(function () {
            var modal = $(this);
            modal.on('show.bs.modal', function (e) {
                update_procurements_attachments(modal);
            });
        });

        procurement_attach();
        initialize_common_js();
    }
});

/***************************************************
 * STAKEHOLDERS
 ***************************************************/
$('#stakeholders_list').DataTable({
    colReorder: true,
    "processing": true,
    "serverSide": true,
    "ajax": {
        url: base_url + "stakeholders/",
        type: 'POST'
    },
    "columns": [
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": true }
    ],
    "language": {
        "zeroRecords": "<div class='alert alert-info'>No matching stakeholder(s) found</div>",
        "emptyTable": "<div class='alert alert-info'>No stakeholder(s) found</div>"
    }
});

$('a[href="#stakeholder_projects_tab"]').on('shown.bs.tab', function (e) {
    $('#stakeholders_projects_table').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {
            var stakeholder_id = table.attr('stakeholder_id');
            table.DataTable({
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "stakeholders/lists/" + stakeholder_id + "/project",
                    type: 'POST'
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching projects found for this client</div>",
                    "emptyTable": "<div class='alert alert-info'>No projects found for this client</div>"
                }
            });
            table.attr('initialized', 'true');
        }
    });
});

$('a[href="#stakeholder_sub_contracts_tab"]').on('shown.bs.tab', function (e) {
    $('#stakeholder_sub_contracts_list').each(function () {
        var table = $(this);
        var stakeholder_id = table.attr('stakeholder_id');
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "stakeholders/sub_contracts_list/" + stakeholder_id,
                    type: 'POST'
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching sub-contracts found</div>",
                    "emptyTable": "<div class='alert alert-info'>No sub-contracts found</div>"

                },
                "drawCallback": function () {
                    $(this).find('tr').each(function () {
                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                    });

                    initialize_common_js();
                }
            });
            table.attr('initialized', 'true');
        }
    });
});

$('a[href="#stakeholder_purchase_orders_tab"]').on('shown.bs.tab', function (e) {
    $('#stakeholder_purchase_orders').each(function () {
        if ($(this).attr('initialized') != 'true')
            draw_purchase_orders_table($(this));
        $(this).attr('initialized', 'true');
    });
});

function draw_stakeholder_invoices_table() {
    $('.stakeholder_invoices_list').each(function () {
        var table = $(this);
        var stakeholder_id = table.attr('stakeholder_id');
        if (table.attr('initialized') != 'true')
            table.DataTable({
                'processing': true,
                'serverSide': true,
                'order': [[0, 'desc']],
                'ajax': {
                    url: base_url + "Procurements/stakeholder_invoices_list/" + stakeholder_id,
                    type: 'POST',
                },
                'columns': [
                    { 'orderable': true },
                    { 'orderable': true },
                    { 'orderable': true },
                    { 'orderable': false },
                    { 'orderable': false },
                    { 'orderable': false }
                ],
                'language': {
                    "zeroRecords": "<div class='alert alert-info'>No matching invoice found</div>",
                    "emptyTable": "<div class='alert alert-info'>No invoices found</div>"
                },
                'drawCallback': function () {

                    table.find('tr td:last-child').attr('nowrap', 'nowrap');

                    initialize_common_js();
                }
            });
        table.attr('initialized', 'true');
    });
}

draw_stakeholder_invoices_table()

$('a[href="#stakeholder_invoices_tab"]').on('shown.bs.tab', function (e) {
    draw_stakeholder_invoices_table()
});

$('a[href="#stakeholder_sales_tab"]').on('shown.bs.tab', function (e) {
    var stakeholder_id = $(this).attr('stakeholder_id');
    $('#stakeholder_sales_table').each(function () {
        draw_sales_table($(this), 'stakeholder', stakeholder_id);
    });
});

$('a[href="#stakeholder_reports_tab"]').on('shown.bs.tab', function (e) {
    $('#generate_stakeholder_report').off('click').on('click', function () {
        start_spinner();
        var form = $(this).closest('form');
        $.post(
            base_url + "procurements/stakeholder_reports",
            {
                report_type: form.find('select[name="report_type"]').val(),
                stakeholder_id: form.find('input[name="stakeholder_id"]').val(),
                from: form.find('input[name="from"]').val(),
                currency_id: form.find('select[name="currency_id"]').val(),
                to: form.find('input[name="to"]').val(),
                report_category: form.find('select[name="report_category"]').val()
            }, function (data) {
                $('#stakeholder_report_container').html(data);
            }
        ).complete(function () {
            stop_spinner();
        });
    });

    $('.stakeholder_report_type').on('keyup change', function () {
        var report_type = $(this).val();
        var currency_fg = $(this).closest('.box-tools').find('.currency_fg');
        var report_category_fg = $(this).closest('.box-tools').find('.report_category_fg');
        var currency_field = currency_fg.find('select[name="currency_id"]');
        var report_category_field = report_category_fg.find('select[name="report_category"]');
        if (report_type == 'supplied_items_report') {
            currency_fg.hide();
            report_category_fg.show();
        } else {
            currency_fg.show();
            report_category_fg.hide();
        }
    });
});

$('.stakeholder_evaluation').each(function () {
    var table = $(this);

    function trigger_change(selector_value, display_id) {
        $.post(
            base_url + 'stakeholders/check_points',
            {
                selector_value: selector_value
            }, function (data) {
                document.getElementById(display_id).innerHTML = data + ' %';
                var total_points = parseInt(document.querySelector("#general_experience_points").textContent)
                    + parseInt(document.querySelector("#certificates_of_comletion_points").textContent)
                    + parseInt(document.querySelector("#team_supervisors_points").textContent)
                    + parseFloat(document.querySelector("#financial_capacity_points").textContent)
                    + parseInt(document.querySelector("#casual_laborers_points").textContent);

                document.getElementById("total_points").innerHTML = '<strong>' + total_points + ' %</strong>';

            }
        )

    }

    table.find('select[name="general_experience"]').change(function () {
        trigger_change(table.find('select[name="general_experience"]').val(), "general_experience_points");
    });
    table.find('select[name="certificates_of_comletion"]').change(function () {
        trigger_change(table.find('select[name="certificates_of_comletion"]').val(), "certificates_of_comletion_points");
    });
    table.find('select[name="team_supervisors"]').change(function () {
        trigger_change(table.find('select[name="team_supervisors"]').val(), "team_supervisors_points");
    });
    table.find('select[name="financial_capacity"]').change(function () {
        trigger_change(table.find('select[name="financial_capacity"]').val(), "financial_capacity_points");
    });
    table.find('select[name="casual_laborers"]').change(function () {
        trigger_change(table.find('select[name="casual_laborers"]').val(), "casual_laborers_points");
    });
    table.find('select[name="contractor_id"]').change(function () {
        trigger_change(table.find('select[name="contractor_id"]').val(), "contractor_id_points");
    });

    $('.save_stakeholder_evaluation').click(function () {

        var general_experience = table.find('select[name="general_experience"]').val();
        var certificates_of_comletion = table.find('select[name="certificates_of_comletion"]').val();
        var team_supervisors = table.find('select[name="team_supervisors"]').val();
        var financial_capacity = table.find('select[name="financial_capacity"]').val();
        var casual_laborers = table.find('select[name="casual_laborers"]').val();
        var stakeholder_id = table.find('input[name="stakeholder_id"]').val();

        start_spinner();
        $.post(
            base_url + 'stakeholders/save_stakeholder_evaluation',
            {
                general_experience: general_experience,
                certificates_of_comletion: certificates_of_comletion,
                team_supervisors: team_supervisors,
                financial_capacity: financial_capacity,
                casual_laborers: casual_laborers,
                stakeholder_id: stakeholder_id
            }, function () {
                document.getElementById("evaluation_status").innerHTML = '';
                document.getElementById("evaluation_status").innerHTML = '<span style="color: #06d604"><strong>Evaluated</strong></span>';
                stop_spinner();
            }
        )

    });


});

$('#generate_contractors_evaluation_report').click(function () {

    var form = $(this).closest('form');

    var contractors_ids = form.find('.contractors_ids').val();

    if (contractors_ids != '' && contractors_ids != ' ' && contractors_ids != null) {
        start_spinner();
        $.post(
            base_url + 'stakeholders/contractors_evaluation',
            {
                contractors_ids: contractors_ids
            }, function (data) {
                $('#multiple_evaluation_container').html(data);
                stop_spinner();
            }
        )

    } else {
        display_form_fields_error();
    }
});


/***************************************************
 * PROCUREMENTS
 ***************************************************/
$('#generate_purchase_order_status_report').click(function () {
    var from = $(this).closest('form').find('input[name="from"]').val();
    var to = $(this).closest('form').find('input[name="to"]').val();
    var vendor_id = $(this).closest('form').find('select[name="vendor_id"]').val();
    start_spinner();
    $.post(
        base_url + "procurements/purchase_order_status",
        {
            triggered: true,
            from: from,
            to: to,
            vendor_id: vendor_id
        }, function (data) {
            //$('#report_container').html(data);
            stop_spinner();

            stop_spinner();

            Highcharts.setOptions({
                lang: {
                    decimalPoint: '.',
                    thousandsSep: ', '
                }
            });

            $('#chart_container').highcharts({
                exporting: {
                    chartOptions: { // specific options for the exported image
                        plotOptions: {
                            series: {
                                dataLabels: {
                                    enabled: true
                                }
                            }
                        }
                    },
                    fallbackToExportServer: false
                },
                chart: {
                    type: 'column'
                },
                title: {
                    text: 'Purchase Order Status'
                },
                subtitle: {
                    text: data.sub_title
                },
                xAxis: {
                    type: 'category'
                },
                yAxis: {
                    title: {
                        text: 'Amount'
                    }

                },
                legend: {
                    enabled: false
                },
                plotOptions: {
                    series: {
                        borderWidth: 0,
                        dataLabels: {
                            enabled: true,
                            format: '{point.y:,.1f}'
                        }
                    }
                },

                tooltip: {
                    headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                    pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:,.2f}</b><br/>'
                },

                series: [{
                    name: 'General Summary',
                    colorByPoint: true,
                    data: [{
                        name: 'Ordered',
                        y: parseFloat(data.total_orders_value),
                        drilldown: 'ordered_drilldown'
                    }, {
                        name: 'Received',
                        y: parseFloat(0),
                        drilldown: 'Received'
                    }, {
                        name: 'Invoiced',
                        y: parseFloat(0),
                        drilldown: 'Invoiced'
                    }, {
                        name: 'Un-invoiced',
                        y: parseFloat(0),
                        drilldown: 'Uninvoiced'
                    }, {
                        name: 'Paid',
                        y: parseFloat(0),
                        drilldown: 'paid'
                    }, {
                        name: 'Un-paid',
                        y: parseFloat(0),
                        drilldown: 'Unpaid'
                    }]
                }],
                drilldown: {
                    series: data.drilldown
                }
            });
        },
        'JSON'
    );
});

$('.purchase_order_payment_request_list').each(function () {
    var table = $(this);
    var status_field = table.closest('.box ').find('select[name="status"]');
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[0, "DESC"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "procurements/order_payment_requests/",
                type: 'POST',
                data: function (d) {
                    d.status = status_field.val()
                }
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching purchase order found</div>",
                "emptyTable": "<div class='alert alert-info'>No pending purchase order found</div>"
            }, "drawCallback": function (settings) {

                table.find('#total_requested_amount_display').text(settings.json.total_requested_amount).priceFormat({ 'decimal': 2 });

                table.find('tr td:last-child').attr('nowrap', 'nowrap');

                status_field.each(function () {
                    if (status_field.attr('initialized') != 'true') {
                        status_field.change(function () {
                            table.DataTable().draw('page');
                        });
                        status_field.attr('initialized', 'true');
                    }
                });

                var approve_order_payment_request = function (button) {
                    if (button.attr('initialized') != "true") {
                        var modal = button.closest('.modal');
                        button.click(function () {
                            var i = 0, error = 0;
                            var amounts = new Array();
                            var claimed_by = new Array();
                            var item_types = new Array();
                            var purchase_order_payment_request_invoice_item_ids = new Array();
                            var purchase_order_payment_request_cash_item_ids = new Array();

                            var forward_to = modal.find('tfoot select[name="forward_to"]').val();
                            var tbody = modal.find('tbody');
                            tbody.find('tr input[name="item_type"]').each(function () {
                                var item_type = $(this).val();
                                var row = $(this).closest('tr');
                                if (item_type == "invoice") {
                                    purchase_order_payment_request_invoice_item_ids[i] = row.find('input[name="purchase_order_payment_request_invoice_item_id"]').val();
                                } else {
                                    purchase_order_payment_request_cash_item_ids[i] = row.find('input[name="purchase_order_payment_request_cash_item_id"]').val();
                                }
                                item_types[i] = item_type;
                                amounts[i] = row.find('input[name="amount"]').val();
                                claimed_by[i] = row.find('textarea[name="claimed_by"]').val();
                                i++;

                            });

                            if (error == 0) {
                                var purchase_order_payment_request_id = modal.find('input[name="purchase_order_payment_request_id"]').val();
                                var approval_date = modal.find('input[name="approval_date"]').val();
                                var approval_chain_level_id = modal.find('input[name="approval_chain_level_id"]').val();
                                var comments = modal.find('textarea[name="comments"]').val();
                                var status = button.hasClass('reject_order_payment_request_approval') ? 'REJECTED' : '';
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "procurements/save_order_payment_requests_approval",
                                    {

                                        purchase_order_payment_request_id: purchase_order_payment_request_id,
                                        approval_date: approval_date,
                                        approval_chain_level_id: approval_chain_level_id,
                                        item_types: item_types,
                                        comments: comments,
                                        status: status,
                                        forward_to: forward_to,
                                        purchase_order_payment_request_invoice_item_ids: purchase_order_payment_request_invoice_item_ids,
                                        purchase_order_payment_request_cash_item_ids: purchase_order_payment_request_cash_item_ids,
                                        amounts: amounts,
                                        claimed_by: claimed_by
                                    }, function (data) {
                                        modal.find('form')[0].reset();
                                        modal.find('tbody .artificial_row').remove();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                    }
                                ).complete();
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                };

                var update_payment_request_attachments = function (form_container) {
                    var payment_request_attachments_container = form_container.find(' .payment_request_attachments_container');
                    var purchase_order_payment_request_id = payment_request_attachments_container.attr('purchase_order_payment_request_id');
                    $.post(
                        base_url + "attachments/purchase_order_payment_request_attachments",
                        {
                            purchase_order_payment_request_id: purchase_order_payment_request_id
                        }, function (data) {
                            form_container.find('form').get(0).reset();
                            form_container.find('button').removeAttr('disabled');
                            payment_request_attachments_container.html(data);
                            payment_request_attachments_container.find('.delete_attachment').each(function () {
                                delete_payment_request_attachment($(this));
                            });
                        }
                    ).complete();
                };

                var delete_payment_request_attachment = function (button) {
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Attachment',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger btn-xs',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "attachments/delete_attachment",
                                                {
                                                    attachment_id: button.attr('attachment_id')
                                                }, function () {
                                                    update_payment_request_attachments(button.closest('.modal'))
                                                    stop_spinner();
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Cancel",
                                        btnClass: 'btn btn-default btn-xs'
                                    }
                                }
                            });
                        });
                    }
                };

                $('.order_payment_request_form, .order_payment_request_approval_form').on("show.bs.modal", function (e) {
                    var modal = $(this);
                    var table = modal.find('table');

                    var validate_typed_amount = function (container) {
                        container.delegate('input[name="amount"]', 'change keyup', function () {
                            var amount_input = container.find('input[name="amount"]');
                            var amount_buffer = container.find('input[name="amount_buffer"]');
                            if ($(this).attr('initialized') != 'true') {
                                var amount = container.find('input[name="amount"]').unmask();
                                amount = amount != '' ? parseFloat(amount) : 0;
                                var buffered_amount = amount_buffer.val();
                                buffered_amount = buffered_amount != '' ? parseFloat(buffered_amount) : 0;
                                if (amount > buffered_amount) {
                                    toast('error', 'The amount ' + amount + ' you entered exceeds ' + buffered_amount + ' which is the Order amount');
                                    container.find('input[name="amount"]').val(buffered_amount).change();
                                }
                            }
                        });

                    };

                    var get_invoice_details = function (container) {
                        container.find('select[name="invoice_id"]').change(function () {
                            var amount_input = container.find('input[name="amount"]');
                            var amount_buffer = container.find('input[name="amount_buffer"]');
                            amount_input.val('');
                            amount_buffer.val('');
                            if ($(this).attr('initialized') != 'true') {
                                var invoice_id = $(this).val();
                                if (invoice_id != '') {
                                    start_spinner();
                                    $.post(
                                        base_url + "procurements/get_invoice_details/",
                                        {
                                            invoice_id: invoice_id
                                        }, function (data) {
                                            amount_input.val(data.amount);
                                            amount_buffer.val(data.amount).change();
                                            container.find('input[name="description"]').val(data.description);
                                            container.find('input[name="vendor_name"]').val(data.stakeholder_name);

                                        },
                                        'json'
                                    ).complete(function () {
                                        stop_spinner();
                                    });
                                } else {
                                    amount_input.val('');
                                    amount_buffer.val('');
                                    container.find('input[name="description"]').val('');
                                    container.find('input[name="vendor_name"]').val('');
                                }

                            } else {
                                $(this).attr('initialized', 'true');
                            }
                        });
                    };

                    var validate_selected_invoice = function (row) {
                        row.find('select[name="invoice_id"]').change(function () {
                            if ($(this).val().trim() != '') {
                                var invoice_ids = Array(), current_selector = $(this);
                                row.closest('tbody').find('select[name="invoice_id"]').each(function () {
                                    if (current_selector[0] !== $(this)[0]) {
                                        invoice_ids.push($(this).val());
                                    }
                                });
                                if (invoice_ids.indexOf(current_selector.val()) != -1) {
                                    current_selector.select2('val', '');
                                    row.find('input[name="description"],input[name="amount"],input[name="vendor_name"]').val('').change();
                                }
                            }
                        });
                    };

                    update_payment_request_attachments(modal);

                    modal.find('select[name="order_id"],select[name="currency_id"]').each(function () {
                        if ($(this).attr('initialized') != 'true') {
                            $(this).change(function () {
                                var order_selector = modal.find('select[name="order_id"]');
                                var currency_selector = modal.find('select[name="currency_id"]');
                                var order_id = order_selector.val();
                                var currency_id = currency_selector.val();
                                var display_invoice = order_selector.closest('.modal').find('select[name="invoice_id"]');
                                var order_requests_container = modal.find('.order_requests_container');
                                if (order_id != '') {
                                    start_spinner();
                                    $.post(
                                        base_url + "procurements/get_purchase_order_invoices",
                                        {
                                            order_id: order_id,
                                            currency_id: currency_id
                                        }, function (data) {
                                            display_invoice.html(data.invoice_options).change();
                                            order_requests_container.html(data.requested_invoices);
                                            stop_spinner();
                                        },
                                        'json'
                                    ).complete();
                                } else {
                                    display_invoice.html('<option></option>').change();
                                }
                            });
                            $(this).attr('initialized', 'true');
                        }
                    });

                    calculate_table_total_amount(table);

                    modal.delegate(' input[name="amount"]', 'change keyup', function () {
                        calculate_table_total_amount(table);
                    });

                    modal.find('.payment_request_attachments_activator').each(function () {
                        var attachments_tab = $(this);
                        attachments_tab.on('shown.bs.tab', function () {
                            attachments_tab.find('.delete_attachment').each(function () {
                                delete_payment_request_attachment($(this));
                            });
                        })
                    });

                    modal.find('tbody tr').each(function () {
                        var row = $(this);
                        row.find('.row_remover').click(function () {
                            var table = $(this).closest('table');
                            $(this).closest('tr').remove();
                        });
                        validate_selected_invoice(row);
                        get_invoice_details(row);
                        validate_typed_amount(row);
                    });

                    modal.find('.invoice_row_adder').each(function () {
                        if ($(this).attr('initialized') != 'true') {
                            $(this).click(function () {
                                var tbody = $(this).closest('.row').find('tbody');
                                var new_row = tbody.closest('table').find('.invoice_row_template').clone().removeAttr('style')
                                    .removeClass('invoice_row_template').addClass('artificial_row').appendTo(tbody);

                                new_row.find('select').select2();

                                new_row.find('.number_format').priceFormat();

                                validate_selected_invoice(new_row);

                                get_invoice_details(new_row);

                                validate_typed_amount(new_row);

                                new_row.find('.row_remover').click(function () {
                                    var table = $(this).closest('table');
                                    $(this).closest('tr').remove();
                                    calculate_table_total_amount(table)
                                });
                                initialize_common_js();
                            });
                            $(this).attr('initialized', 'true');
                        }
                    });

                    modal.find('.cash_row_adder').each(function () {
                        if ($(this).attr('initialized') != 'true') {
                            $(this).click(function () {
                                var tbody = $(this).closest('.row').find('tbody');
                                var new_row = tbody.closest('table').find('.cash_row_template').clone().removeAttr('style')
                                    .removeClass('cash_row_template').addClass('artificial_row').appendTo(tbody);

                                new_row.find('select').select2();

                                new_row.find('.number_format').priceFormat();

                                new_row.find('.row_remover').click(function () {
                                    var table = $(this).closest('table');
                                    $(this).closest('tr').remove();
                                    calculate_table_total_amount(table)
                                });
                                initialize_common_js();
                            });
                            $(this).attr('initialized', 'true');
                        }
                    });

                });

                $('.purchase_order_payment_request_attachements_modal').each(function () {
                    var modal = $(this);
                    modal.on('shown.bs.modal', function (e) {
                        update_payment_request_attachments(modal);
                        modal.find('.delete_attachment').each(function () {
                            delete_payment_request_attachment($(this));
                        });
                    });
                });

                $('.submit_order_payment_request_approval').each(function () {
                    var button = $(this);
                    approve_order_payment_request(button);
                });

                $('.reject_order_payment_request_approval').each(function () {
                    var button = $(this);
                    approve_order_payment_request(button);
                });

                $('.submit_order_payment_request').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != "true") {

                        var modal = button.closest('.modal');
                        button.click(function () {
                            var purchase_order_payment_request_id = modal.find('input[name="purchase_order_payment_request_id"]').val();
                            var i = 0, error = 0;
                            var descriptions = new Array();
                            var amounts = new Array();
                            var item_types = new Array();
                            var invoice_ids = new Array();
                            var references = new Array();
                            var claimers = new Array();

                            var forward_to = modal.find('tfoot select[name="forward_to"]').val();
                            var tbody = modal.find('tbody');
                            tbody.find('input[name="item_type"]').each(function () {
                                var item_type = $(this).val();
                                var row = $(this).closest('tr');
                                if (item_type == "invoice") {
                                    invoice_ids[i] = row.find('select[name="invoice_id"]').val();
                                    if (invoice_ids[i] == '') {
                                        error++;
                                    }
                                } else {
                                    claimers[i] = row.find('input[name="claimed_by"]').val();
                                    references[i] = row.find('input[name="reference"]').val();
                                }
                                item_types[i] = item_type;
                                descriptions[i] = row.find('input[name="description"]').val();
                                amounts[i] = row.find('input[name="amount"]').val();
                                i++;

                            });

                            if (error == 0 && item_types.length > 0) {
                                var order_id = modal.find('select[name="order_id"]').val();
                                var currency_id = modal.find('select[name="currency_id"]').val();
                                var request_date = modal.find('input[name="request_date"]').val();
                                var remarks = modal.find('textarea[name="remarks"]').val();
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "procurements/save_order_payment_request",
                                    {

                                        purchase_order_payment_request_id: purchase_order_payment_request_id,
                                        order_id: order_id,
                                        currency_id: currency_id,
                                        request_date: request_date,
                                        forward_to: forward_to,
                                        item_types: item_types,
                                        claimers: claimers,
                                        invoice_ids: invoice_ids,
                                        references: references,
                                        descriptions: descriptions,
                                        amounts: amounts,
                                        remarks: remarks
                                    }, function (data) {
                                        modal.find('form')[0].reset();
                                        modal.find('tbody .artificial_row').remove();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                    }
                                ).complete();
                            }

                        });

                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_payment_request').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete This Payment Request',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(base_url + "procurements/delete_payment_request",
                                                {
                                                    payment_request_id: button.attr('payment_request_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                });
                                        }
                                    },
                                    cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                                }
                            });
                        });
                    }
                });

                $('.purchase_order_payment_request_attach').each(function () {
                    var button = $(this);
                    if (button.attr('active') != 'true') {
                        button.click(function () {
                            var form_container = $(this).closest('.modal');
                            var captured = form_container.find(' input[name="file"] ')[0];
                            var caption = form_container.find(' input[name="caption"] ').val();
                            var purchase_order_payment_request_id = form_container.find(' input[name="purchase_order_payment_request_id"] ').val();
                            var file = captured.files[0], formdata = false;
                            form_container.find('.purchase_order_payment_request_attach').attr('disabled', 'disabled');
                            if (window.FormData) {
                                formdata = new FormData();

                                if (formdata) {
                                    start_spinner();
                                    formdata.append("file", file);
                                    formdata.append("caption", caption);
                                    formdata.append("purchase_order_payment_request_id", purchase_order_payment_request_id);

                                    $.ajax({
                                        url: base_url + 'attachments/save_payment_request_attachment/',
                                        type: "POST",
                                        timeout: 250000,
                                        cache: false,
                                        data: formdata,
                                        processData: false,
                                        contentType: false,
                                        success: function (data) {
                                            update_payment_request_attachments(form_container);
                                            stop_spinner();
                                        }
                                    });

                                }
                                button.attr('active', 'true');
                            }
                        });
                    }
                });

                initialize_common_js();
            }
        });
    } else {
        table.attr('initialized', 'true');
        table.DataTable().draw('page');
    }
});

$('#generate_purchase_order_report').off('click').on('click', function () {
    var form = $(this).closest('form');
    var report_type = form.find('select[name="report_type"]').val();
    var vendor_id = form.find('select[name="vendor_id"]').val();
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();

    start_spinner();
    $.post(
        base_url + "procurements/orders_report",
        {
            report_type: report_type,
            vendor_id: vendor_id,
            from: from,
            triggered: true,
            to: to
        }, function (data) {
            $('#purchase_order_report_container').html(data);
        }
    ).complete(function () {
        stop_spinner();
    });

});

/*************************************************************************************
 * FINANCE
 *************************************************************************************/

$('#accounts_list').each(function () {
    var table = $(this);
    var account_group = table.attr('account_group');
    var currency_field = table.closest('.box ').find('select[name="currency"]');
    var columns;
    if (account_group == "BANK") {
        columns = [
            { "orderable": true },
            { "orderable": false },
            { "orderable": true },
            { "orderable": true },
            { "orderable": false },
            { "orderable": false }
        ];
    } else if (account_group == "CASH_IN_HAND" || account_group == "LEDGER") {
        columns = [
            { "orderable": true },
            { "orderable": false },
            { "orderable": true },
            { "orderable": false },
            { "orderable": false }
        ];
    } else {
        columns = [
            { "orderable": true },
            { "orderable": false },
            { "orderable": false }
        ];
    }
    table.DataTable({
        colReorder: true,
        "processing": true,
        "serverSide": true,
        "ajax": {
            url: base_url + "finance/accounts/" + account_group,
            type: 'POST',
            data: function (e) {
                e.currency_id = currency_field.val();
            }
        },
        "columns": columns,
        "language": {
            "zeroRecords": "<div class='alert alert-info'>No matching account(s) found</div>",
            "emptyTable": "<div class='alert alert-info'>No account(s) found</div>"
        }, "drawCallback": function () {

            table.find('tr').each(function () {
                $(this).find('td:last-child').attr('nowrap', 'nowrap');
            });

            currency_field.each(function () {
                if (currency_field.attr('initialized') != 'true') {
                    currency_field.change(function () {
                        table.DataTable().draw('page');
                    });
                    currency_field.attr('initialized', 'true');
                }
            });

            $('.save_account').each(function () {
                var button = $(this);
                if (button.attr('active') != 'true') {
                    var modal = button.closest('.modal');
                    var account_group_field = modal.find('select[name="account_group_id"]');
                    var all_group_options = account_group_field.html();
                    modal.find('select[name="account_for"]').on('change keyup', function () {
                        var account_for = $(this).val();
                        var related_to_field = modal.find('select[name="related_to"]');
                        if (account_for == 'other') {
                            related_to_field.attr('disabled', 'disabled');
                            related_to_field.html('<option></option>').change();
                            account_group_field.html(all_group_options).change();
                        } else {
                            related_to_field.removeAttr('disabled');
                            start_spinner();
                            var account_groups = [];
                            if (account_for == 'project') {
                                $.post(
                                    base_url + "projects/load_project_dropdown_options",
                                    {

                                    }, function (data) {
                                        related_to_field.html(data).change();
                                    }
                                ).complete();
                            } else if (account_for == 'cost_center') {
                                $.post(
                                    base_url + "costs/load_cost_center_dropdown_options",
                                    {

                                    }, function (data) {
                                        related_to_field.html(data).change();
                                    }
                                ).complete();
                            }

                            $.post(
                                base_url + "finance/load_account_group_options",
                                {
                                    account_groups: account_groups
                                }, function (data) {
                                    account_group_field.html(data).change();
                                    stop_spinner();
                                }
                            ).complete();
                        }
                    });

                    modal.find('select[name="account_group_id"]').on('change keyup', function () {
                        var account_group_selector = $(this);
                        if (account_group_selector.attr('initialized') != 'true') {
                            var selected_account_id = account_group_selector.val();
                            var bank_div = modal.find('#bank_options');
                            var bank_id = modal.find('select[name="bank_id"]');

                            start_spinner();
                            $.post(
                                base_url + "finance/bank_options",
                                {
                                    selected_account_id: selected_account_id
                                }, function (data) {
                                    data ? bank_div.show() : bank_div.hide();
                                    bank_id.html(data).change();
                                    var bank_details = modal.find('#bank_details');
                                    bank_details.hide();
                                }
                            ).complete();
                            stop_spinner();
                        }
                    });

                    modal.find('select[name="bank_id"]').on('change keyup', function () {
                        var bank_details = modal.find('#bank_details');
                        modal.find('#account_number').val('');
                        modal.find('#branch').val('');
                        modal.find('#swift_code').val('');

                        if (modal.find('select[name="bank_id"]').val() > 0) {
                            bank_details.show();
                        } else {
                            bank_details.hide();
                        }
                    });

                    button.click(function () {
                        var modal = button.closest('.modal');
                        var account_id = modal.find('input[name="account_id"]').val();
                        var account_name = modal.find('input[name="account_name"]').val();
                        var account_group = modal.find('input[name="account_group"]').val();
                        var account_code = modal.find('input[name="account_code"]').val();
                        var account_group_id = modal.find('select[name="account_group_id"]').val();
                        var currency_id = modal.find('select[name="currency_id"]').val();
                        var related_to = modal.find('select[name="related_to"]').val();
                        var account_for = modal.find('select[name="account_for"]').val();
                        var bank_id = modal.find('select[name="bank_id"]').val();
                        var opening_balance = account_id != '' ? null : modal.find('input[name="opening_balance"]').unmask();
                        var description = modal.find('textarea[name="description"]').val();
                        var account_number = modal.find('#account_number').val();
                        var branch = modal.find('#branch').val();
                        var swift_code = modal.find('#swift_code').val();
                        if (account_name != '' && (account_group_id != '' || account_group != '')) {
                            modal.modal('hide');

                            $.post(
                                base_url + "finance/save_account/",
                                {
                                    account_id: account_id,
                                    account_name: account_name,
                                    account_group: account_group,
                                    currency_id: currency_id,
                                    account_code: account_code,
                                    account_for: account_for,
                                    related_to: related_to,
                                    bank_id: bank_id,
                                    account_group_id: account_group_id,
                                    opening_balance: opening_balance,
                                    description: description,
                                    account_number: account_number,
                                    branch: branch,
                                    swift_code: swift_code
                                }, function (data) {
                                    modal.find('form')[0].reset();
                                    $('#accounts_list').DataTable().draw('page');

                                }
                            );
                        }

                    });
                    button.attr('active', 'true');
                }
            });

            $('.delete_account').each(function () {
                var button = $(this);
                if (button.attr('active') != 'true') {
                    button.click(function () {
                        var account_id = $(this).attr('account_id');

                        $.confirm({
                            title: 'Delete Account',
                            content: 'This action is irreversible! Are you sure?',
                            buttons: {
                                confirm: {
                                    text: 'Confirm Delete',
                                    btnClass: 'btn btn-danger btn-xs',
                                    action: function () {
                                        start_spinner();
                                        $.post(
                                            base_url + "finance/delete_account",
                                            {
                                                account_id: account_id
                                            }, function (data) {
                                                $('#accounts_list').DataTable().draw('page');
                                            }
                                        ).complete(function () {
                                            stop_spinner();
                                        });
                                    }
                                },
                                cancel: {
                                    text: "Don't Delete",
                                    btnClass: 'btn btn-default btn-xs'
                                }
                            }
                        });
                    });
                    button.attr('active', 'true');
                }
            });

            table.find('tr #to_statement_link').each(function () {
                var button = $(this);
                if (button.attr('initialized') != 'true') {
                    button.on('click', function () {
                        var form = button.closest('form');
                        var account_type_and_id = button.attr('type_and_id');
                        var currency_id = form.find('input[name="currency_id"]').val();
                        start_spinner();
                        window.location.href = base_url + "finance/statement/" + account_type_and_id + '/' + currency_id;
                    });
                    button.attr('initialized', 'true');
                }
            });
            initialize_common_js();
        }
    });

});

$('#account_statement_main_container').each(function () {
    var main_container = $(this);
    var account_type_and_id = main_container.find('input[name="account_type_and_id"]').val();
    var statement_container = main_container.find('#account_statement_container');
    let modal = $(this).find('#new_project_payment');


    let load_statement = function () {
        var currency_id = main_container.find('input[name="currency_id"]').val();
        var from = main_container.find('input[name="from"]').val();
        var to = main_container.find('input[name="to"]').val();
        start_spinner();
        $.post(
            base_url + 'finance/statement_transaction',
            {
                account_type_and_id: account_type_and_id,
                currency_id: currency_id,
                from: from,
                to: to
            },
            function (data) {
                main_container.closest('#content-wrapper').find('#currency_display').val(data.symbol);
                statement_container.html(data.statement_table);
            }, 'json'
        ).complete(function () {
            stop_spinner();
        });
    }


    load_statement();

    main_container.delegate('#generate_account_statement', 'click', function () {
        load_statement();
    });

    modal.find('.payment_row_adder').each(function () {
        if ($(this).attr('initialized') != 'true') {
            $(this).click(function () {
                var tbody = $(this).closest('table').find('tbody');
                var new_row = tbody.closest('table').find('.payment_row_template').clone().removeAttr('style')
                    .removeClass('payment_row_template').addClass('payment_artificial_row').appendTo(tbody);

                new_row.find('.payment_row_remover').click(function () {
                    $(this).closest('tr').remove();
                });
                new_row.find('select').select2();

                new_row.find('.number_format').priceFormat();

                get_cost_centers(new_row);

                initialize_common_js();
            });
            $(this).attr('initialized', 'true');
        }
    });

    modal.find('.payment_row_remover').click(function () {
        $(this).closest('tr').remove();
    });

    $('.save_expense_payment').each(function () {
        var button = $(this);
        if (button.attr('initialized') != 'true') {
            button.click(function () {
                var payment_date = modal.find('input[name="payment_date"]').val();
                var payment_voucher_id = modal.find('input[name="payment_voucher_id"]').val();
                var credit_account_id = modal.find('select[name="credit_account_id"]').val();
                var reference = modal.find('input[name="reference"]').val();
                var payee = modal.find('input[name="payee"]').val();
                let project_id = modal.closest('body').find('#project_finance').attr('project_id');
                var currency_id = modal.find('select[name="currency_id"]').val();
                var exchange_rate = modal.find('input[name="exchange_rate"]').val();
                var remarks = modal.find('textarea[name="remarks"]').val();

                var debit_account_ids = new Array();
                var cost_center_types = new Array();
                var cost_center_ids = new Array();
                var amounts = new Array();
                var descriptions = new Array();
                var error = 0;
                var i = 0, amount_paid = 0, id, item_types = new Array();

                var tbody = modal.find('tbody');
                tbody.find('select[name="cost_center_type"]').each(function () {
                    var row = $(this).closest('tr');
                    var cost_center_type = $(this).val();
                    id = row.find('select[name="cost_center_id"]').val();
                    var description = row.find('textarea[name="description"]').val();
                    var amount = row.find('input[name="amount"]').unmask();

                    if ((id != '' || cost_center_type == 'task') && description != '' && amount > 0) {
                        cost_center_types[i] = cost_center_type;
                        cost_center_ids[i] = id;
                        debit_account_ids[i] = row.find('select[name="debit_account_id"]').val();
                        amounts[i] = amount;
                        descriptions[i] = description;
                        item_types[i] = 'expense';
                        amount_paid += amount;
                        i++;
                    } else {
                        error++;
                    }

                });


                if (payment_date != '' && payment_date != '' && credit_account_id != '' && cost_center_ids.length > 0 && error == 0) {
                    modal.modal('hide');
                    start_spinner();
                    $.post(
                        base_url + "finance/save_payment_voucher",
                        {
                            payment_date: payment_date,
                            payment_voucher_id: payment_voucher_id,
                            project_id: project_id,
                            credit_account_id: credit_account_id,
                            reference: reference,
                            payee: payee,
                            currency_id: currency_id,
                            exchange_rate: exchange_rate,
                            remarks: remarks,
                            amount_paid : amount_paid,
                            item_types : item_types,
                            debit_accounts_ids: debit_account_ids,
                            cost_center_types: cost_center_types,
                            cost_center_ids: cost_center_ids,
                            amounts: amounts,
                            descriptions: descriptions
                        }, function (data) {
                            toast('success', 'Payment has been submitted successfully');
                            load_statement();
                            modal.find('form')[0].reset();
                            initialize_common_js();
                        }
                    ).complete(function () {
                        initialize_common_js();
                        modal.find('form')[0].reset();
                        stop_spinner();
                    });
                } else {
                    display_form_fields_error();
                }
            });
            button.attr('initialized', 'true');
        }

    });

});

$('#invoices_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        var stakeholder_field = table.closest('.box').find('select[name="stakeholder"]');
        var filter_field = table.closest('.box').find('select[name="filter"]');
        var list_type = table.attr('list_type');
        table.DataTable({
            "order": [[0, 'desc']],
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "finance/invoices/" + list_type,
                type: 'POST',
                data: function (d) {
                    d.stakeholder_id = stakeholder_field.val();
                    d.filter = filter_field.val();
                }
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching item(s) found</div>",
                "emptyTable": "<div class='alert alert-info'>No item(s) found</div>"
            },
            "drawCallback": function () {

                filter_field.each(function () {
                    if (filter_field.attr('initialized') != 'true') {
                        filter_field.change(function () {
                            table.DataTable().draw('page');
                        });
                        filter_field.attr('initialized', 'true');
                    }
                });

                stakeholder_field.each(function () {
                    if (stakeholder_field.attr('initialized') != 'true') {
                        stakeholder_field.change(function () {
                            table.DataTable().draw('page');
                        });
                        stakeholder_field.attr('initialized', 'true');
                    }
                });

                $('.invoice_form').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        modal.on('show.bs.modal', function (e) {
                            modal.find('tbody tr').each(function () {
                                var row = $(this);
                                row.find('select').select2({ width: '100%' });
                            });

                            var items_table = modal.find('table');
                            var vat_inclusive = modal.find('input[name="vat_inclusive"]');
                            var vat_percentage_selector = modal.find('select[name="vat_percentage"]');
                            var vat_percentage_selector_form_group = vat_percentage_selector.closest('.form-group');

                            var get_table_total_amount = function () {
                                var total_amount = 0;
                                items_table.find('tbody input[name="amount"]').each(function () {
                                    $(this).priceFormat();
                                    var amount = $(this).val();
                                    amount = amount != '' ? parseFloat($(this).unmask()) : 0;
                                    total_amount += amount;
                                });
                                return total_amount;
                            };
                            var get_the_billing_address = function () {
                                var stakeholder_id = modal.find('select[name="stakeholder_id"]').val();
                                if (stakeholder_id != '') {
                                    $.post(
                                        base_url + "stakeholders/billing_address",
                                        {
                                            stakeholder_id: stakeholder_id
                                        }, function (data) {
                                            modal.find('#billing_adddress_text_area').val(data);
                                        }
                                    )
                                }
                            };
                            var calculate_vat_amount = function () {
                                var total_table_amount = get_table_total_amount();
                                total_table_amount = !isNaN(total_table_amount) ? total_table_amount : (0).toFixed(2);
                                var vat_percentage = vat_percentage_selector.val();
                                var vat_amount = (parseFloat(vat_percentage) / 100) * (total_table_amount);
                                var grand_total_amount = parseFloat(total_table_amount) + parseFloat(vat_amount);
                                items_table.find('.vat_amount_display').html((vat_amount).toFixed(2)).priceFormat();
                                items_table.find('input[name="vat_amount"]').val(vat_amount);
                                items_table.find('.grand_total_display').html((grand_total_amount).toFixed(2)).priceFormat();
                                items_table.find('input[name="grand_total_amount"]').val(grand_total_amount);

                            };
                            var load_dropdown_options = function (container) {
                                var stakeholder_id = modal.find('select[name="stakeholder_id"]').val();
                                var currency_id = modal.find('select[name="currency_id"]').val();
                                var invoice_type = modal.find('input[name="invoice_type"]').val();
                                var is_for_other_charges = modal.find('input[name="is_for_other_charges"]');

                                $.ajax({
                                    url: base_url + "finance/generate_invoice_dropdown",
                                    type: 'POST',
                                    data: {
                                        stakeholder_id: stakeholder_id,
                                        invoice_type: invoice_type,
                                        currency_id: currency_id
                                    },
                                    beforeSend: function (e) {
                                        start_spinner();
                                        if (((stakeholder_id == '' || currency_id == '') && !is_for_other_charges.is(':checked')) || is_for_other_charges.is(':checked')) {
                                            e.abort();
                                            stop_spinner();
                                        }
                                    },
                                    success: function (data) {
                                        container.find('select[name="debt_id"]').html(data);
                                    },
                                    complete: function () {
                                        stop_spinner();
                                    }
                                });
                            };
                            var initialize_row = function (tr) {
                                tr.find('.remove_row').each(function () {
                                    $(this).click(function () {
                                        $(this).closest('tr').remove();
                                        calculate_table_total_amount(modal.find('table'));
                                        calculate_vat_amount()
                                    });
                                });
                            };
                            var generate_selected_item_data = function (selector, row) {
                                if (selector.val() != '') {
                                    $.post(
                                        base_url + 'finance/generate_selected_item_data',
                                        {
                                            item_id: selector.val()
                                        }, function (data) {
                                            row.find('.display_item_particulars').html(data.item_particulars);
                                            row.find('input[name="amount"]').val(data.item_amount);
                                            calculate_table_total_amount(row.closest('table'));
                                            calculate_vat_amount();
                                        }, 'json'
                                    );
                                } else {
                                    row.find('.display_item_particulars').html('');
                                }
                            };
                            var validate_typed_amount = function (container) {
                                container.on('change keyup', 'input[name="invoice_amount"]', function (e) {
                                    e.preventDefault();
                                    var amount_input = container.find('input[name="invoice_amount"]');
                                    var amount_buffer = container.find('input[name="grand_total_amount"]');
                                    var is_for_other_charges = modal.find('input[name="is_for_other_charges"]');
                                    var amount = amount_input.unmask();
                                    amount = amount != '' ? parseFloat(amount) : 0;
                                    var buffered_amount = amount_buffer.val();
                                    buffered_amount = buffered_amount != '' ? parseFloat(buffered_amount) : 0;
                                    if (!is_for_other_charges.is(':checked')) {
                                        if (amount > buffered_amount) {
                                            toast('error', 'The amount ' + amount + ' you entered exceeds ' + buffered_amount + ' as univoiced amount from supplier');
                                            container.find('input[name="invoice_amount"]').val(buffered_amount).change();
                                        }
                                    }
                                });
                            };
                            calculate_vat_amount();
                            validate_typed_amount(items_table);

                            vat_inclusive.change(function () {
                                var total_table_amount = get_table_total_amount();
                                total_table_amount = !isNaN(total_table_amount) ? total_table_amount : (0).toFixed(2);
                                if (vat_inclusive.is(':checked')) {
                                    vat_percentage_selector_form_group.show();
                                    calculate_vat_amount();
                                } else {
                                    vat_percentage_selector_form_group.hide();
                                    vat_percentage_selector.val(0).trigger('change');
                                    items_table.find('.vat_amount_display').html((0).toFixed(2));
                                    items_table.find('input[name="vat_amount"]').val(0);
                                    items_table.find('.grand_total_display').html((total_table_amount).toFixed(2)).priceFormat();
                                    items_table.find('input[name="grand_total_amount"]').val(total_table_amount);
                                }
                            });

                            modal.find('select[name="account_id"]').change(function () {
                                var account_selector = $(this);
                                if (account_selector.attr('initialized') != 'true') {
                                    var selected_account_id = account_selector.val();
                                    var bank_details_text_area = modal.find('#bank_details_text_area');

                                    start_spinner();
                                    $.post(
                                        base_url + "finance/bank_details",
                                        {
                                            account_id: selected_account_id
                                        }, function (data) {
                                            if (data == "No bank info") {
                                                bank_details_text_area.html(data);
                                            } else {
                                                bank_details_text_area.html(data);
                                            }
                                        }
                                    ).complete();
                                    stop_spinner();
                                }
                            });

                            modal.find('tbody select[name="debt_id"]').each(function () {
                                var item_selector = $(this);
                                initialize_row(item_selector.closest('tr'));
                                item_selector.change(function () {
                                    if ($(this).attr('initialized') != 'true') {
                                        generate_selected_item_data($(this), item_selector.closest('tr'));
                                    }
                                });
                            });

                            if (modal.hasClass('invoice_form')) {
                                modal.find('select[name="stakeholder_id"], select[name="currency_id"]').on('change', function () {
                                    if ($(this).attr('active') != 'true') {
                                        var row = modal.find('tbody tr');
                                        load_dropdown_options(row);
                                        get_the_billing_address();
                                    }
                                });
                            }

                            modal.delegate(' input[name="rate"],  input[name="quantity"],  input[name="vat_inclusive"],  select[name="vat_percentage"] ', 'change keyup', function () {
                                calculate_table_total_amount(modal.find('table'));
                                calculate_vat_amount()
                            });

                            modal.delegate(' input[name="due_date"]', 'change', function () {
                                var due_date_input = modal.find('input[name="due_date"]');
                                if (due_date_input.attr('initialized') != 'true') {
                                    var payment_terms_select = modal.find('select[name="payment_term"]');
                                    payment_terms_select.val('set_manually').change();
                                }
                            });

                            modal.delegate(' select[name="payment_term"]', 'change', function () {
                                var payment_term_selector = modal.find('select[name="payment_term"]');
                                if (payment_term_selector.attr('initialized') != 'true') {
                                    var due_date_input = modal.find('input[name="due_date"]');
                                    var invoice_date = modal.find('input[name="invoice_date"]').val();
                                    var payment_term = payment_term_selector.val();
                                    var today = new Date();
                                    var due_date;
                                    switch (payment_term) {
                                        case 'net_ten':
                                            due_date = SkipDate(today, 10);
                                            due_date_input.val(formatDate(due_date));
                                            break;
                                        case 'net_twenty':
                                            due_date = SkipDate(today, 20);
                                            due_date_input.val(formatDate(due_date));
                                            break;
                                        case 'net_thirty':
                                            due_date = SkipDate(today, 30);
                                            due_date_input.val(formatDate(due_date));
                                            break;
                                        case 'due_on_receipt':
                                            due_date_input.val('');
                                            break;
                                    }
                                }
                            });

                            modal.find('tbody tr').each(function () {
                                initialize_form_amount_calculator($(this), 2);
                                calculate_table_total_amount(modal.find('table'));
                            });

                            modal.find('.row_adder').each(function () {
                                var button = $(this);
                                if (button.attr('initialized') != 'true') {
                                    button.unbind().bind('click', function () {
                                        var tbody = modal.find('tbody');
                                        var new_row = modal.find('.row_template').clone();
                                        new_row.removeAttr('style').removeClass('row_template').addClass('artificial_row').appendTo(tbody);
                                        new_row.find('select').select2({ width: '100%' });

                                        new_row.find('select[name="debt_id"]').change(function () {
                                            let selector = $(this);
                                            if (selector.attr('active') != 'true') {
                                                generate_selected_item_data($(this), new_row);
                                            }
                                        });

                                        var is_for_other_charges = new_row.closest('.modal').find('input[name="is_for_other_charges"]');
                                        if (is_for_other_charges.is(':checked')) {
                                            modal.find('#other_charge_for').html('Other Charges For ');
                                            var invoice_type = modal.find('input[name="invoice_type"]').val();
                                            $.ajax({
                                                url: base_url + "finance/generate_invoice_dropdown",
                                                type: 'POST',
                                                data: {
                                                    invoice_type: invoice_type,
                                                    is_for_other_charges: is_for_other_charges.val(),
                                                },
                                                beforeSend: function (e) {
                                                    start_spinner();
                                                },
                                                success: function (data) {
                                                    new_row.find('select[name="debt_id"]').html(data);
                                                },
                                                complete: function () {
                                                    stop_spinner();
                                                }
                                            });
                                        }

                                        load_dropdown_options(new_row);
                                        initialize_row(new_row);
                                        initialize_common_js();
                                    });
                                }
                            });

                            modal.find('input[name="is_for_other_charges"]').change(function () {
                                var is_for_other_charges = $(this);
                                if (is_for_other_charges.is(':checked')) {
                                    modal.find('#other_charge_for').html('Other Charges For ');
                                    var invoice_type = modal.find('input[name="invoice_type"]').val();
                                    $.ajax({
                                        url: base_url + "finance/generate_invoice_dropdown",
                                        type: 'POST',
                                        data: {
                                            invoice_type: invoice_type,
                                            is_for_other_charges: is_for_other_charges.val(),
                                        },
                                        beforeSend: function (e) {
                                            modal.find('select[name="stakeholder_id"]').val('').change();
                                            start_spinner();
                                        },
                                        success: function (data) {
                                            modal.find('tbody tr').each(function () {
                                                $(this).find('select[name="debt_id"]').html(data);
                                            });
                                        },
                                        complete: function () {
                                            stop_spinner();
                                        }
                                    });
                                } else {
                                    start_spinner();
                                    modal.find('tbody tr').each(function () {
                                        let row = $(this);
                                        modal.find('select[name="stakeholder_id"]').val('').change();
                                        row.find('select[name="debt_id"]').html('').change();
                                        row.find('.display_item_particulars').html('Please select Order to  to record invoice');
                                        row.find('input[name="amount"]').val(0);
                                        calculate_table_total_amount(row.closest('table'));
                                        calculate_vat_amount();
                                    });
                                    modal.find('tbody .artificial_row').remove();
                                    modal.find('#other_charge_for').html('');
                                    stop_spinner();
                                }
                            });

                            modal.find('.submit_invoice').each(function () {
                                var button = $(this);
                                if (button.attr('initialized') != 'true') {
                                    button.off('click').on('click', function () {
                                        var invoice_id = modal.find('input[name="invoice_id"]').val();
                                        var invoice_type = modal.find('input[name="invoice_type"]').val();
                                        var stakeholder_id = modal.find('select[name="stakeholder_id"]').val();
                                        var reference = modal.find('input[name="reference"]').val();
                                        var billing_address = modal.find('textarea[name="billing_address"]').val();
                                        var currency_id = modal.find('select[name="currency_id"]').val();
                                        var invoice_date = modal.find('input[name="invoice_date"]').val();
                                        var due_date = modal.find('input[name="due_date"]').val();
                                        var invoice_no = modal.find('input[name="invoice_no"]').val();
                                        var payment_term = modal.find('select[name="payment_term"]').val();
                                        var desc_or_note = modal.find('textarea[name="desc_or_note"]').val();
                                        var vat_inclusive = modal.find('input[name="vat_inclusive"]').is(":checked") ? 1 : 0;
                                        var vat_percentage = modal.find('select[name="vat_percentage"]').val();
                                        var account_id = modal.find('select[name="account_id"]').val();
                                        var bank_details = modal.find('textarea[name="bank_details"]').val();
                                        var invoice_amount = invoice_type == 'purchases' ? modal.find('tfoot input[name="invoice_amount"]').unmask() : 0;

                                        var debt_nature_ids = new Array(), debt_natures = new Array(), debted_item_ids = new Array(), quantities = new Array(), item_types = new Array(), unit_ids = new Array(),
                                            rates = new Array();
                                        var i = 0;
                                        modal.find('tbody tr').each(function () {
                                            var row = $(this);
                                            row.find('table tr').each(function () {
                                                var inner_row = $(this);
                                                var debt_nature = inner_row.find('input[name="debt_nature"]').val();
                                                debted_item_ids[i] = inner_row.find('input[name="debted_item_id"]').val();
                                                item_types[i] = inner_row.find('input[name="item_type"]').val();
                                                quantities[i] = inner_row.find('input[name="quantity"]').val();
                                                debt_natures[i] = debt_nature;
                                                debt_nature_ids[i] = inner_row.find('input[name="debt_nature_id"]').val();
                                                unit_ids[i] = inner_row.find('input[name="unit_id"]').val();
                                                rates[i] = inner_row.find('input[name="rate"]').val();
                                                i++;
                                            });
                                        });

                                        if (invoice_date != '' && invoice_no != '' && stakeholder_id != '' && currency_id != '' && bank_details != '' && debted_item_ids.length > 0 && quantities.length > 0 && rates.length > 0) {
                                            modal.modal('hide');
                                            start_spinner();

                                            $.post(
                                                base_url + "finance/save_invoice/" + invoice_type,
                                                {
                                                    invoice_id: invoice_id,
                                                    debt_natures: debt_natures,
                                                    debt_nature_ids: debt_nature_ids,

                                                    invoice_amount: invoice_amount,
                                                    billing_address: billing_address,
                                                    desc_or_note: desc_or_note,
                                                    payment_term: payment_term,
                                                    invoice_date: invoice_date,
                                                    due_date: due_date,
                                                    stakeholder_id: stakeholder_id,
                                                    invoice_no: invoice_no,
                                                    currency_id: currency_id,
                                                    reference: reference,

                                                    debted_item_ids: debted_item_ids,
                                                    item_types: item_types,
                                                    quantities: quantities,
                                                    unit_ids: unit_ids,
                                                    rates: rates,

                                                    bank_details: bank_details,
                                                    vat_inclusive: vat_inclusive,
                                                    vat_percentage: vat_percentage,

                                                }, function (data) {
                                                    modal.find('.artificial_row').remove();
                                                    stop_spinner();
                                                    $('#invoices_list').DataTable().draw('page');
                                                }
                                            ).complete();

                                        } else {
                                            display_form_fields_error();
                                        }
                                    });
                                    button.attr('initialized', 'true')
                                }
                            });
                        });
                        modal.attr('initialized', 'true');
                    }
                });

                $('.delete_invoice').each(function () {
                    var button = $(this);
                    var invoice_type = button.attr('type');
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete This Invoice',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger btn-xs',
                                        action: function () {
                                            $.post(
                                                base_url + "finance/delete_invoice/" + invoice_type,
                                                {
                                                    invoice_id: button.attr('invoice_id')
                                                }, function () {
                                                    $('#invoices_list').DataTable().draw('page');
                                                }
                                            ).complete(function () {
                                                stop_spinner();
                                            });
                                        }
                                    },
                                    cancel: {
                                        text: "Cancel",
                                        btnClass: 'btn btn-default btn-xs'
                                    }
                                }
                            });
                        });
                    }
                });

                $('.procurement_attachment_modal').each(function () {
                    var modal = $(this);
                    modal.on('show.bs.modal', function (e) {
                        update_procurements_attachments(modal);
                    });
                });

                procurement_attach();
                initialize_common_js();
            }
        });
        table.attr('initialized', 'true');
    }
});

$('#generate_account_statement_report').off('click').on('click', function () {
    var form = $(this).closest('form');
    var account_id = form.find('select[name="account_id"]').val();
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();
    var currency_id = form.find('select[name="currency_id"]').val();
    if (account_id != '') {
        start_spinner();
        $.post(
            base_url + "finance/statements",
            {
                account_id: account_id,
                currency_id: currency_id,
                from: from,
                to: to
            }, function (data) {
                $('#account_statement_report_container').html(data);
            }
        ).complete(function () {
            stop_spinner();
        });
    } else {
        display_form_fields_error()
    }
});

$('#generate_cheques_list').off('click').on('click', function () {
    var form = $(this).closest('form');
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();

    if (from == '' && to == '') {
        display_form_fields_error();
    } else {
        start_spinner();
        $.post(
            base_url + "finance/cheques",
            {
                from: from,
                to: to,
            }, function (data) {
                $('#cheques_list_container').html(data);
            }
        ).complete(function () {
            stop_spinner();
        });
    }
});

$('.bulk_payment_form').each(function () {
    var modal = $(this);
    if (modal.attr('initialized') != 'true') {
        var table_container = modal.find('.table_container');
        var tbody = modal.find('tbody');

        var save_bulk_payment = function (button, container) {
            if (button.attr('initialized') != 'true') {
                button.click(function () {
                    var modal = button.closest('.modal');
                    var payment_date = modal.find('input[name="payment_date"]').val();
                    var cheque_number = modal.find('input[name="cheque_number"]').val();
                    var credit_account_id = modal.find('select[name="credit_account_id"]').val();
                    var debit_account_id = modal.find('select[name="debit_account_id"]').val();
                    var reference = modal.find('input[name="reference"]').val();
                    var currency_id = modal.find('select[name="currency_id"]').val();
                    var payee = modal.find('input[name="payee"]').val();
                    var withholding_tax = modal.find('input[name="withholding_tax"]').val();
                    var remarks = modal.find('textarea[name="remarks"]').val();
                    var typed_amount = modal.find('input[name="total_typed_amount"]').val();
                    var selected_items_total_amount = modal.find('input[name="selected_items_total_amount"]').val();

                    var amounts = new Array(), requisition_approval_ids = new Array(), request_types = new Array(), approved_invoice_item_ids = new Array();
                    var i = 0, error = 0;

                    if (selected_items_total_amount > typed_amount || typed_amount > selected_items_total_amount) {
                        toast('error', 'Make sure the amount you type equal the sum of the selected items')
                        error++;
                    }

                    container.find('tbody input[name="amount"]').each(function () {
                        var amount = $(this).val();
                        var row = $(this).closest('tr');
                        var to_be_paid_checkbox = row.find('.to_be_paid');
                        if (to_be_paid_checkbox.is(':checked')) {
                            amount = amount.slice(4);
                            amounts[i] = amount.replace(/,/g, '');
                            requisition_approval_ids[i] = row.find('input[name="requisition_approval_id"]').val();
                            request_types[i] = row.find('input[name="request_type"]').val();
                            approved_invoice_item_ids[i] = row.find('input[name="approved_invoice_item_id"]').val();
                            i++;
                        }
                    });


                    if (payment_date != '' && credit_account_id != '' && debit_account_id != '' && currency_id != '' && payee != '' && remarks != '' && error == 0) {
                        modal.modal('hide');
                        start_spinner();
                        $.post(
                            base_url + "finance/save_bulk_payment",
                            {
                                payment_date: payment_date,
                                cheque_number: cheque_number,
                                request_types: request_types,
                                requisition_approval_ids: requisition_approval_ids,
                                approved_invoice_item_ids: approved_invoice_item_ids,
                                credit_account_id: credit_account_id,
                                amounts: amounts,
                                debit_account_id: debit_account_id,
                                reference: reference,
                                payee: payee,
                                currency_id: currency_id,
                                withholding_tax: withholding_tax,
                                remarks: remarks
                            }, function (data) {
                                modal.find('form')[0].reset();
                                modal.find('input').val('');
                                modal.find('textarea').val('');
                                modal.closest('box').find('.approved_cash_requisitions_table').DataTable().draw('page');
                                stop_spinner();

                                initialize_common_js();
                            });
                    } else {
                        display_form_fields_error();
                    }
                });

                button.attr('initialized', 'true');
            }
        };

        modal.on('shown.bs.modal', function () {
            modal.delegate('select[name="vendor_id"], select[name="currency_id"]', 'change keyup', function () {
                var currency_id = modal.find('select[name="currency_id"]').val();
                var vendor_id = modal.find('select[name="vendor_id"]').val();
                if (vendor_id != '') {
                    start_spinner();
                    $.post(
                        base_url + "finance/bulk_payment_list",
                        {
                            currency_id: currency_id,
                            vendor_id: vendor_id
                        }, function (data) {
                            table_container.html(data.table_view);
                            initialize_common_js();
                            stop_spinner();

                            table_container.find('.to_be_paid').each(function () {
                                var focused_checkbox = $(this);
                                focused_checkbox.change(function () {
                                    var amount = focused_checkbox.closest('tr').find('input[name="amount"]').val();
                                    var total_amount_display = table_container.closest('.modal').find('input[name="selected_items_total_amount"]');
                                    amount = amount.slice(4);
                                    amount = amount.replace(/,/g, '');
                                    var displayed_amount = total_amount_display.unmask();
                                    displayed_amount = !isNaN(displayed_amount) ? displayed_amount : 0;
                                    if (focused_checkbox.is(":checked")) {
                                        total_amount_display.val(parseFloat(displayed_amount) + parseFloat(amount)).priceFormat();
                                    } else {
                                        total_amount_display.val(parseFloat(displayed_amount) - parseFloat(amount)).priceFormat();
                                    }
                                });
                            });

                            table_container.closest('.modal').find('.save_bulk_payment').each(function () {
                                var button = $(this);
                                save_bulk_payment(button, table_container);
                            });

                        }, 'json'
                    ).complete();
                }
            });



            modal.find('select[name="vendor_id"]').on('change', function () {
                $.post(
                    base_url + "procurements/load_vendor_account_options",
                    {
                        vendor_id: $(this).val()

                    }, function (data) {
                        modal.find('select[name="debit_account_id"]').html(data);
                        modal.find('.withholding_tax_div input').val('');
                        initialize_common_js();
                        stop_spinner();
                    }
                ).complete();
            });

            modal.delegate('input[name="withholding_tax"], input[name="total_typed_amount"]', 'change keyup', function () {
                var withholding_tax = modal.find('input[name="withholding_tax"]').val();
                var amount_withheld_input = modal.find('input[name="amount_withheld"]');
                var amount_payable_input = modal.find('input[name="amount_payable"]');
                var amount_input = modal.find('input[name="total_typed_amount"]');
                var amount = amount_input.unmask() != '' ? parseFloat(amount_input.unmask()) : 0;

                var amount_withheld = (parseFloat(withholding_tax) / 100) * parseFloat(amount);
                var amount_payable = parseFloat(amount) - parseFloat(amount_withheld);

                amount_withheld_input.val(amount_withheld).priceFormat();
                amount_payable_input.val(amount_payable).priceFormat();
            });

        });

        modal.on('hide.bs.modal', function () {
            table_container.html('');
        });

        modal.attr('initialized', 'true');
        initialize_common_js();
    }
});

$('a[href="#payment_vouchers"]').on('shown.bs.tab', function (e) {
    draw_approved_cash_datatable($('.approved_cash_requisitions_table'));
});

$('a[href="#contras"]').on('shown.bs.tab', function (e) {
    $('#contras_list').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                "order": [[0, "desc"]],
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "finance/contras",
                    type: 'POST'
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "drawCallback": function () {

                    $(this).find('tr').each(function () {
                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                    });

                    $('.contra_form').on('show.bs.modal', function (e) {
                        var modal = $(this);

                        var tbody = modal.find('tbody');

                        var validate_debit_account = function (row) {
                            modal.find('select[name="credit_account_id"], tbody select[name="debit_account_id"]').on('change', function () {
                                var debit_account_id = row.find('select[name="debit_account_id"]').val();
                                var credit_account_id = modal.find('select[name="credit_account_id"]').val();
                                if (debit_account_id == credit_account_id && debit_account_id != '' && credit_account_id != '') {
                                    toast('error', 'invalid debit account');
                                    $(this).val('').trigger('change');
                                }
                            });
                        };

                        tbody.find('tr').change(function () {
                            validate_debit_account($(this));
                        });

                        modal.find('select[name="currency_id"]').change(function () {
                            var currency_selector = $(this);
                            var contra_date = modal.find('input[name="contra_date"]').val();
                            load_exchange_rate(currency_selector, modal, contra_date);
                        });

                        modal.find('.row_adder').each(function () {
                            var button = $(this);
                            if (button.attr('initialized') != 'true') {
                                button.click(function () {
                                    var table = button.closest('table');
                                    var tbody = table.find('tbody');
                                    var row_template = table.find('.row_template');
                                    var new_row = row_template.clone().removeAttr('style').removeClass('row_template').addClass('artificial_row').appendTo(tbody);
                                    new_row.find('.row_remover').click(function () {
                                        $(this).closest('tr').remove();
                                    });

                                    new_row.find('.number_format').priceFormat();

                                    new_row.find('select').select2();
                                    validate_debit_account(new_row);
                                });
                                button.attr('initialized', 'true');
                            }

                        });

                    });

                    $('.row_remover').click(function () {
                        $(this).closest('tr').remove();
                    });

                    $('.save_contra').each(function () {
                        var button = $(this);
                        if (button.attr('active') != 'true') {
                            button.click(function () {
                                var modal = button.closest('.modal');
                                var contra_date = modal.find('input[name="contra_date"]').val();
                                var debit_accounts_ids = new Array(),
                                    amounts = new Array(),
                                    descriptions = new Array(),
                                    i = 0;

                                var tbody = modal.find('tbody');
                                tbody.find('select[name="debit_account_id"]').each(function () {
                                    var debit_account_id = $(this).val();
                                    var row = $(this).closest('tr');
                                    var amount = row.find('input[name="amount"]').unmask();
                                    if (debit_account_id != '' && parseFloat(amount) > 0) {
                                        debit_accounts_ids[i] = debit_account_id;
                                        amounts[i] = amount;
                                        descriptions[i] = row.find('textarea[name="description"]').val();
                                        i++;
                                    }
                                });

                                if (contra_date != '' && credit_account_id != '' && debit_accounts_ids.length > 0) {
                                    modal.modal('hide');
                                    var credit_account_id = modal.find('select[name="credit_account_id"]').val();
                                    var currency_id = modal.find('select[name="currency_id"]').val();
                                    var exchange_rate = modal.find('input[name="exchange_rate"]').val();
                                    var contra_id = modal.find('input[name="contra_id"]').val();
                                    var reference = modal.find('input[name="reference"]').val();
                                    var remarks = modal.find('textarea[name="remarks"]').val();

                                    $.post(
                                        base_url + "finance/save_contra/",
                                        {
                                            contra_date: contra_date,
                                            reference: reference,
                                            contra_id: contra_id,
                                            credit_account_id: credit_account_id,
                                            currency_id: currency_id,
                                            exchange_rate: exchange_rate,
                                            debit_accounts_ids: debit_accounts_ids,
                                            amounts: amounts,
                                            descriptions: descriptions,
                                            remarks: remarks
                                        }, function () {
                                            modal.find('form')[0].reset();
                                            tbody.find('.artificial_row').remove();
                                            if (contra_id == '') {
                                                tbody.find('.searchable').select2('val', '');
                                            }
                                            table.DataTable().draw('page');
                                            stop_spinner();
                                        }
                                    );
                                }
                            });
                            button.attr('active', 'true');
                        }
                    });

                    $('.delete_contra').each(function () {
                        var button = $(this);
                        if (button.attr('active') != 'true') {
                            button.click(function () {
                                var contra_id = $(this).attr('contra_id');
                                $.confirm({
                                    title: 'Delete Contra No.' + contra_id,
                                    content: 'This action is irreversible! Are you sure?',
                                    buttons: {
                                        confirm: {
                                            text: 'Confirm Delete',
                                            btnClass: 'btn btn-danger btn-xs',
                                            action: function () {
                                                start_spinner();
                                                $.post(
                                                    base_url + "finance/delete_contra",
                                                    {
                                                        contra_id: contra_id
                                                    }, function (data) {
                                                        $('#contras_list').DataTable().draw('page');
                                                    }
                                                ).complete(function () {
                                                    stop_spinner();
                                                });
                                            }
                                        },
                                        cancel: {
                                            text: "Don't Delete",
                                            btnClass: 'btn btn-default btn-xs'
                                        }
                                    }
                                });
                            });
                            button.attr('active', 'true');
                        }
                    });

                    initialize_common_js();
                },
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching contras found</div>",
                    "emptyTable": "<div class='alert alert-info'>No contras found</div>"
                }
            });

            table.attr('initialized', 'true');
        } else {
            table.DataTable().draw('page');
        }

    });
});

$('a[href="#receipts"]').on('shown.bs.tab', function (e) {
    $('#receipts_list').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                'processing': true,
                'serverSide': true,
                'order': [[0, 'desc']],
                'ajax': {
                    url: base_url + "Finance/receipts",
                    type: 'POST'

                },
                'columns': [
                    { 'orderable': true },
                    { 'orderable': true },
                    { 'orderable': true },
                    { 'orderable': true },
                    { 'orderable': true },
                    { 'orderable': false },
                    { 'orderable': false }


                ],
                'language': {
                    "zeroRecords": "<div class='alert alert-info'>No matching receipts found</div>",
                    "emptyTable": "<div class='alert alert-info'>No receipts found</div>"
                },
                'drawCallback': function () {

                    table.find('tr td:last-child').attr('nowrap', 'nowrap');

                    $('.receipt_form').each(function () {
                        var modal = $(this);
                        if (modal.attr('initialized') != 'true') {
                            modal.on('show.bs.modal', function () {

                                modal.find('select[name="currency_id"]').each(function () {
                                    var selector = $(this);
                                    if (selector.attr('initialized') != 'true') {
                                        selector.change(function () {
                                            load_exchange_rate(selector, '.modal');
                                        });
                                        selector.attr('initialized', 'true');
                                    }
                                });

                                modal.find('select[name="invoice_id"]').each(function () {
                                    var invoice_selector = $(this);
                                    var form = invoice_selector.closest('form');
                                    var credit_account_field = form.find('select[name="credit_account_id"]');
                                    var amount_field = form.find('input[name="amount"]');
                                    var currency_field = form.find('select[name="currency_id"]');
                                    if (invoice_selector.attr('initialized') != 'true') {
                                        invoice_selector.change(function () {
                                            var invoice_id = invoice_selector.val();
                                            if (invoice_id != '') {
                                                start_spinner();
                                                $.post(
                                                    base_url + "finance/load_invoice_receipt_requirements",
                                                    {
                                                        invoice_id: invoice_id
                                                    }, function (data) {
                                                        credit_account_field.html(data.credit_account_options).change();
                                                        amount_field.val(data.unpaid_balance).priceFormat();
                                                        currency_field.html(data.currency_options).change();
                                                        stop_spinner();
                                                    },
                                                    'JSON'
                                                );
                                            } else {
                                                credit_account_field.html('<option></option>').change();
                                                currency_field.html('<option></option>').change();
                                                amount_field.val('');
                                            }
                                        });
                                        invoice_selector.attr('initialized', 'true');
                                    }
                                });

                                modal.delegate('input[name="amount_payable"], input[name="amount"]', 'change keyup', function () {
                                    var withholding_tax_input = modal.find('input[name="withholding_tax"]');
                                    var amount_withheld_input = modal.find('input[name="amount_withheld"]');
                                    var amount_payable_input = modal.find('input[name="amount_payable"]');
                                    var amount_payable = amount_payable_input.unmask() != '' ? parseFloat(amount_payable_input.unmask()) : 0;
                                    var amount_input = modal.find('input[name="amount"]');
                                    var amount = amount_input.unmask() != '' ? parseFloat(amount_input.unmask()) : 0;
                                    var amount_withheld = parseFloat(amount) - parseFloat(amount_payable);

                                    var withholding_tax = (100 * amount_withheld) / amount;

                                    amount_withheld_input.val((amount_withheld).toFixed(2)).priceFormat();
                                    withholding_tax_input.val(withholding_tax);
                                });

                            });
                        }
                    });

                    $('.save_receipt').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                var modal = button.closest('.modal');
                                var receipt_date = modal.find('input[name="receipt_date"]').val();
                                var amount = modal.find('input[name="amount"]').unmask();
                                var invoice_id = modal.find('select[name="invoice_id"]').val();
                                var credit_account_id = modal.find('select[name="credit_account_id"]').val();
                                var debit_account_id = modal.find('select[name="debit_account_id"]').val();
                                var receipt_id = modal.find('input[name="receipt_id"]').val();
                                var currency_id = modal.find('select[name="currency_id"]').val();
                                var reference = modal.find('input[name="reference"]').val();
                                var withholding_tax = modal.find('input[name="withholding_tax"]').val();
                                var exchange_rate = modal.find('input[name="exchange_rate"]').val();
                                var comments = modal.find('textarea[name="comments"]').val();

                                if (invoice_id != '' && receipt_date != '' && amount != '' && debit_account_id != '' && comments != '') {
                                    modal.modal('hide');
                                    start_spinner();
                                    $.post(
                                        base_url + "Finance/save_receipt",
                                        {
                                            withholding_tax: withholding_tax,
                                            invoice_id: invoice_id,
                                            receipt_date: receipt_date,
                                            amount: amount,
                                            receipt_id: receipt_id,
                                            currency_id: currency_id,
                                            credit_account_id: credit_account_id,
                                            debit_account_id: debit_account_id,
                                            exchange_rate: exchange_rate,
                                            reference: reference,
                                            comments: comments
                                        }, function (data) {
                                            stop_spinner();
                                            modal.find('form')[0].reset();
                                            table.DataTable().draw('page');
                                        }
                                    );
                                } else {
                                    toast('error', 'Please, Make sure all the fields are filled correctly')
                                }
                            });
                            button.attr('initialized', 'true')
                        }
                    });

                    $('.delete_receipt').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                $.confirm({
                                    title: 'Delete This Receipt',
                                    content: 'This action is irreversible! Are you sure?',
                                    buttons: {
                                        confirm: {
                                            text: 'Confirm Delete',
                                            btnClass: 'btn btn-danger btn-xs',
                                            action: function () {
                                                $.post(
                                                    base_url + "Finance/delete_receipt",
                                                    {
                                                        receipt_id: button.attr('receipt_id')
                                                    }, function (data) {
                                                        table.DataTable().draw('page');
                                                    }
                                                ).complete(function () {
                                                    stop_spinner();
                                                });
                                            }
                                        },
                                        cancel: {
                                            text: "Cancel",
                                            btnClass: 'btn btn-default btn-xs'
                                        }
                                    }
                                });
                            });
                        }
                    });

                    initialize_common_js();
                }
            });
            table.attr('initialized', 'true');
        } else {
            table.DataTable().draw('page');
        }
    });
});

$('a[href="#journals"]').on('shown.bs.tab', function (e) {
    $('.journal_transactions_table').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                "order": [[0, "desc"]],
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "finance/journal_transactions/",
                    type: 'POST'
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false },
                    { "orderable": false },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching transaction found</div>",
                    "emptyTable": "<div class='alert alert-info'>No transaction found</div>"
                }, "drawCallback": function () {
                    table.find('tr td:last-child').attr('nowrap', 'nowrap');

                    $('.journal_voucher_entry_form').each(function () {
                        var modal = $(this);
                        if (modal.attr('initialized') != 'true') {
                            modal.on('show.bs.modal', function (e) {
                                modal.find('select[name="journal_type"]').select2({ width: '100%' });
                                modal.find('.number_format').priceFormat();

                                modal.find('tbody tr').each(function () {
                                    var row = $(this);
                                    row.find('.row_remover').click(function () {
                                        var table = $(this).closest('table');
                                        $(this).closest('tr').remove();
                                        initialize_common_js();
                                        calculate_table_total_amount(table);
                                    });
                                });

                                modal.find('.add_jv_account').each(function () {
                                    var account_adder = $(this);
                                    if (account_adder.attr('initialized') != 'true') {
                                        account_adder.click(function () {
                                            var container = account_adder.closest('form');
                                            var account_id = container.find('select[name="account_id"]').val();
                                            var account_operation = container.find('select[name="account_operation"]').val();
                                            var table = account_operation == "CREDIT" ? container.find('#credit_table') : container.find('#debit_table');
                                            var tbody = table.find('tbody');
                                            var amount = container.find('input[name="amount"]').unmask();
                                            amount_to_display = !isNaN(amount) ? parseFloat(amount) : 0;
                                            var narration = container.find('input[name="narration"]').val();
                                            if (amount_to_display > 0 && narration != '' && account_id != '') {
                                                start_spinner();
                                                $.post(
                                                    base_url + "finance/load_jv_account_details",
                                                    {
                                                        account_id: account_id
                                                    }, function (data) {
                                                        var new_row = table.find('.row_template').clone().removeAttr('style')
                                                            .removeClass('row_template').addClass('artificial_row').appendTo(tbody);
                                                        if (account_operation == "CREDIT") {
                                                            new_row.find('.credit_account_display').html(data.account_name);
                                                            new_row.find('input[name="credit_account_id"]').val(data.account_id);
                                                            new_row.find('.credit_amount_display').html(amount_to_display).priceFormat();
                                                            new_row.find('input[name="amount"]').val(amount_to_display);
                                                            new_row.find('.credit_narration_display').html('<span style="width: 1px">' + narration + '</span>');
                                                            new_row.find('input[name="credit_narration"]').val(narration);
                                                        } else if (account_operation == "DEBIT") {
                                                            new_row.find('.debit_account_display').html(data.account_name);
                                                            new_row.find('input[name="debit_account_id"]').val(data.account_id);
                                                            new_row.find('.debit_amount_display').html(amount_to_display).priceFormat();
                                                            new_row.find('input[name="amount"]').val(amount_to_display);
                                                            new_row.find('.debit_narration_display').html('<span style="width: 1px">' + narration + '</span>');
                                                            new_row.find('input[name="debit_narration"]').val(narration);
                                                        }
                                                        new_row.find('input[name="account_operation"]').val(account_operation);
                                                        initialize_common_js();
                                                        calculate_table_total_amount(table);
                                                        var account_adder_container = container.find('.account_adder_container');
                                                        account_adder_container.find('select[name="account_id"]').select2('val', '');
                                                        account_adder_container.find('select[name="account_operation"]').select2('val', '');
                                                        account_adder_container.find('input[name="amount"]').val("");
                                                        account_adder_container.find('input[name="narration"]').val("");
                                                        stop_spinner();

                                                        new_row.find('.row_remover').click(function () {
                                                            var table = $(this).closest('table');
                                                            $(this).closest('tr').remove();
                                                            initialize_common_js();
                                                            calculate_table_total_amount(table);
                                                        });
                                                    }, 'json'
                                                );
                                            } else {
                                                display_form_fields_error();
                                                if (amount == '') {
                                                    container.find('input[name="amount"]').attr("style", "border-color: red");
                                                }

                                                if (narration == '') {
                                                    container.find('input[name="narration"]').attr("style", "border-color: red");
                                                }
                                            }
                                        });
                                        account_adder.attr('initialized', 'true')
                                    }
                                });

                                modal.delegate('input[name="narration"], input[name="amount"], select[name="account_id"]', 'change keyup', function () {
                                    var container = modal.find('form');
                                    var account_id_input = container.find('select[name="account_id"]');
                                    var account_operation_input = container.find('select[name="account_operation"]');
                                    var amount_input = container.find('input[name="amount"]');
                                    var narration_input = container.find('input[name="narration"]');

                                    account_id_input.removeAttr('style');
                                    account_operation_input.removeAttr('style');
                                    amount_input.removeAttr('style');
                                    narration_input.removeAttr('style');

                                });
                            });
                        }
                    });

                    $('.save_journal_entry').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                var modal = button.closest('.modal');
                                var transaction_date = modal.find('input[name="transaction_date"]').val();
                                var reference = modal.find('input[name="reference"]').val();
                                var journal_voucher_id = modal.find('input[name="journal_voucher_id"]').val();
                                var transaction_type = modal.find('select[name="transaction_type"]').val();
                                var currency_id = modal.find('select[name="currency_id"]').val();
                                var remarks = modal.find('textarea[name="remarks"]').val();
                                var amounts = new Array(), account_operations = new Array(), account_ids = new Array(), narrations = new Array();
                                var error = 0, i = 0, table = 0;

                                modal.find('table').each(function () {
                                    table++;
                                    var items_table = $(this);
                                    var table_type = items_table.attr('id');
                                    var tbody = items_table.find('tbody');
                                    tbody.find('input[name="amount"]').each(function () {
                                        var amount = $(this).unmask();
                                        var row = $(this).closest('tr');

                                        amounts[i] = amount;
                                        account_operations[i] = row.find('input[name="account_operation"]').val();
                                        account_ids[i] = table_type == "credit_table" ? row.find('input[name="credit_account_id"]').val() : row.find('input[name="debit_account_id"]').val();
                                        narrations[i] = table_type == "credit_table" ? row.find('input[name="credit_narration"]').val() : row.find('input[name="debit_narration"]').val();
                                        i++;
                                    });
                                });

                                if (transaction_date != '' && transaction_type != '' && reference != '' && amounts.length > 0 && account_ids.length > 0 && narrations.length > 0) {
                                    start_spinner();
                                    modal.modal('hide');
                                    $.post(
                                        base_url + "finance/save_journal_voucher_entry",
                                        {
                                            transaction_date: transaction_date,
                                            journal_voucher_id: journal_voucher_id,
                                            transaction_type: transaction_type,
                                            currency_id: currency_id,
                                            reference: reference,
                                            remarks: remarks,
                                            amounts: amounts,
                                            from_approved_requisitions: false,
                                            account_operations: account_operations,
                                            account_ids: account_ids,
                                            narrations: narrations

                                        }, function (data) {
                                            modal.find('form')[0].reset();
                                            button.closest('.box').find('.journal_transactions_table').DataTable().draw('page');
                                            toast('success', 'Entry was successfully saved');
                                            modal.find('tbody').each(function () {
                                                $(this).find('.artificial_row').remove();
                                            });
                                            initialize_common_js();
                                            stop_spinner();
                                        }
                                    )
                                } else {
                                    display_form_fields_error();
                                }
                            });
                            button.attr('initialized', 'true');
                        }
                    });

                    initialize_journal_voucher_buttons();

                    initialize_common_js();
                }
            });
            table.attr('initialized', 'true');
        } else {
            table.DataTable().draw('page');
        }
    });
});

function draw_approved_cash_datatable(table) {
    if (table.attr('initialized') != 'true') {
        var account_id = table.attr('account_id');
        var status_field = table.closest('.box ').find('select[name="status"]');
        table.DataTable({
            dom: "Blfrtip",
            buttons: [
                {
                    extend: 'print',
                    className: 'btn-xs',
                    text: '<i class="fa fa-print"></i> Print',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4, 5, 6]
                    }
                }
            ],
            "order": [[0, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "finance/approved_cash_requisitions_list/" + account_id,
                type: 'POST',
                data: function (d) {
                    d.status = status_field.val()
                }
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false }
            ],
            "drawCallback": function () {
                status_field.each(function () {
                    if (status_field.attr('initialized') != 'true') {
                        status_field.change(function () {
                            table.DataTable().draw('page');
                        });
                        status_field.attr('initialized', 'true');
                    }
                });

                $('.payment_voucher_form, .imprest_voucher_form').each(function () {

                    var modal = $(this);

                    var items_table = modal.find('table');

                    calculate_table_total_amount(items_table);

                    modal.delegate('select[name="currency_id"]', 'change keyup', function () {
                        load_exchange_rate($(this), '.modal');
                    });

                    modal.delegate('tfoot input[name="total_paid_amount"], input[name="wht_amount"]', 'change keyup', function () {
                        var wht_percentage_input = modal.find('input[name="wht_percentage"]');
                        var amount_withheld_input = modal.find('tfoot input[name="wht_amount"]');
                        var amount_payable_input = modal.find('tfoot input[name="total_paid_amount"]');
                        var amount_payable = amount_payable_input.unmask();
                        amount_payable = !isNaN(amount_payable) ? parseFloat(amount_payable) : 0;
                        var amount_withheld = amount_withheld_input.unmask();
                        amount_withheld = !isNaN(amount_withheld) ? parseFloat(amount_withheld) : 0;
                        var wht = (amount_withheld / amount_payable) * 100;
                        var total_paid = amount_payable - amount_withheld;
                        modal.find('tfoot .display_total_paid_amount').html((total_paid).toFixed(2)).priceFormat();
                        modal.find('tfoot input[name="amount_paid"]').val(total_paid);
                        wht_percentage_input.val(wht);
                    });

                    modal.delegate('input[name="wht_percentage"]', 'change keyup', function () {
                        var wht_percentage_input = modal.find('input[name="wht_percentage"]');
                        var amount_withheld_input = modal.find('tfoot input[name="wht_amount"]');
                        var amount_payable_input = modal.find('tfoot input[name="total_paid_amount"]');
                        var amount_payable = amount_payable_input.unmask();
                        amount_payable = !isNaN(amount_payable) ? parseFloat(amount_payable) : 0;
                        var wht_percentage = wht_percentage_input.unmask();
                        wht_percentage = !isNaN(wht_percentage) ? parseFloat(wht_percentage) : 0;
                        var amount_withheld = 0.01 * wht_percentage * amount_payable;
                        var total_paid = amount_payable - amount_withheld;
                        modal.find('tfoot .display_total_paid_amount').html((total_paid).toFixed(2)).priceFormat();
                        modal.find('tfoot input[name="amount_paid"]').val(total_paid);
                        amount_withheld_input.val(amount_withheld).priceFormat();
                    });

                    modal.find('.save_payment_voucher').each(function () {
                        var button = $(this);
                        if (button.attr('active') != 'true') {
                            button.click(function () {
                                var payment_date = modal.find('input[name="payment_date"]').val();
                                var request_type = modal.find('input[name="request_type"]').val();
                                var payee = modal.find('input[name="payee"]').val();
                                var exchange_rate = modal.find('input[name="exchange_rate"]').unmask();
                                var cheque_number = modal.find('input[name="cheque_number"]').val();
                                var currency_id = modal.find('select[name="currency_id"]').val();
                                var remarks = modal.find('tfoot textarea[name="remarks"]').val();
                                var credit_account_id = modal.find('select[name="credit_account_id"]').val();
                                var wht_percentage = modal.find('input[name="wht_percentage"]').val();
                                var debit_accounts_ids = new Array(), rates = new Array(), amounts = new Array(), descriptions = new Array(), quantities = new Array(), item_ids = new Array(), item_types = new Array(), i = 0;
                                var tbody = modal.find('tbody');
                                tbody.find('tr').each(function () {

                                    var row = $(this);
                                    var amount = row.find('input[name="amount"]').unmask();
                                    var description = row.find('input[name="description"]').val();
                                    var rate = row.find('input[name="rate"]').unmask();
                                    var quantity = row.find('input[name="quantity"]').val();
                                    var item_id = row.find('input[name="item_id"]').val();
                                    var item_type = row.find('input[name="item_type"]').val();
                                    var debit_account_id = (request_type == "payment_request_invoice" || request_type == "sub_contract_payment_requisition") ? row.find('input[name="debit_account_id"]').val() : row.find('select[name="debit_account_id"]').val();

                                    if ((debit_account_id.trim() !== '' && parseFloat(amount) > 0)) {
                                        debit_accounts_ids[i] = debit_account_id;
                                        amounts[i] = amount;
                                        descriptions[i] = description;
                                        rates[i] = rate;
                                        quantities[i] = quantity;
                                        item_ids[i] = item_id;
                                        item_types[i] = item_type;
                                        i++;
                                    }
                                });

                                if (credit_account_id.trim() != '' && payment_date.trim() != '' && debit_accounts_ids.length > 0 && payee.trim() != '' && remarks != '') {
                                    modal.modal('hide');
                                    var requisition_approval_id = modal.find('input[name="requisition_approval_id"]').val();
                                    var payment_voucher_id = modal.find('input[name="payment_voucher_id"]').val();
                                    var junction_id = modal.find('input[name="junction_id"]').val();
                                    var junction_type = modal.find('input[name="junction_type"]').val();
                                    var reference = modal.find('input[name="reference"]').val();
                                    var vat_percentage = modal.find('input[name="vat_percentage"]').val();
                                    var amount_paid = modal.find('input[name="total_paid_amount"]').unmask();

                                    $.post(
                                        base_url + "finance/save_payment_voucher/",
                                        {
                                            payment_date: payment_date,
                                            request_type: request_type,
                                            payee: payee,
                                            exchange_rate: exchange_rate,
                                            cheque_number: cheque_number,
                                            currency_id: currency_id,
                                            junction_id: junction_id,
                                            junction_type: junction_type,
                                            reference: reference,
                                            vat_percentage: vat_percentage,
                                            amount_paid: amount_paid,
                                            wht_percentage: wht_percentage,
                                            payment_voucher_id: payment_voucher_id,
                                            requisition_approval_id: requisition_approval_id,
                                            credit_account_id: credit_account_id,
                                            quantities: quantities,
                                            debit_accounts_ids: debit_accounts_ids,
                                            rates: rates,
                                            amounts: amounts,
                                            descriptions: descriptions,
                                            item_ids: item_ids,
                                            item_types: item_types,
                                            remarks: remarks
                                        }, function (data) {
                                            modal.find('form')[0].reset();
                                            toast('success', 'Payment Voucher has been Created');
                                            if (payment_voucher_id == '') {
                                                tbody.find('.searchable').select2('val', '');
                                            }

                                            table.DataTable().draw('page');
                                            stop_spinner();
                                        }
                                    );
                                } else {
                                    display_form_fields_error();
                                }
                            });
                            button.attr('active', 'true');
                        }

                    });

                    modal.on('change', '.location_selector', function () {
                        var location_id = modal.find('select[name="location_id"]').val();
                        var sub_location_selector = modal.find('.sub_location_id');
                        start_spinner();
                        $.post(
                            base_url + "inventory/load_sub_location_options",
                            {
                                location_id: location_id

                            }, function (data) {

                                sub_location_selector.html(data.sub_location_options);

                                stop_spinner();

                                initialize_common_js();

                            }, 'json'
                        ).complete();

                    });

                    modal.find('.revoke_approved_payment').each(function () {
                        var button = $(this);
                        button.click(function () {
                            if (button.attr('initialized') != 'true') {
                                var type;
                                if (modal.hasClass('imprest_voucher_form')) {
                                    var date = modal.find('input[name="imprest_date"]').val();
                                } else {
                                    var date = modal.find('input[name="payment_date"]').val();
                                }
                                var approval_id = modal.find('input[name="requisition_approval_id"]').val();
                                var request_type = modal.find('input[name="request_type"]').val();
                                switch (request_type) {
                                    case 'sub_contract_payment_requisition':
                                        type = 'sub_contract';
                                        break;
                                    case 'payment_request_invoice':
                                        type = 'invoice';
                                        break;
                                    case 'requisition':
                                        type = 'requisition';
                                        break;
                                }
                                var remarks = modal.find('textarea[name="remarks"]').val();
                                if (date != '') {
                                    $.confirm({
                                        title: 'Revoke Approved Payment',
                                        content: 'This action is irreversible! Are you sure?',
                                        buttons: {
                                            confirm: {
                                                text: 'Confirm Revoke',
                                                btnClass: 'btn btn-danger',
                                                action: function () {
                                                    modal.modal('hide');
                                                    start_spinner();
                                                    $.post(
                                                        base_url + "finance/cancel_approved_payment/",
                                                        {
                                                            date: date,
                                                            approval_id: approval_id,
                                                            remarks: remarks,
                                                            request_type: type
                                                        }, function (data) {
                                                            modal.find('form')[0].reset();
                                                            toast('success', 'Approved Payment has been Cancelled');
                                                            modal.closest('.box').find('.approved_cash_requisitions_table ').DataTable().draw('page');
                                                            stop_spinner();
                                                        }
                                                    );

                                                }
                                            },
                                            cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                                        }
                                    });
                                } else {
                                    toast('error', 'Make sure the date has been filled correctly')
                                }
                            }
                        });
                    });

                    items_table.delegate(' input[name="rate"],  input[name="quantity"]', 'change keyup', function () {
                        var item = $(this);
                        var tr = item.closest('tr');
                        var rate = tr.find(' input[name="rate"]').unmask();
                        var quantity = tr.find(' input[name="quantity"]').val();
                        var amount = parseFloat(rate) * parseFloat(quantity);
                        tr.find(' input[name="amount"]').val(amount).priceFormat();

                        var total_amount = 0;
                        items_table.find('tbody input[name="amount"]').each(function () {
                            $(this).priceFormat();
                            var amount = $(this).val();
                            amount = amount != '' ? parseFloat($(this).unmask()) : 0;
                            total_amount += amount;
                        });
                        items_table.find('.total_amount_display').html(total_amount).priceFormat();

                    });

                    if (modal.hasClass('imprest_voucher_form')) {
                        modal.find('select[name="credit_account_id"], select[name="debit_account_id"]').change(function () {
                            if ($(this).val() != '' && (modal.find('select[name="credit_account_id"]').val() == modal.find('select[name="debit_account_id"]').val())) {
                                toast('error', 'Please choose a different account');
                                $(this).val('').change();
                            }
                        });

                        modal.find('.save_imprest_voucher').each(function () {
                            var button = $(this);
                            if (button.attr('initilized') != 'true') {
                                button.click(function () {
                                    var imprest_date = modal.find('input[name="imprest_date"]').val();
                                    var requisition_approval_id = modal.find('input[name="requisition_approval_id"]').val();
                                    var credit_account_id = modal.find('select[name="credit_account_id"]').val();
                                    var debit_account_id = modal.find('select[name="debit_account_id"]').val();
                                    var currency_id = modal.find('select[name="currency_id"]').val();
                                    var exchange_rate = modal.find('input[name="exchange_rate"]').unmask();
                                    var remarks = modal.find('textarea[name="remarks"]').val();
                                    var handler_id = modal.find('select[name="handler_id"]').val();
                                    var item_types = Array(),
                                        requisition_approval_material_item_ids = Array(),
                                        requisition_approval_asset_item_ids = Array(),
                                        requisition_approval_cash_item_ids = Array(),
                                        requisition_approval_service_item_ids = Array(),
                                        quantities = Array(),
                                        rates = Array(),
                                        i = 0;

                                    modal.find('input[name="item_type"]').each(function () {
                                        var row = $(this).closest('tr');
                                        item_types[i] = $(this).val();
                                        if (item_types[i] == 'material') {
                                            requisition_approval_material_item_ids[i] = row.find('input[name="requisition_approval_material_item_id"]').val();
                                        } else if (item_types[i] == 'asset') {
                                            requisition_approval_asset_item_ids[i] = row.find('input[name="requisition_approval_asset_item_id"]').val();
                                        } else if (item_types[i] == 'cash') {
                                            requisition_approval_cash_item_ids[i] = row.find('input[name="requisition_approval_cash_item_id"]').val();
                                        } else {
                                            requisition_approval_service_item_ids[i] = row.find('input[name="requisition_approval_service_item_id"]').val();
                                        }
                                        quantities[i] = row.find('input[name="quantity"]').val();
                                        rates[i] = row.find('input[name="rate"]').unmask();
                                        i++;
                                    });

                                    if (imprest_date.trim() != '' && (credit_account_id != '' && debit_account_id != '') && handler_id != '') {
                                        start_spinner();
                                        modal.modal('hide');
                                        $.post(
                                            base_url + "finance/save_imprest_voucher",
                                            {
                                                imprest_date: imprest_date,
                                                requisition_approval_id: requisition_approval_id,
                                                credit_account_id: credit_account_id,
                                                debit_account_id: debit_account_id,
                                                currency_id: currency_id,
                                                exchange_rate: exchange_rate,
                                                remarks: remarks,
                                                handler_id: handler_id,
                                                item_types: item_types,

                                                requisition_approval_material_item_ids: requisition_approval_material_item_ids,
                                                requisition_approval_asset_item_ids: requisition_approval_asset_item_ids,
                                                requisition_approval_cash_item_ids: requisition_approval_cash_item_ids,
                                                requisition_approval_service_item_ids: requisition_approval_service_item_ids,
                                                quantities: quantities,
                                                rates: rates

                                            }, function (data) {
                                                toast('success', 'Imprest Submitted Successfully');
                                                table.DataTable().draw('page');
                                                stop_spinner();
                                            }
                                        );
                                    } else {
                                        display_form_fields_error();
                                    }

                                });
                                button.attr('initilized', 'true');
                            }
                        });
                    }

                    if (modal.hasClass('payment_voucher_form')) {
                        modal.find('tbody tr').each(function () {
                            var row = $(this);
                            row.find('select').select2({ width: "100%" });
                        });
                    }

                    $('.save_journal_entry2').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                var modal = button.closest('.modal');
                                var transaction_date = modal.find('input[name="transaction_date"]').val();
                                var reference = modal.find('input[name="reference"]').val();
                                var transaction_type = modal.find('input[name="transaction_type"]').val();
                                var currency_id = modal.find('select[name="currency_id"]').val();
                                var remarks = modal.find('textarea[name="remarks"]').val();
                                var amounts = [modal.find('input[name="amount"]').unmask(), modal.find('input[name="amount"]').unmask()];
                                var item_types = [modal.find('input[name="item_type"]').val(), modal.find('input[name="item_type"]').val()];
                                var account_ids = [modal.find('input[name="stakeholder_id"]').val(), modal.find('select[name="credit_account_id"]').val()];
                                var account_operations = ['DEBIT', 'CREDIT'];
                                var narrations = [modal.find('input[name="narration"]').val(), modal.find('input[name="narration"]').val()];
                                var requisition_approval_id = modal.find('input[name="requisition_approval_id"]').val();
                                var invoice_id = modal.find('input[name="invoice_id"]').val();
                                var approved_item_id = modal.find('input[name="approved_item_id"]').val();

                                if (transaction_date != '' && transaction_type != '' && reference != '' && amounts.length > 0 && account_ids.length > 0 && narrations != '' && remarks != '') {
                                    start_spinner();
                                    modal.modal('hide');
                                    $.post(
                                        base_url + "finance/save_journal_voucher_entry",
                                        {
                                            transaction_date: transaction_date,
                                            transaction_type: transaction_type,
                                            currency_id: currency_id,
                                            reference: reference,
                                            remarks: remarks,
                                            amounts: amounts,
                                            account_operations: account_operations,
                                            account_ids: account_ids,
                                            item_types: item_types,
                                            narrations: narrations,
                                            from_approved_requisitions: true,
                                            invoice_id: invoice_id,
                                            requisition_approval_id: requisition_approval_id,
                                            approved_item_id: approved_item_id

                                        }, function (data) {
                                            modal.find('form')[0].reset();
                                            table.DataTable().draw('page');
                                            initialize_common_js();
                                            stop_spinner();
                                        }
                                    )
                                } else {
                                    display_form_fields_error();
                                }
                            });
                            button.attr('initialized', 'true');
                        }
                    });

                });

                $('.retirement_examination_modal').each(function () {
                    var modal = $(this);
                    modal.on('shown.bs.modal', function (e) {
                        if (modal.attr('initialized') != 'true') {
                            modal.find('.retirement_examination_list').each(function () {
                                var table = $(this);
                                var imprest_voucher_id = table.attr('imprest_voucher_id');
                                if (table.attr('initialized') != 'true') {
                                    table.DataTable({
                                        "processing": true,
                                        "serverSide": true,
                                        "ajax": {
                                            url: base_url + "finance/retirements_examination_list/" + imprest_voucher_id,
                                            type: 'POST'
                                        },
                                        "columns": [
                                            { "orderable": true },
                                            { "orderable": false },
                                            { "orderable": false }
                                        ],
                                        "language": {
                                            "zeroRecords": "<div class='alert alert-info'>No matching retirements found</div>",
                                            "emptyTable": "<div class='alert alert-info'>No retirements found</div>"
                                        }, "drawCallback": function () {

                                            $('.approve_examination').each(function () {
                                                var button = $(this);
                                                if (button.attr('initialized') != 'true') {
                                                    button.click(function () {
                                                        var modal = button.closest('.modal');

                                                        var examination_date = modal.find('input[name="examination_date"]').val();
                                                        var imprest_voucher_retirement_id = modal.find('input[name="imprest_voucher_retirement_id"]').val();
                                                        var retirement_to = modal.find('select[name="retirement_to"]').val();
                                                        var remarks = modal.find('textarea[name="remarks"]').val();
                                                        if (examination_date != '') {
                                                            modal.modal('hide');
                                                            start_spinner();
                                                            $.post(
                                                                base_url + "finance/approve_retirement_examination",
                                                                {
                                                                    examination_date: examination_date,
                                                                    imprest_voucher_retirement_id: imprest_voucher_retirement_id,
                                                                    retirement_to: retirement_to,
                                                                    remarks: remarks

                                                                }, function (data) {
                                                                    table.DataTable().draw('page');
                                                                    stop_spinner();
                                                                    initialize_common_js();
                                                                });
                                                        }
                                                    });
                                                    button.attr('initialized', 'true');
                                                }

                                            });

                                            $('.disapprove_examination').each(function () {
                                                var button = $(this);
                                                if (button.attr('initialized') != 'true') {
                                                    button.click(function () {
                                                        var modal = button.closest('.modal');

                                                        var examination_date = modal.find('input[name="examination_date"]').val();
                                                        var imprest_voucher_retirement_id = modal.find('input[name="imprest_voucher_retirement_id"]').val();
                                                        var remarks = modal.find('textarea[name="remarks"]').val();
                                                        if (examination_date != '') {
                                                            modal.modal('hide');
                                                            start_spinner();
                                                            $.post(
                                                                base_url + "finance/disapprove_retirement_examination",
                                                                {
                                                                    examination_date: examination_date,
                                                                    imprest_voucher_retirement_id: imprest_voucher_retirement_id,
                                                                    remarks: remarks

                                                                }, function (data) {
                                                                    table.DataTable().draw('page');
                                                                    stop_spinner();
                                                                    initialize_common_js();
                                                                });
                                                        }
                                                    });
                                                    button.attr('initialized', 'true');
                                                }

                                            });

                                            initialize_common_js();
                                        }
                                    });
                                    table.attr('initialized', 'true');
                                }
                            });
                            modal.attr('initialized', 'true');
                        }
                    });
                });

                $('.save_sub_contract_withholding_tax_payment').click(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        var form = button.closest('.modal');
                        var withholding_tax_id = form.find('input[name="withholding_tax_id"]').val();
                        var payment_date = form.find('input[name="payment_date"]').val();
                        var debit_account_id = form.find('input[name="debit_account_id"]').val();

                        if (payment_date != '') {
                            $.post(
                                base_url + "finance/pay_withholding_tax/" + withholding_tax_id,

                                {
                                    payment_date: payment_date,
                                    paid_to: debit_account_id

                                }, function (data) {
                                    table.DataTable().draw('page');
                                });

                        } else {
                            toast('error', 'Please select payment date');
                        }
                        button.attr('initialized', 'true');
                    }
                });

                initialize_common_js();

            },
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching approved cash requisitions found</div>",
                "emptyTable": "<div class='alert alert-info'>No approved cash requisitions found</div>"
            }
        });
        table.attr('initialized', 'true');
    } else {
        table.DataTable().draw('page');
    }
}

draw_approved_cash_datatable($('.approved_cash_requisitions_table'));

$('a[href="#chart_of_accounts"]').each(function () {
    var tab_container = $(this);

    $('.save_account').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            var modal = button.closest('.modal');
            var account_group_field = modal.find('select[name="account_group_id"]');
            var all_group_options = account_group_field.html();
            var parent_id = modal.find('input[name="parent_id"]').val();
            modal.find('select[name="account_for"]').on('change keyup', function () {
                var account_for = $(this).val();
                var related_to_field = modal.find('select[name="related_to"]');
                if (account_for == 'other') {
                    related_to_field.attr('disabled', 'disabled');
                    related_to_field.html('<option></option>').change();
                    account_group_field.html(all_group_options).change();
                } else {
                    related_to_field.removeAttr('disabled');
                    start_spinner();
                    var account_groups = [];
                    if (account_for == 'project') {
                        account_groups = 'all';
                        $.post(
                            base_url + "projects/load_project_dropdown_options",
                            {

                            }, function (data) {
                                related_to_field.html(data).change();
                            }
                        ).complete();
                    } else if (account_for == 'cost_center') {
                        account_groups = 'all';
                        $.post(
                            base_url + "costs/load_cost_center_dropdown_options",
                            {

                            }, function (data) {
                                related_to_field.html(data).change();
                            }
                        ).complete();
                    }

                    $.post(
                        base_url + "finance/load_account_group_options",
                        {
                            account_groups: account_groups,
                            parent_id: parent_id
                        }, function (data) {
                            account_group_field.html(data).change();
                            stop_spinner();
                        }
                    ).complete();
                }
            });

            modal.find('select[name="account_group_id"]').on('change keyup', function () {
                var account_group_selector = $(this);
                if (account_group_selector.attr('initialized') != 'true') {
                    var selected_account_id = account_group_selector.val();
                    var bank_div = modal.find('#bank_options');
                    var bank_id = modal.find('select[name="bank_id"]');

                    start_spinner();
                    $.post(
                        base_url + "finance/bank_options",
                        {
                            selected_account_id: selected_account_id
                        }, function (data) {
                            data ? bank_div.show() : bank_div.hide();
                            bank_id.html(data).change();
                            var bank_details = modal.find('#bank_details');
                            bank_details.hide();
                        }
                    ).complete();
                    stop_spinner();
                }
            });

            modal.find('select[name="bank_id"]').on('change keyup', function () {
                var bank_details = modal.find('#bank_details');
                modal.find('#account_number').val('');
                modal.find('#branch').val('');
                modal.find('#swift_code').val('');

                if (modal.find('select[name="bank_id"]').val() > 0) {
                    bank_details.show();
                } else {
                    bank_details.hide();
                }
            });

            button.click(function () {
                var modal = button.closest('.modal');
                var account_id = modal.find('input[name="account_id"]').val();
                var account_name = modal.find('input[name="account_name"]').val();
                var account_group = modal.find('input[name="account_group"]').val();
                var account_code = modal.find('input[name="account_code"]').val();
                var account_group_id = modal.find('select[name="account_group_id"]').val();
                var currency_id = modal.find('select[name="currency_id"]').val();
                var related_to = modal.find('select[name="related_to"]').val();
                var account_for = modal.find('select[name="account_for"]').val();
                var bank_id = modal.find('select[name="bank_id"]').val();
                var opening_balance = account_id != '' ? null : modal.find('input[name="opening_balance"]').unmask();
                var description = modal.find('textarea[name="description"]').val();
                var account_number = modal.find('#account_number').val();
                var branch = modal.find('#branch').val();
                var swift_code = modal.find('#swift_code').val();
                if (account_name != '' && (account_group_id != '' || account_group != '')) {
                    modal.modal('hide');
                    start_spinner();

                    $.post(
                        base_url + "finance/save_account/",
                        {
                            account_id: account_id,
                            account_name: account_name,
                            account_group: account_group,
                            currency_id: currency_id,
                            account_code: account_code,
                            account_for: account_for,
                            related_to: related_to,
                            bank_id: bank_id,
                            account_group_id: account_group_id,
                            opening_balance: opening_balance,
                            description: description,
                            account_number: account_number,
                            branch: branch,
                            swift_code: swift_code
                        }, function (data) {
                            modal.find('form')[0].reset();
                            window.location.replace(base_url + "finance/settings");
                            stop_spinner();
                        }
                    );
                }

            });

            button.attr('active', 'true');
        }
    });

    $('.save_account_group').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                var modal = button.closest('.modal');
                var account_group_id = modal.find('input[name="account_group_id"]').val();
                var account_group_name = modal.find('input[name="account_group_name"]').val();
                var group_nature_id = modal.find('select[name="group_nature_id"]').val();
                var parent_id = modal.find('input[name="parent_id"]').val();
                var group_code = modal.find('input[name="group_code"]').val();
                var description = modal.find('textarea[name="description"]').val();
                if (account_group_name != '') {
                    modal.modal('hide');
                    start_spinner();

                    $.post(
                        base_url + "finance/save_account_group/",
                        {
                            account_group_id: account_group_id,
                            account_group_name: account_group_name,
                            parent_id: parent_id,
                            group_nature_id: group_nature_id,
                            group_code: group_code,
                            description: description
                        }, function () {
                            modal.find('form')[0].reset();
                            window.location.replace(base_url + "finance/settings");
                            stop_spinner();
                        }
                    );
                }
            });
            button.attr('active', 'true');
        }
    });

    $('.delete_account').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                var account_id = button.attr('account_id');
                $.confirm({
                    title: 'Delete Account',
                    content: 'This action is irreversible! Are you sure?',
                    buttons: {
                        confirm: {
                            text: 'Confirm Delete',
                            btnClass: 'btn btn-danger btn-xs',
                            action: function () {
                                start_spinner();
                                $.post(
                                    base_url + "finance/delete_account",
                                    {
                                        account_id: account_id
                                    }, function (data) {
                                        window.location.replace(base_url + "finance/settings");
                                    }
                                ).complete(function () {
                                    stop_spinner();
                                });
                            }
                        },
                        cancel: {
                            text: "Cancel",
                            btnClass: 'btn btn-default btn-xs'
                        }
                    }
                });
            });
            button.attr('active', 'true');
        }
    });

    $('.delete_account_group').each(function () {
        var button = $(this);
        if (button.attr('active') != 'true') {
            button.click(function () {
                var account_id = $(this).attr('account_id');
                if (confirm('Are you sure?')) {
                    start_spinner();
                    $.post(
                        base_url + "finance/delete_account_group",
                        {
                            account_group_id: account_group_id
                        }, function (data) {
                            $('#account_groups_list').DataTable().draw('page');
                        }
                    ).complete(function () {
                        stop_spinner();
                    });
                }
            });
            button.attr('active', 'true');
        }
    });

});

$('a[href="#currencies"]').on('shown.bs.tab', function () {
    $('#currencies_table').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "finance/currencies_list/",
                    type: 'POST'
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching currencies found</div>",
                    "emptyTable": "<div class='alert alert-info'>No currencies found</div>"
                }, "drawCallback": function () {
                    $('.save_currency').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                var form_container = button.closest('form');
                                var currency_name = form_container.find('  input[name="currency_name"]').val();
                                var symbol = form_container.find('  input[name="symbol"]').val();
                                var rate_to_native = form_container.find('  input[name="rate_to_native"]').unmask();
                                var currency_id = form_container.find('  input[name="currency_id"]').val();

                                if (currency_name.trim() != '' && symbol.trim() != '' && (currency_id != '' || rate_to_native > 0)) {
                                    var modal = form_container.closest('.modal');
                                    modal.modal('hide');
                                    start_spinner();
                                    $.post(
                                        base_url + "finance/save_currency/",
                                        {
                                            currency_name: currency_name,
                                            symbol: symbol,
                                            rate_to_native: rate_to_native,
                                            currency_id: currency_id
                                        }, function () {
                                            stop_spinner();
                                            modal.find('form')[0].reset();
                                            iziToast.success({
                                                title: '',
                                                message: 'Currency was Successfully saved!',
                                            });
                                            $('#currencies_table').DataTable().draw('page');
                                        }
                                    );
                                } else {
                                    display_form_fields_error();
                                }
                            });
                            button.attr('initialized', 'true');
                        }
                    });

                    $('.delete_currency').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                if (confirm('Are You Sure?')) {
                                    $.post(
                                        base_url + "finance/delete_currency",
                                        {
                                            currency_id: button.attr('currency_id')
                                        }, function () {
                                            toast('success', 'Currency was successfully deleted');
                                            $('#currencies_table').DataTable().draw('page');
                                        }
                                    );
                                }
                            });
                            button.attr('initialized', 'true')
                        }
                    });

                    $('#save_exchange_rates').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                var modal = button.closest('.modal');
                                var date = modal.find('input[name="date"]').val();
                                var currency_ids = Array(), exchange_rates = Array();
                                var i = 0;
                                modal.find(' input[name="currency_id"]').each(function () {
                                    var exchange_rate = $(this).closest('tr').find('input[name="exchange_rate"]').unmask();
                                    if (parseFloat(exchange_rate) > 0) {
                                        currency_ids[i] = $(this).val();
                                        exchange_rates[i] = exchange_rate;
                                    }
                                    i++;
                                });

                                if (currency_ids.length > 0) {
                                    start_spinner();
                                    modal.modal('hide');
                                    $.post(
                                        base_url + "finance/update_exchange_rates",
                                        {
                                            date: date,
                                            currency_ids: currency_ids,
                                            exchange_rates: exchange_rates
                                        }, function () {
                                            stop_spinner();
                                            toast('success', 'Exchange rates has been updated');
                                            $('#currencies_table').DataTable().draw('page');
                                        }
                                    );
                                }

                            });
                            button.attr('initialized', 'true');
                        }
                    });

                    initialize_common_js();
                    $('.exchange_rate').priceFormat();
                }
            });
            table.attr('initialized', 'true');
        }
    });
});

$('a[href="#cost_centers"]').on('shown.bs.tab', function () {
    $('#cost_centers_list').each(function () {
        var table = $(this);
        if (table.attr('initialized') != 'true') {
            table.DataTable({
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "Finance/cost_centers_list",
                    type: 'POST'
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching Cost Centers found</div>",
                    "emptyTable": "<div class='alert alert-info'>No Cost Centers found</div>"
                }, "drawCallback": function () {

                    $(this).find('tr').each(function () {
                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                    });

                    $('.save_cost_center').each(function () {
                        var button = $(this);
                        if (button.attr('initialized') != 'true') {
                            button.click(function () {
                                var modal = button.closest('.modal');
                                var cost_center_id = modal.find("input[name='cost_center_id']").val();
                                var cost_center_name = modal.find("input[name='cost_center_name']").val();
                                var description = modal.find("textarea[name='description']").val();

                                if (cost_center_name.trim() != '') {
                                    start_spinner();
                                    modal.modal('hide');
                                    $.post(
                                        base_url + "Finance/save_cost_center",
                                        {
                                            cost_center_name: cost_center_name,
                                            cost_center_id: cost_center_id,
                                            description: description
                                        }, function () {
                                            stop_spinner();
                                            modal.find('form')[0].reset();
                                            $('#cost_centers_list').DataTable().draw('page');
                                        }
                                    );
                                } else {
                                    toast('warning', 'Cost Center Name Must be filled ');
                                }
                            });
                            button.attr('initialized', 'true');
                        }
                    });

                    //Delete cost center
                    $('.delete_cost_center_button').each(function () {
                        var button = $(this);
                        if (button.attr('active') != 'true') {
                            button.click(function () {
                                if (confirm('Are you sure?')) {
                                    start_spinner();
                                    $.post(
                                        base_url + "Finance/delete_cost_center",
                                        {
                                            cost_center_id: button.attr('cost_center_id')

                                        }, function (data) {

                                            toast('success', 'Deleted Successfully');

                                            $('#cost_centers_list').DataTable().draw('page');
                                        }
                                    ).complete(function () {

                                        stop_spinner();
                                    });
                                }
                            });

                            button.attr('active', 'true');
                        }
                    });

                    initialize_common_js();
                }
            });
            table.attr('initialized', 'true');
        }
    });
});

function load_exchange_rate(currency_selector, container, date) {
    var d = new Date();
    var date = typeof date !== 'undefined' && date !== '' ? date : d.getFullYear() + '-' + d.getMonth() + '-' + d.getDate();
    start_spinner();
    $.post(
        base_url + "finance/get_exchange_rate",
        {
            currency_id: currency_selector.val(),
            date: date
        }, function (data) {
            stop_spinner();
            var exchange_rate_field = currency_selector.closest(container).find('input[name="exchange_rate"]');
            exchange_rate_field.val(data).priceFormat();
            if (currency_selector.val() == '1') {
                exchange_rate_field.attr('readonly', 'readonly');
            } else {
                exchange_rate_field.removeAttr('readonly');
            }
        }
    );

}

function draw_payments_table(table)
{
    if (table.attr('initialized') != 'true') {
        var project_id = table.attr('project_id');
        table.DataTable({
            "order": [[1, "DESC"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "finance/statement_transactions/",
                type: 'POST',
                data: {
                    project_id: project_id
                }
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'> No payments match found</div>",
                "emptyTable": "<div class='alert alert-info'> No payments found</div>"
            },
            "drawCallback": function () {


                $('.expense_payment_form, .invoice_payment_form').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        modal.on('show.bs.modal', function (e) {

                            modal.find('select[name="currency_id"]').change(function () {
                                if ($(this).val() != '') {
                                    load_exchange_rate($(this), '.modal');
                                } else {
                                    modal.find('input[name="exchange_rate"]').val();
                                }
                            });

                            modal.find('select[name="invoice_id"]').change(function () {
                                var debit_account_field = $(this).closest('.modal').find('select[name="debit_account_id"]');
                                if ($(this).val() != '') {
                                    start_spinner();
                                    $.post(
                                        base_url + "finance/load_invoice_payment_requirements",
                                        {
                                            invoice_id: $(this).val()
                                        }, function (data) {
                                            stop_spinner();
                                            debit_account_field.html(data.debit_account_options).change();
                                            modal.find('select[name="currency_id"]').val(data.currency_id).change();
                                            modal.find('input[name="amount"]').val(data.unpaid_amount).priceFormat();
                                        },
                                        'json'
                                    );
                                } else {
                                    debit_account_field.html('<option></option>').change();
                                }
                            });

                            var tbody = modal.find('tbody');
                            var get_cost_centers = function (row) {
                                var selector = row.find('select[name="cost_center_type"]');
                                var initial_options = selector.html();
                                selector.change(function () {
                                    var type = selector.val();
                                    if (type != 'task') {
                                        start_spinner();
                                        $.post(
                                            base_url + "finance/expense_voucher_cost_center_options",
                                            {
                                                type: type
                                            }, function (data) {
                                                row.find('select[name="cost_center_id"]').html(data).change();
                                                stop_spinner();
                                            }
                                        );
                                    } else {
                                        selector.html(initial_options).change();
                                    }
                                });
                            };

                            tbody.find('tr').each(function () {
                                get_cost_centers($(this));
                            });

                            modal.find('.payment_row_adder').each(function () {
                                if ($(this).attr('initialized') != 'true') {
                                    $(this).click(function () {
                                        var tbody = $(this).closest('table').find('tbody');
                                        var new_row = tbody.closest('table').find('.payment_row_template').clone().removeAttr('style')
                                            .removeClass('payment_row_template').addClass('payment_artificial_row').appendTo(tbody);

                                        new_row.find('.payment_row_remover').click(function () {
                                            $(this).closest('tr').remove();
                                        });
                                        new_row.find('select').addClass('searchable');

                                        get_cost_centers(new_row);

                                        initialize_common_js();
                                    });
                                    $(this).attr('initialized', 'true');
                                }
                            });

                            modal.find('.payment_row_remover').click(function () {
                                $(this).closest('tr').remove();
                            });

                        });
                    }
                });

                $('.save_expense_payment').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');
                            var payment_date = modal.find('input[name="payment_date"]').val();
                            var payment_voucher_id = modal.find('input[name="payment_voucher_id"]').val();
                            var credit_account_id = modal.find('select[name="credit_account_id"]').val();
                            var reference = modal.find('input[name="reference"]').val();
                            var payee = modal.find('input[name="payee"]').val();
                            var currency_id = modal.find('select[name="currency_id"]').val();
                            var exchange_rate = modal.find('input[name="exchange_rate"]').val();
                            var remarks = modal.find('textarea[name="remarks"]').val();

                            var debit_account_ids = new Array();
                            var cost_center_types = new Array();
                            var cost_center_ids = new Array();
                            var amounts = new Array();
                            var descriptions = new Array();
                            var error = 0;
                            var i = 0, id;

                            var tbody = modal.find('tbody');
                            tbody.find('select[name="cost_center_type"]').each(function () {
                                var row = $(this).closest('tr');
                                var cost_center_type = $(this).val();
                                id = row.find('select[name="cost_center_id"]').val();
                                var description = row.find('textarea[name="description"]').val();
                                var amount = row.find('input[name="amount"]').unmask();

                                if ((id != '' || cost_center_type == 'task') && description != '' && amount > 0) {
                                    cost_center_types[i] = cost_center_type;
                                    cost_center_ids[i] = id;
                                    debit_account_ids[i] = row.find('select[name="debit_account_id"]').val();
                                    amounts[i] = amount;
                                    descriptions[i] = description;
                                    i++;
                                } else {
                                    error++;
                                }

                            });


                            if (payment_date != '' && payment_date != '' && credit_account_id != '' && cost_center_ids.length > 0 && error == 0) {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "finance/save_expense_payment",
                                    {
                                        payment_date: payment_date,
                                        payment_voucher_id: payment_voucher_id,
                                        project_id: project_id,
                                        credit_account_id: credit_account_id,
                                        reference: reference,
                                        payee: payee,
                                        currency_id: currency_id,
                                        exchange_rate: exchange_rate,
                                        remarks: remarks,
                                        debit_account_ids: debit_account_ids,
                                        cost_center_types: cost_center_types,
                                        cost_center_ids: cost_center_ids,
                                        amounts: amounts,
                                        descriptions: descriptions
                                    }, function (data) {
                                        toast('success', 'Payment has been submitted successfully');
                                        modal.find('form')[0].reset();
                                        initialize_common_js();
                                    }
                                ).complete(function () {
                                    modal.find('form')[0].reset();
                                    table.DataTable().draw('page');
                                    initialize_common_js();
                                    stop_spinner();
                                });
                            } else {
                                display_form_fields_error();
                            }
                        });
                        button.attr('initialized', 'true');
                    }

                });

                $('.save_invoice_payment').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');
                            var payment_date = modal.find('input[name="payment_date"]').val();
                            var payment_voucher_id = modal.find('input[name="payment_voucher_id"]').val();
                            var credit_account_id = modal.find('select[name="credit_account_id"]').val();
                            var debit_account_id = modal.find('select[name="debit_account_id"]').val();
                            var reference = modal.find('input[name="reference"]').val();
                            var payee = modal.find('input[name="payee"]').val();
                            var amount = modal.find('input[name="amount"]').unmask();
                            var currency_id = modal.find('select[name="currency_id"]').val();
                            var exchange_rate = modal.find('input[name="exchange_rate"]').val();
                            var remarks = modal.find('textarea[name="remarks"]').val();
                            var invoice_id = modal.find('select[name="invoice_id"]').val();

                            if (amount != '' && remarks != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "finance/save_invoice_payment",
                                    {
                                        payment_date: payment_date,
                                        payment_voucher_id: payment_voucher_id,
                                        credit_account_id: credit_account_id,
                                        amount: amount,
                                        debit_account_id: debit_account_id,
                                        reference: reference,
                                        payee: payee,
                                        currency_id: currency_id,
                                        exchange_rate: exchange_rate,
                                        invoice_id: invoice_id,
                                        remarks: remarks
                                    }, function (data) {
                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();

                                        initialize_common_js();
                                    });
                            } else {
                                display_form_fields_error();
                            }
                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_payment_record').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Payment',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(base_url + "Finance/delete_payments",
                                                {
                                                    delete_payment_id: button.attr('delete_payment_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');

                                                }).complete(function () {
                                                    stop_spinner();
                                                });
                                        }
                                    },
                                    cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                                }
                            });
                        });
                    }
                });
                initialize_common_js();
            }
        });
        table.attr('initialized', 'true');
    } else {
        table.DataTable().draw('page');
    }
}

draw_payments_table($('#payments_table'));



$('#imprests_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[0, "DESC"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "finance/imprests/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching imprest found</div>",
                "emptyTable": "<div class='alert alert-info'>No imprest found</div>"
            },

            "drawCallback": function () {
                table.find('tr td:last-child').attr('nowrap', 'nowrap');

                $('.imprest_documents').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        modal.on('shown.bs.modal', function (e) {
                            modal.find('#imprest_contras_list').each(function () {
                                var table = $(this);
                                var imprest_voucher_id = table.attr('imprest_voucher_id');
                                if (table.attr('initialized') != 'true') {
                                    table.DataTable({
                                        "processing": true,
                                        "serverSide": true,
                                        "ajax": {
                                            url: base_url + "finance/imprest_contras_list/" + imprest_voucher_id,
                                            type: 'POST'
                                        },
                                        "columns": [
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": true },
                                            { "orderable": false }
                                        ],
                                        "language": {
                                            "zeroRecords": "<div class='alert alert-info'>No matching contra for this imprest found</div>",
                                            "emptyTable": "<div class='alert alert-info'>No contra for this imprest found</div>"
                                        }, "drawCallback": function () {

                                            $('.imprest_contra_form').each(function () {
                                                var modal = $(this);
                                                if (modal.attr('initialized') != 'true') {
                                                    modal.on('show.bs.modal', function () {
                                                        modal.find('select[name="currency_id"]').each(function () {
                                                            var currency_selector = $(this);
                                                            var contra_date = modal.find('input[name="contra_date"]').val();
                                                            load_exchange_rate(currency_selector, modal, contra_date);
                                                        });

                                                        modal.find('select[name="currency_id"]').change(function () {
                                                            var currency_selector = $(this);
                                                            var contra_date = modal.find('input[name="contra_date"]').val();
                                                            load_exchange_rate(currency_selector, modal, contra_date);
                                                        });

                                                    });

                                                    modal.find('.save_imprest_contra').each(function () {
                                                        var button = $(this);
                                                        if (button.attr('active') != 'true') {
                                                            button.click(function () {
                                                                var contra_date = modal.find('input[name="contra_date"]').val();
                                                                var amount = modal.find('input[name="amount"]').unmask();
                                                                var credit_account_id = modal.find('select[name="credit_account_id"]').val();
                                                                var imprest_voucher_id = modal.find('input[name="imprest_voucher_id"]').val();
                                                                var debit_account_id = modal.find('select[name="debit_account_id"]').val();
                                                                var contra_id = modal.find('input[name="contra_id"]').val();
                                                                var reference = modal.find('input[name="reference"]').val();
                                                                var remarks = modal.find('textarea[name="remarks"]').val();
                                                                var currency_id = modal.find('select[name="currency_id"]').val();
                                                                var exchange_rate = modal.find('input[name="exchange_rate"]').val();

                                                                if (contra_date != '' && debit_account_id != '' && amount != '' && reference != '') {
                                                                    modal.modal('hide');

                                                                    $.post(
                                                                        base_url + "finance/save_contra/",
                                                                        {
                                                                            contra_date: contra_date,
                                                                            reference: reference,
                                                                            contra_type: 'from_imprest',
                                                                            contra_id: contra_id,
                                                                            exchange_rate: exchange_rate,
                                                                            currency_id: currency_id,
                                                                            credit_account_id: credit_account_id,
                                                                            imprest_voucher_id: imprest_voucher_id,
                                                                            debit_account_id: debit_account_id,
                                                                            amount: amount,
                                                                            remarks: remarks
                                                                        }, function () {
                                                                            modal.find('select[name="debit_account_id"]').select2('val', '');
                                                                            modal.find('input[name="amount"]').val('');
                                                                            button.closest('.box').find('#imprest_contras_list').DataTable().draw('page');
                                                                            stop_spinner();
                                                                        }
                                                                    );
                                                                } else {
                                                                    display_form_fields_error();
                                                                }
                                                            });
                                                            button.attr('active', 'true');
                                                        }
                                                    });

                                                    modal.attr('initialized', 'true');
                                                }
                                            });

                                            $('.delete_imprest_contra').each(function () {
                                                var button = $(this);
                                                if (button.attr('active') != 'true') {
                                                    button.click(function () {
                                                        $.confirm({
                                                            title: 'Delete Contra.',
                                                            content: 'This action is irreversible! Are you sure?',
                                                            buttons: {
                                                                confirm: {
                                                                    text: 'Confirm Delete',
                                                                    btnClass: 'btn btn-danger',
                                                                    action: function () {
                                                                        start_spinner();
                                                                        $.post(
                                                                            base_url + "finance/delete_imprest_contra",
                                                                            {
                                                                                contra_id: button.attr('contra_id')
                                                                            }, function () {
                                                                                table.DataTable().draw('page');
                                                                            }
                                                                        ).complete(function () {
                                                                            stop_spinner();
                                                                        });
                                                                    }
                                                                },
                                                                cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                                                            }
                                                        });

                                                    });
                                                    button.attr('active', 'true');
                                                }
                                            });

                                            initialize_common_js();
                                        }
                                    });
                                    table.attr('initialized', 'true');
                                }
                            });
                        });
                        modal.attr('initialized', 'true');
                    }
                });

                $('.imprest_retirement_form').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        modal.on('shown.bs.modal', function (e) {
                            var table = modal.find('table');

                            modal.find('tbody tr').each(function () {
                                initialize_form_amount_calculator($(this));

                                $(this).find('.row_remover').click(function () {
                                    var table = $(this).closest('table');
                                    $(this).closest('tr').remove();
                                    calculate_table_total_amount(table)
                                });
                            });

                            modal.delegate(' input[name="rate"],  input[name="quantity"]', 'change keyup', function () {
                                calculate_table_total_amount(table);
                            });

                            modal.find('.material_row_adder').each(function () {
                                if ($(this).attr('initialized') != 'true') {
                                    $(this).click(function () {
                                        var tbody = $(this).closest('.row').find('tbody');
                                        var new_row = tbody.closest('table').find('.material_row_template').clone().removeAttr('style')
                                            .removeClass('material_row_template').addClass('artificial_row').appendTo(tbody);

                                        new_row.find('.number_format').priceFormat();

                                        initialize_form_amount_calculator(new_row, 2);

                                        new_row.delegate(' input[name="rate"],  input[name="quantity"]', 'change keyup', function () {
                                            calculate_table_total_amount(new_row);
                                        });

                                        new_row.find('select[name="item_id"]').change(function () {
                                            var material_selector = $(this);
                                            load_material_unit(material_selector, new_row)
                                        });

                                        new_row.find('select').select2({ width: "100%" });

                                        new_row.find('.row_remover').click(function () {
                                            var table = $(this).closest('table');
                                            $(this).closest('tr').remove();
                                            calculate_table_total_amount(table)
                                        });
                                        initialize_common_js();
                                    });
                                    $(this).attr('initialized', 'true');
                                }
                            });

                            modal.find('.cash_row_adder').each(function () {
                                if ($(this).attr('initialized') != 'true') {
                                    $(this).click(function () {
                                        var tbody = $(this).closest('.row').find('tbody');
                                        var new_row = tbody.closest('table').find('.cash_row_template').clone().removeAttr('style')
                                            .removeClass('cash_row_template').addClass('artificial_row').appendTo(tbody);

                                        new_row.find('.number_format').priceFormat();

                                        initialize_form_amount_calculator(new_row, 2);

                                        new_row.delegate(' input[name="rate"],  input[name="quantity"]', 'change keyup', function () {
                                            calculate_table_total_amount(new_row);
                                        });

                                        new_row.find('.row_remover').click(function () {
                                            var table = $(this).closest('table');
                                            $(this).closest('tr').remove();
                                            calculate_table_total_amount(table)
                                        });
                                        initialize_common_js();
                                    });
                                    $(this).attr('initialized', 'true');
                                }
                            });

                            modal.find('.asset_row_adder').each(function () {
                                if ($(this).attr('initialized') != 'true') {
                                    $(this).click(function () {
                                        var tbody = $(this).closest('.row').find('tbody');
                                        var new_row = tbody.closest('table').find('.asset_row_template').clone().removeAttr('style')
                                            .removeClass('asset_row_template').addClass('artificial_row').appendTo(tbody);

                                        new_row.find('.number_format').priceFormat();

                                        initialize_form_amount_calculator(new_row, 2);

                                        new_row.delegate(' input[name="rate"],  input[name="quantity"]', 'change keyup', function () {
                                            calculate_table_total_amount(new_row);
                                        });

                                        new_row.find('select').select2({ width: "100%" });

                                        new_row.find('.row_remover').click(function () {
                                            var table = $(this).closest('table');
                                            $(this).closest('tr').remove();
                                            calculate_table_total_amount(table)
                                        });
                                        initialize_common_js();
                                    });
                                    $(this).attr('initialized', 'true');
                                }
                            });

                            modal.find('.service_row_adder').each(function () {
                                if ($(this).attr('initialized') != 'true') {
                                    $(this).click(function () {
                                        var tbody = $(this).closest('.row').find('tbody');
                                        var new_row = tbody.closest('table').find('.service_row_template').clone().removeAttr('style')
                                            .removeClass('service_row_template').addClass('artificial_row').appendTo(tbody);

                                        new_row.find('.number_format').priceFormat();

                                        initialize_form_amount_calculator(new_row, 2);

                                        new_row.delegate(' input[name="rate"],  input[name="quantity"]', 'change keyup', function () {
                                            calculate_table_total_amount(new_row);
                                        });

                                        new_row.find('.row_remover').click(function () {
                                            var table = $(this).closest('table');
                                            $(this).closest('tr').remove();
                                            calculate_table_total_amount(table)
                                        });
                                        initialize_common_js();
                                    });
                                    $(this).attr('initialized', 'true');
                                }
                            });

                            modal.find('select[name="location_id"]').change(function () {
                                var location_id = $(this).val();
                                var sub_locations_display = modal.find('.sub_locations_display');
                                $.post(
                                    base_url + "inventory/load_sub_location_options",
                                    {
                                        location_id: location_id
                                    }, function (data) {
                                        sub_locations_display.html(data.sub_location_options);
                                    },
                                    'json'
                                ).complete();
                            });

                            modal.find('.save_imprest_voucher_retirement').each(function () {
                                var button = $(this);
                                if (button.attr('initilized') != 'true') {
                                    button.click(function () {
                                        var imprest_voucher_id = modal.find('input[name="imprest_voucher_id"]').val();
                                        var retirement_date = modal.find('input[name="retirement_date"]').val();
                                        var location_id = modal.find('select[name="location_id"]').val();
                                        var sub_location_id = modal.find('select[name="sub_location_id"]').val();
                                        var remarks = modal.find('textarea[name="remarks"]').val();
                                        var item_types = Array(),
                                            cash_descriptions = Array(),
                                            imprest_voucher_cash_item_ids = Array(),
                                            service_descriptions = Array(),
                                            imprest_voucher_service_item_ids = Array(),
                                            item_ids = Array(),
                                            asset_item_ids = Array(),
                                            quantities = Array(),
                                            rates = Array(), i = 0, material_items_counter = 0, asset_items_counter = 0;

                                        var tbody = modal.find('tbody');
                                        tbody.find('input[name="item_type"]').each(function () {
                                            var row = $(this).closest('tr');
                                            var item_type = $(this).val();
                                            var added_item = row.find('input[name="added_item"]').val();
                                            if (item_type == 'material') {
                                                item_ids[i] = added_item == '' ? row.find('input[name="item_id"]').val() : row.find('select[name="item_id"]').val();
                                                material_items_counter++;
                                            } else if (item_type == 'asset') {
                                                asset_item_ids[i] = added_item == '' ? row.find('input[name="asset_item_id"]').val() : row.find('select[name="asset_item_id"]').val();
                                                asset_items_counter++;
                                            } else if (item_type == 'service') {
                                                service_descriptions[i] = row.find('input[name="service_description"]').val();
                                                imprest_voucher_service_item_ids[i] = row.find('input[name="imprest_voucher_service_item_id"]').val();
                                            } else {
                                                cash_descriptions[i] = row.find('input[name="cash_description"]').val();
                                                imprest_voucher_cash_item_ids[i] = row.find('input[name="imprest_voucher_cash_item_id"]').val();
                                            }

                                            item_types[i] = item_type;
                                            quantities[i] = row.find('input[name="quantity"]').val();
                                            rates[i] = row.find('input[name="rate"]').unmask();

                                            i++;
                                        });

                                        if (retirement_date != '' && location_id != '' && sub_location_id != '') {
                                            start_spinner();
                                            modal.modal('hide');
                                            $.post(
                                                base_url + "finance/save_imprest_voucher_retirement",
                                                {
                                                    imprest_voucher_service_item_ids: imprest_voucher_service_item_ids,
                                                    imprest_voucher_cash_item_ids: imprest_voucher_cash_item_ids,
                                                    retirement_date: retirement_date,
                                                    imprest_voucher_id: imprest_voucher_id,
                                                    cash_descriptions: cash_descriptions,
                                                    service_descriptions: service_descriptions,
                                                    rates: rates,
                                                    location_id: location_id,
                                                    sub_location_id: sub_location_id,
                                                    quantities: quantities,
                                                    item_types: item_types,
                                                    material_items_counter: material_items_counter,
                                                    asset_items_counter: asset_items_counter,
                                                    item_ids: item_ids,
                                                    asset_item_ids: asset_item_ids,
                                                    remarks: remarks
                                                }, function (data) {
                                                    $('#imprests_list').DataTable().draw('page');
                                                    stop_spinner();
                                                }
                                            );
                                        } else {
                                            display_form_fields_error();
                                        }

                                    });
                                    button.attr('initilized', 'true');
                                }
                            });
                        });
                        modal.attr('initialized', 'true');
                    }
                });

                initialize_common_js();
            }
        });
        table.attr('initialized', 'true')
    }
});

/**************************************************************
 * APPROVAL SETTINGS
 **************************************************************/

$('.chain_levels_table').each(function () {
    var approval_module_id = $(this).attr('approval_module_id');
    var table = $(this);
    var panel_body = table.closest('.panel-body');
    var after_level_field = panel_body.find('select[name="after_level"]');
    var load_table_content = function () {
        start_spinner();
        $.post(
            base_url + "administrative_actions/load_approval_chain_levels",
            {
                approval_module_id: approval_module_id
            }, function (data) {
                table.html(data.table);
                after_level_field.html(data.chain_levels_options);
                after_level_field.trigger('change');
                panel_body.find('.save_approval_chain').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {

                            var panel_body = button.closest('.next_form');
                            var approval_module_id = panel_body.find("input[name='approval_module_id']").val();
                            var label = panel_body.find("select[name='approval_label']").val();
                            var level_name = panel_body.find("input[name='level_name']").val();
                            var is_special_level = panel_body.find("input[name='is_special_level']").is(':checked');
                            var after_level = panel_body.find("select[name='after_level']").val();
                            var change_source = panel_body.find("select[name='change_source']").val();


                            if (level_name != '' && label != '') {
                                start_spinner();
                                $.post(
                                    base_url + "Administrative_actions/save_approval_settings",
                                    {
                                        approval_module_id: approval_module_id,
                                        label: label,
                                        after_level: after_level,
                                        is_special_level: is_special_level,
                                        level_name: level_name,
                                        change_source: change_source,

                                    }, function (data) {
                                        load_table_content();
                                        stop_spinner();
                                        initialize_common_js();

                                    }
                                );
                            } else {

                                toast('warning', 'Job Position and Label Must be filled ');
                            }
                        });
                        button.attr('initialized', 'true');
                    }
                });

                panel_body.find('.delete_chain_level').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            if (confirm('Are you sure?')) {
                                start_spinner();
                                $.post(
                                    base_url + "Administrative_actions/delete_chain_level",
                                    {
                                        approval_chain_level_id: button.attr('approval_chain_level_id')

                                    }, function () {
                                        load_table_content();
                                    }
                                ).complete(function () {
                                    stop_spinner();
                                    initialize_common_js();
                                });
                            }
                        });
                        button.attr('initialized', 'true');
                    }
                });

                //disable_chain_level
                panel_body.find('.disable_chain_level').each(function () {
                    var button = $(this);
                    if (button.attr('active') != 'true') {
                        button.click(function () {
                            if (confirm('Are you sure?')) {
                                start_spinner();
                                $.post(
                                    base_url + "Administrative_actions/disable_chain_level",
                                    {
                                        approval_chain_level_id: button.attr('approval_chain_level_id')

                                    }, function (data) {
                                        load_table_content();
                                    }
                                ).complete(function () {
                                    stop_spinner();
                                });
                            }
                        });
                        button.attr('active', 'true');
                    }
                });

                //enable_chain_level
                panel_body.find('.enable_chain_level').each(function () {
                    var button = $(this);
                    if (button.attr('active') != 'true') {
                        button.click(function () {
                            if (confirm('Are you sure?')) {
                                start_spinner();
                                $.post(
                                    base_url + "Administrative_actions/enable_chain_level",
                                    {
                                        approval_chain_level_id: button.attr('approval_chain_level_id')

                                    }, function (data) {
                                        load_table_content();
                                    }
                                ).complete(function () {
                                    stop_spinner();
                                    initialize_common_js();
                                });
                            }
                        });
                        button.attr('active', 'true');
                    }
                });
                stop_spinner();
            },
            'json'
        ).complete();
    };

    load_table_content();
});

/****************
 * SUB-CONTRACTORS
 *****************/

$('#contractors_list').DataTable({
    colReorder: true,
    "processing": true,
    "serverSide": true,
    "ajax": {
        url: base_url + "contractors/contractors_list/",
        type: 'POST'
    },
    "columns": [
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": true },
        { "orderable": true }
    ],
    "language": {
        "zeroRecords": "<div class='alert alert-info'>No matching sub-contractors found</div>",
        "emptyTable": "<div class='alert alert-info'>No sub-contractors found</div>"
    }
});

$('a[href="#project_sub_contracts"]').on('shown.bs.tab', function (e) {
    $('#project_sub_contracts').find('#sub_contracts_list_table').each(function () {
        if ($(this).attr('dataTable_initialized') != 'true') {

            var project_id = $(this).attr('project_id');
            $(this).DataTable({
                colReorder: true,
                "processing": true,
                "serverSide": true,
                "ajax": {
                    url: base_url + "projects/sub_contracts_list/" + project_id,
                    type: 'POST'
                },
                "columns": [
                    { "orderable": true },
                    { "orderable": true },
                    { "orderable": true },
                    // {"orderable": true},
                    { "orderable": false }
                ],
                "language": {
                    "zeroRecords": "<div class='alert alert-info'>No matching sub-contracts found</div>",
                    "emptyTable": "<div class='alert alert-info'>No sub-contracts found</div>"

                },
                "drawCallback": function () {

                    var load_sub_contract_tasks = function (sub_contract_id, row) {
                        $.ajax({
                            url: base_url + 'stakeholders/sub_contract_tasks/' + sub_contract_id,
                            type: 'GET',
                            beforeSend() {
                                start_spinner();
                            },
                            success: function (data) {
                                row.find('select[name="certified_task_id"]').html(data);
                                stop_spinner();
                            }
                        });
                    }

                    $('.sub_contract_profile').on('show.bs.modal', function () {
                        let modal = $(this);
                        modal.find('.cert_tasks_table tbody tr').each(function () {
                            var row = $(this);
                            load_sub_contract_tasks(modal.attr('sub_contract_id'), row);
                            row.on('change keyup', 'input[name="amount"]', function () {
                                calculate_table_total_amount(row.closest('table'));
                            });
                        });

                        function initialize_remove_button(button) {
                            button.click(function () {
                                $(this).closest('tr').remove();
                                calculate_table_total_amount(button.closest('table'));
                            });
                        }

                        initialize_remove_button(modal.find('.row_remover'));

                        modal.find('.cert_tasks_table .row_adder').off('click').on('click', function () {
                            var tbody = modal.find('.cert_tasks_table tbody');
                            var new_row = modal.find('.row_template').clone();
                            new_row.removeAttr('style').removeClass('row_template').addClass('artificial_row').appendTo(tbody);
                            new_row.find('select').select2();
                            new_row.on('change keyup', 'input[name="amount"]', function () {
                                calculate_table_total_amount(new_row.closest('table'));
                            });
                            load_sub_contract_tasks(modal.attr('sub_contract_id'), new_row);
                            initialize_remove_button(new_row.find('.row_remover'));
                            initialize_common_js();
                        });
                    });

                    $('.sub_contract_contents_area').each(function () {
                        var table = $(this);
                        var sub_contract_id = table.attr('sub_contract_id');
                        if (table.attr('initialized') != 'true') {
                            $(this).DataTable({
                                colReorder: true,
                                "processing": true,
                                "serverSide": true,
                                "ajax": {
                                    url: base_url + "stakeholders/sub_contracts_list_table/" + sub_contract_id,
                                    type: 'POST'
                                },
                                "columns": [
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": false }
                                ],
                                "language": {
                                    "zeroRecords": "<div class='alert alert-info'>No matching sub-contracts found</div>",
                                    "emptyTable": "<div class='alert alert-info'>No sub-contracts found</div>"

                                },
                                "drawCallback": function (settings) {
                                    table.find('.total_sub_contract_amount_display').text(settings.json.sub_contract_total).priceFormat();

                                    $('.save_sub_contract_item').each(function () {

                                        var button = $(this);
                                        if (button.attr('active') != 'true') {

                                            button.click(function () {

                                                var modal = button.closest('.modal');

                                                var sub_contract_id = modal.find('input[name="sub_contract_id"]').val();
                                                var task_id = modal.find('select[name="task_id"]').val();
                                                var start_date = modal.find('input[name="start_date"]').val();
                                                var end_date = modal.find('input[name="end_date"]').val();
                                                var contract_sum = modal.find('input[name="contract_sum"]').unmask();
                                                var description = modal.find('input[name="description"]').val();
                                                var vat_inclusive = modal.find('input[name="vat_inclusive"]').is(':checked') ? 1 : 0;

                                                if (sub_contract_id != '' && start_date != '') {
                                                    start_spinner();
                                                    $.post(
                                                        base_url + "projects/save_sub_contract_item/",
                                                        {
                                                            sub_contract_id: sub_contract_id,
                                                            task_id: task_id,
                                                            start_date: start_date,
                                                            end_date: end_date,
                                                            contract_sum: contract_sum,
                                                            vat_inclusive: vat_inclusive,
                                                            description: description
                                                        }, function (data) {
                                                            stop_spinner();
                                                            // load_project_sub_contract_items();
                                                            initialize_common_js();
                                                            modal.find('form')[0].reset();
                                                            $('.sub_contract_contents_area').DataTable().draw('page');
                                                        }
                                                    )
                                                } else {
                                                    toast('error', 'Please make sure all fields are correctly filled');
                                                }
                                            });
                                            button.attr('active', 'true');
                                        }
                                    });

                                    $('.delete_sub_contract_item').each(function () {
                                        var button = $(this);
                                        if (button.attr('active') != 'true') {
                                            button.click(function () {

                                                $.confirm({
                                                    title: 'Delete Sub Contract Item.',
                                                    content: 'This action is irreversible! Are you sure?',
                                                    buttons: {
                                                        confirm: {
                                                            text: 'Confirm Delete',
                                                            btnClass: 'btn btn-danger',
                                                            action: function () {
                                                                start_spinner();
                                                                $.post(
                                                                    base_url + "projects/delete_sub_contract_item",
                                                                    {
                                                                        sub_contract_item_id: button.attr('sub_contract_item_id')
                                                                    }, function () {
                                                                        button.closest('tr').remove();
                                                                        $('.sub_contract_contents_area').DataTable().draw('page');
                                                                    }
                                                                ).complete(function () {
                                                                    stop_spinner();
                                                                });
                                                            }
                                                        },
                                                        cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                                                    }
                                                });

                                            });
                                            button.attr('active', 'true');
                                        }
                                    });

                                    initialize_common_js();

                                }
                            });
                            table.attr('initialized', 'true');
                        }
                        else {
                            table.DataTable().draw('page')
                        }
                    });


                    $('.certificates_contents_area').each(function () {
                        var table = $(this);

                        var sub_contract_id = table.attr('sub_contract_id');
                        if (table.attr('initialized') != 'true') {
                            table.DataTable({
                                colReorder: true,
                                "processing": true,
                                "serverSide": true,
                                "ajax": {
                                    url: base_url + "stakeholders/sub_contracts_certificate_list_table/" + sub_contract_id,
                                    type: 'POST'
                                },
                                "columns": [
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": true },
                                    { "orderable": false }
                                ],
                                "language": {
                                    "zeroRecords": "<div class='alert alert-info'>No matching sub-contract certificates found</div>",
                                    "emptyTable": "<div class='alert alert-info'>No sub-contracts certificates found</div>"

                                },
                                "drawCallback": function (settings) {
                                    table.find('.total_certified_amount_display').text(settings.json.certified_amount).priceFormat();

                                    $('.save_sub_contract_certificate').each(function () {

                                        var button = $(this);
                                        if (button.attr('active') != 'true') {

                                            button.click(function () {
                                                var modal = button.closest('.modal');
                                                var sub_contract_id = modal.find('input[name="sub_contract_id"]').val();
                                                var certificate_number = modal.find('input[name="certificate_number"]').val();
                                                var certificate_date = modal.find('input[name="certificate_date"]').val();
                                                var vat_inclusive = modal.find('input[name="vat_inclusive"]').is(':checked') ? 1 : 0;
                                                var remarks = modal.find('textarea[name="remarks"]').val();

                                                var certified_task_ids = new Array(), certified_amounts = new Array(), i = 0;
                                                modal.find('.cert_tasks_table tbody tr').each(function () {
                                                    var row = $(this);
                                                    certified_task_ids[i] = row.find('select[name="certified_task_id"]').val();
                                                    certified_amounts[i] = row.find('input[name="amount"]').unmask();
                                                    i++;
                                                });

                                                if (sub_contract_id != '' && certificate_number != '' && (certified_task_ids.length > 0 && certified_amounts.length > 0)) {
                                                    start_spinner();
                                                    $.post(
                                                        base_url + "stakeholders/save_sub_contract_certificate/",
                                                        {
                                                            sub_contract_id: sub_contract_id,
                                                            certificate_number: certificate_number,
                                                            certificate_date: certificate_date,
                                                            certified_task_ids: certified_task_ids,
                                                            certified_amounts: certified_amounts,
                                                            vat_inclusive: vat_inclusive,
                                                            remarks: remarks
                                                        }, function (data) {
                                                            stop_spinner();
                                                            modal.find('#certifcate_form')[0].reset();
                                                            initialize_common_js();
                                                            calculate_table_total_amount(modal.find('#certifcate_form').find('table'));
                                                            modal.find('.cert_tasks_table tbody').each(function () {
                                                                $(this).find('.artificial_row').remove();
                                                            });
                                                            $('.certificates_contents_area').DataTable().draw('page');
                                                        }
                                                    )
                                                } else {
                                                    toast('error', 'Please make sure all fields are correctly filled');
                                                }
                                            });
                                            button.attr('active', 'true');
                                        }
                                    });

                                    $('.delete_sub_contract_certificate').each(function () {
                                        var button = $(this);
                                        if (button.attr('active') != 'true') {
                                            button.click(function () {

                                                $.confirm({
                                                    title: 'Delete Sub Contract Certificate.',
                                                    content: 'This action is irreversible! Are you sure?',
                                                    buttons: {
                                                        confirm: {
                                                            text: 'Confirm Delete',
                                                            btnClass: 'btn btn-danger',
                                                            action: function () {
                                                                start_spinner();
                                                                $.post(
                                                                    base_url + "stakeholders/delete_sub_contract_certificate",
                                                                    {
                                                                        sub_contract_certificate_id: button.attr('sub_contract_certificate_id')
                                                                    }, function () {
                                                                        button.closest('tr').remove()
                                                                        $('.certificates_contents_area').DataTable().draw('page');
                                                                    }
                                                                ).complete(function () {
                                                                    stop_spinner();
                                                                });
                                                            }
                                                        },
                                                        cancel: { text: "Cancel", btnClass: 'btn btn-default' }
                                                    }
                                                });

                                            });
                                            button.attr('active', 'true');
                                        }
                                    });

                                    initialize_common_js();

                                }
                            });
                            table.attr('initialized', 'true');
                        }
                        else {
                            table.DataTable().draw('page')
                        }
                    });

                    //Save Sub_contracts
                    $('.save_project_sub_contract').off('click').on('click', function () {

                        var button = $(this);
                        var modal = button.closest('.modal');

                        var project_id = modal.find("input[name='project_id']").val();
                        var sub_contract_id = modal.find("input[name='sub_contract_id']").val();
                        var contractor_id = modal.find("select[name='contractor_id']").val();
                        var contract_name = modal.find("input[name='contract_name']").val();
                        var contract_date = modal.find("input[name='contract_date']").val();
                        var description = modal.find("textarea[name='description']").val();

                        if (contract_date.trim() != '') {
                            start_spinner();
                            modal.modal('hide');
                            $.post(
                                base_url + "projects/save_project_sub_contract",
                                {
                                    project_id: project_id,
                                    sub_contract_id: sub_contract_id,
                                    contractor_id: contractor_id,
                                    contract_name: contract_name,
                                    contract_date: contract_date,
                                    description: description

                                }, function () {
                                    stop_spinner();
                                    modal.find('form')[0].reset();
                                    $('#sub_contracts_list_table').DataTable().draw('page');
                                    toast('success', 'Contract Added successful ');
                                }
                            );
                        } else {
                            toast('warning', 'Contract Date Name Must be filled ');
                        }

                        button.attr('initialized', 'true');

                    });

                    $('.delete_project_sub_contract').each(function () {
                        var button = $(this);
                        if (button.attr('active') != 'true') {
                            button.click(function () {

                                var sub_contract_id = $(this).attr('sub_contract_id');

                                if (confirm('Are you sure?')) {
                                    start_spinner();
                                    $.post(
                                        base_url + "projects/delete_project_sub_contract",
                                        {
                                            sub_contract_id: sub_contract_id

                                        }, function (data) {
                                            $('#sub_contracts_list_table').DataTable().draw('page');
                                        }
                                    ).complete(function () {
                                        stop_spinner();
                                    });
                                }
                            });
                            button.attr('active', 'true');
                        }
                    });

                    $(this).find('tr').each(function () {
                        $(this).find('td:last-child').attr('nowrap', 'nowrap');
                    });

                    initialize_common_js();
                }
            });
            $(this).attr('dataTable_initialized', 'true');
        } else {
            $(this).DataTable().draw('page');
        }
    });
});

/**
 * REPORTS
 */

$('#generate_cash_flow_report').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();
    var project_ids = form.find('.project_ids').val();

    if (from != '' && to != '') {
        start_spinner();
        $.post(
            base_url + "reports/cash_flow",
            {
                project_ids: project_ids,
                from: from,
                to: to
            }, function (data) {
                box.find('#report_container').html(data.table_view);
                initialize_common_js();
                stop_spinner();
            }, 'json'
        );

    } else {
        toast('error', 'Please Make sure all parameters are filled correctly');
    }
});

$('a[href="#project_reports"]').on('shown.bs.tab', function (e) {
    let form = $("#project_reports_form");
    form.on(
        "change",
        'select[name="report_type"]',
        function () {
            let report_type = $(this).val();
            let sub_location_ids_selector = form.find('select[name="sub_location_ids[]"]');
            let sub_location_ids_selector_form_group = sub_location_ids_selector.closest(".form-group");
            if (report_type == "fuel_consumption") {
                sub_location_ids_selector_form_group.show();
            } else {
                sub_location_ids_selector_form_group.hide();
            }
        }
    );
    $('#generate_project_report').off('click').on('click', function () {
        var box = $(this).closest('.box');
        var form = $(this).closest('form');
        var from = form.find('input[name="from"]').val();
        var to = form.find('input[name="to"]').val();
        var project_id = form.find('input[name="project_id"]').val();
        var report_type = form.find('select[name="report_type"]').val();
        start_spinner();
        if (report_type == 'cash_flow') {

            $.post(
                base_url + "projects/project_cash_flow",
                {
                    project_id: project_id,
                    from: from,
                    to: to
                }, function (data) {
                    Highcharts.setOptions({
                        lang: {
                            decimalPoint: '.',
                            thousandsSep: ', '
                        }
                    });

                    Highcharts.chart('project_report_container', {
                        chart: {
                            type: 'spline'
                        },
                        title: {
                            text: 'Cash Flow Projection'
                        },
                        subtitle: {
                            text: 'Source:'
                        },
                        xAxis: {
                            categories: data.x_values
                        },
                        yAxis: {
                            title: {
                                text: 'Activities'
                            },
                            labels: {
                                formatter: function () {
                                    return this.value + '';
                                }
                            }
                        },
                        tooltip: {
                            crosshairs: true,
                            shared: true
                        },
                        plotOptions: {
                            spline: {
                                marker: {
                                    radius: 4,
                                    lineColor: '#666666',
                                    lineWidth: 1
                                }
                            }
                        },
                        series: [{
                            name: 'Costs',
                            marker: {
                                symbol: 'circle'
                            },
                            data: data.costs
                        }]
                    });
                    stop_spinner();
                },

                'json'
            )

        } else if (report_type == 'projects_inventory_position') {

            if (from != '' && to != '') {
                start_spinner();
                $.post(
                    base_url + "reports/project_inventory_position",
                    {
                        project_id: project_id,
                        from: from,
                        to: to
                    }, function (data) {
                        box.find('#project_report_container').html(data.table_view);
                        stop_spinner();

                        Highcharts.setOptions({
                            lang: {
                                decimalPoint: '.',
                                thousandsSep: ', '
                            }
                        });

                        $('#chart_container').highcharts({
                            exporting: {
                                chartOptions: { // specific options for the exported image
                                    plotOptions: {
                                        series: {
                                            dataLabels: {
                                                enabled: true
                                            }
                                        }
                                    }
                                },
                                fallbackToExportServer: false
                            },
                            chart: {
                                type: 'column'
                            },
                            title: {
                                text: data.project_name
                            },
                            subtitle: {
                                text: data.report_category + ' FROM ' + data.from + ' TO ' + data.to
                            },
                            xAxis: {
                                type: 'category'
                            },
                            yAxis: {
                                title: {
                                    text: 'Amount'
                                }

                            },
                            legend: {
                                enabled: false
                            },
                            plotOptions: {
                                series: {
                                    borderWidth: 0,
                                    dataLabels: {
                                        enabled: true,
                                        format: '{point.y:,.1f}'
                                    }
                                }
                            },

                            tooltip: {
                                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                                pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:,.2f}</b><br/>'
                            },

                            series: [{
                                name: 'General Summary',
                                colorByPoint: true,
                                data: [{
                                    name: 'Budgeted',
                                    y: parseFloat(data.goods_budget),
                                    drilldown: 'Budgeted'
                                }, {
                                    name: 'Approved Requests',
                                    y: parseFloat(data.total_approved_amount),
                                    drilldown: 'Goods Requested'
                                }, {
                                    name: 'Goods Ordered',
                                    y: parseFloat(data.order_amount),
                                    drilldown: 'Goods Ordered'
                                }, {
                                    name: 'Goods Received',
                                    y: parseFloat(data.ordered_received_value),
                                    drilldown: 'Goods Received'
                                }, {
                                    name: 'Site Goods Received',
                                    y: parseFloat(data.site_goods_received_value),
                                    drilldown: 'Site Goods Received'
                                }, {
                                    name: 'Material Used',
                                    y: parseFloat(data.material_used_value),
                                    drilldown: 'Material Used'
                                }, {
                                    name: 'Site Material Balance',
                                    y: parseFloat(data.site_material_balance_value),
                                    drilldown: null
                                }]
                            }],
                            drilldown: {
                                series: [{
                                    name: 'Budgeted',
                                    id: 'Budgeted',
                                    data: data.budget_activities
                                }, {
                                    name: 'Goods Requested',
                                    id: 'Goods Requested',
                                    data: data.requisitions
                                }, {
                                    name: 'Goods Ordered',
                                    id: 'Goods Ordered',
                                    data: [
                                        {
                                            name: 'Supplier Sourced',
                                            y: parseFloat(data.ordered_goods.supplier_sourced_amount),
                                            drilldown: 'Supplier Sourced Orders'
                                        }, {
                                            name: 'Store Sourced',
                                            y: parseFloat(data.ordered_goods.store_sourced_amount),
                                            drilldown: 'Store Sourced Orders'
                                        }
                                    ]
                                }, {
                                    name: 'Goods Received',
                                    id: 'Goods Received',
                                    data: [
                                        {
                                            name: 'Supplier Sourced',
                                            y: data.received_materials.supplier_sourced_amount,
                                            drilldown: 'Supplier Sourced GRNs'
                                        }, {
                                            name: 'Store Sourced',
                                            y: data.received_materials.store_sourced_amount,
                                            drilldown: 'Store Sourced Materials'
                                        }
                                    ]
                                }, {
                                    name: 'Site Goods Received',
                                    id: 'Site Goods Received',
                                    data: data.site_grns
                                }, {
                                    name: 'Material Used',
                                    id: 'Material Used',
                                    data: data.cost_activities
                                }, {
                                    name: 'Supplier Sourced Orders',
                                    id: 'Supplier Sourced Orders',
                                    data: data.ordered_goods.purchase_orders
                                }, {
                                    name: 'Store Sourced Orders',
                                    id: 'Store Sourced Orders',
                                    data: data.ordered_goods.transfer_orders
                                }, {
                                    name: 'Supplier Sourced GRNs',
                                    id: 'Supplier Sourced GRNs',
                                    data: data.received_materials.orders_grns
                                }, {
                                    name: 'Store Sourced Materials',
                                    id: 'Store Sourced Materials',
                                    data: data.received_materials.mcas
                                }]
                            }
                        });
                    }, 'json'
                );

            } else {
                toast('error', 'Please Make sure all parameters are filled correctly');
            }

        } else {
            $.post(
                base_url + "projects/reports",
                {
                    report_type: report_type,
                    project_id: form.find('input[name="project_id"]').val(),
                    from: form.find('input[name="from"]').val(),
                    to: form.find('input[name="to"]').val()

                }, function (data) {
                    $('#project_report_container').html(data);
                }
            ).complete(function () {
                stop_spinner();
            });
        }
    });
});

$('#generate_project_inventory_position_report').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();
    var project_id = form.find('select[name="project_id"]').val().trim();

    if (from != '' && to != '') {
        start_spinner();
        $.post(
            base_url + "reports/project_inventory_position",
            {
                project_id: project_id,
                from: from,
                to: to
            }, function (data) {
                box.find('#report_container').html(data.table_view);
                stop_spinner();

                Highcharts.setOptions({
                    lang: {
                        decimalPoint: '.',
                        thousandsSep: ', '
                    }
                });

                $('#chart_container').highcharts({
                    exporting: {
                        chartOptions: { // specific options for the exported image
                            plotOptions: {
                                series: {
                                    dataLabels: {
                                        enabled: true
                                    }
                                }
                            }
                        },
                        fallbackToExportServer: false
                    },
                    chart: {
                        type: 'column'
                    },
                    title: {
                        text: data.project_name
                    },
                    subtitle: {
                        text: data.report_category + ' FROM ' + data.from + ' TO ' + data.to
                    },
                    xAxis: {
                        type: 'category'
                    },
                    yAxis: {
                        title: {
                            text: 'Amount'
                        }

                    },
                    legend: {
                        enabled: false
                    },
                    plotOptions: {
                        series: {
                            borderWidth: 0,
                            dataLabels: {
                                enabled: true,
                                format: '{point.y:,.1f}'
                            }
                        }
                    },

                    tooltip: {
                        headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                        pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:,.2f}</b><br/>'
                    },

                    series: [{
                        name: 'General Summary',
                        colorByPoint: true,
                        data: [{
                            name: 'Budgeted',
                            y: parseFloat(data.goods_budget),
                            drilldown: 'Budgeted'
                        }, {
                            name: 'Approved Requests',
                            y: parseFloat(data.total_approved_amount),
                            drilldown: 'Goods Requested'
                        }, {
                            name: 'Goods Ordered',
                            y: parseFloat(data.order_amount),
                            drilldown: 'Goods Ordered'
                        }, {
                            name: 'Goods Received',
                            y: parseFloat(data.ordered_received_value),
                            drilldown: 'Goods Received'
                        }, {
                            name: 'Site Goods Received',
                            y: parseFloat(data.site_goods_received_value),
                            drilldown: 'Site Goods Received'
                        }, {
                            name: 'Material Used',
                            y: parseFloat(data.material_used_value),
                            drilldown: 'Material Used'
                        }, {
                            name: 'Site Material Balance',
                            y: parseFloat(data.site_material_balance_value),
                            drilldown: null
                        }]
                    }],
                    drilldown: {
                        series: [{
                            name: 'Budgeted',
                            id: 'Budgeted',
                            data: data.budget_activities
                        }, {
                            name: 'Goods Requested',
                            id: 'Goods Requested',
                            data: data.requisitions
                        }, {
                            name: 'Goods Ordered',
                            id: 'Goods Ordered',
                            data: [
                                {
                                    name: 'Supplier Sourced',
                                    y: parseFloat(data.ordered_goods.supplier_sourced_amount),
                                    drilldown: 'Supplier Sourced Orders'
                                }, {
                                    name: 'Store Sourced',
                                    y: parseFloat(data.ordered_goods.store_sourced_amount),
                                    drilldown: 'Store Sourced Orders'
                                }
                            ]
                        }, {
                            name: 'Goods Received',
                            id: 'Goods Received',
                            data: [
                                {
                                    name: 'Supplier Sourced',
                                    y: data.received_materials.supplier_sourced_amount,
                                    drilldown: 'Supplier Sourced GRNs'
                                }, {
                                    name: 'Store Sourced',
                                    y: data.received_materials.store_sourced_amount,
                                    drilldown: 'Store Sourced Materials'
                                }
                            ]
                        }, {
                            name: 'Site Goods Received',
                            id: 'Site Goods Received',
                            data: data.site_grns
                        }, {
                            name: 'Material Used',
                            id: 'Material Used',
                            data: data.cost_activities
                        }, {
                            name: 'Supplier Sourced Orders',
                            id: 'Supplier Sourced Orders',
                            data: data.ordered_goods.purchase_orders
                        }, {
                            name: 'Store Sourced Orders',
                            id: 'Store Sourced Orders',
                            data: data.ordered_goods.transfer_orders
                        }, {
                            name: 'Supplier Sourced GRNs',
                            id: 'Supplier Sourced GRNs',
                            data: data.received_materials.orders_grns
                        }, {
                            name: 'Store Sourced Materials',
                            id: 'Store Sourced Materials',
                            data: data.received_materials.mcas
                        }]
                    }
                });
            }, 'json'
        );

    } else {
        toast('error', 'Please Make sure all parameters are filled correctly');
    }
});

$('#generate_project_income_expenditure_report').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();
    var project_ids = form.find('.project_ids').val();

    if (from != '' && to != '') {
        start_spinner();
        $.post(
            base_url + "reports/project_income_expenditure_report",
            {
                project_ids: project_ids,
                from: from,
                to: to
            }, function (data) {
                box.find('#report_container').html(data.table_view);
                initialize_common_js();
                stop_spinner();
            }, 'json'
        );

    } else {
        toast('error', 'Please Make sure all parameters are filled correctly');
    }
});

$('#generate_project_requests_vs_payments_report').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();
    var project_id = form.find('select[name="project_id"]').val().trim();

    if (project_id != '') {
        start_spinner();
        $.post(
            base_url + "reports/requests_vs_payments",
            {
                project_id: project_id,
                from: from,
                to: to
            }, function (data) {
                box.find('#report_container').html(data.table_view);
                stop_spinner();
            }, 'json'
        );

    } else {
        toast('error', 'Please Make sure all parameters are filled correctly');
    }
});

$('#generate_project_inventory_movement_report').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var as_of = form.find('input[name="as_of"]').val();
    var project_id = form.find('select[name="project_id"]').val().trim();

    if (project_id != '') {
        start_spinner();
        $.post(
            base_url + "reports/project_inventory_movement",
            {
                project_id: project_id,
                to: as_of
            }, function (data) {
                box.find('#report_container').html(data);
                stop_spinner();
            }
        );
    } else {
        toast('error', 'Please Make sure all parameters are filled correctly');
    }
});

$('#generate_project_performance_report').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var project_id = form.find('select[name="project_id"]').val().trim();


    start_spinner();
    $.post(
        base_url + "reports/project_performance_report",
        {
            project_id: project_id,
            triggered: true
        }, function (data) {
            stop_spinner();

            Highcharts.setOptions({
                lang: {
                    decimalPoint: '.',
                    thousandsSep: ', '
                }
            });

            $('#chart_container').highcharts({
                exporting: {
                    chartOptions: { // specific options for the exported image
                        plotOptions: {
                            series: {
                                dataLabels: {
                                    enabled: true
                                }
                            }
                        }
                    },
                    fallbackToExportServer: false
                },
                chart: {
                    type: 'column'
                },
                title: {
                    text: data.project_name
                },
                subtitle: {
                    text: 'Project Performance Report'
                },
                xAxis: {
                    type: 'category'
                },
                yAxis: {
                    title: {
                        text: 'Amount'
                    }

                },
                legend: {
                    enabled: false
                },
                plotOptions: {
                    series: {
                        borderWidth: 0,
                        dataLabels: {
                            enabled: true,
                            format: '{point.y:,.1f}'
                        }
                    }
                },

                tooltip: {
                    headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                    pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:,.2f}</b><br/>'
                },

                series: [{
                    name: 'Summarized Report',
                    colorByPoint: true,
                    data: [{
                        name: 'Contract Sum',
                        y: parseFloat(data.contract_sum),
                        drilldown: 'contract_sum_drilldown'
                    }, {
                        name: 'Budgeted',
                        y: parseFloat(data.budget_amount),
                        drilldown: 'budget_drilldown'
                    }, {
                        name: 'Actual Cost',
                        y: parseFloat(data.actual_cost),
                        drilldown: 'actual_cost_drilldown'
                    }, {
                        name: 'Certified Amount',
                        y: parseFloat(data.certified_amount),
                        drilldown: 'certified_amount_drilldown'
                    }, {
                        name: 'Paid Amount',
                        y: parseFloat(data.paid_amount),
                        drilldown: 'paid_amount_drilldown'
                    }]
                }],
                drilldown: {
                    series: data.drilldown
                }

            });
        }, 'json'
    );
});

$('#generate_project_financial_status_report').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var as_of = form.find('input[name="as_of"]').val();
    var project_ids = form.find('.project_ids').val();

    if (as_of != '' && project_ids != '') {
        start_spinner();
        $.post(
            base_url + "reports/project_financial_status",
            {
                project_ids: project_ids,
                as_of: as_of
            }, function (data) {
                box.find('#report_container').html(data.table_view);
                stop_spinner();
            }, 'json'
        );

    } else {
        toast('error', 'Please Make sure all parameters are filled correctly');
    }
});

$('#generate_vendors_overall_ballance').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var as_of = form.find('input[name="as_of"]').val();

    if (as_of != '') {
        start_spinner();
        $.post(
            base_url + "reports/vendors_overall_balance",
            {
                as_of: as_of
            }, function (data) {
                box.find('#report_container').html(data.table_view);
                stop_spinner();
            }, 'json'
        );

    } else {
        toast('error', 'Please Make sure all parameters are filled correctly');
    }
});

$('#generate_vendors_supply_report').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();
    if (from != '' && to != '') {
        start_spinner();
        $.post(
            base_url + "reports/vendors_supply_report",
            {
                from: from,
                to: to
            }, function (data) {
                box.find('#report_container').html(data);
                stop_spinner();
            }
        );
    } else {
        display_form_fields_error()
    }
});

$('#generate_cost_center_payments_report').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var cost_center_id = form.find('select[name="cost_center_id"]').val();
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();
    if (cost_center_id != '' && (from != '' || to != '')) {
        start_spinner();
        $.post(
            base_url + "reports/cost_center_payments",
            {
                cost_center_id: cost_center_id,
                from: from,
                to: to
            }, function (data) {
                box.find('#report_container').html(data);
                stop_spinner();
            }
        );
    } else {
        display_form_fields_error()
    }
});

$('#generate_assets_availability_report').off('click').on('click', function () {
    var form = $(this).closest('form');
    var report_type = form.find('input[name="report_type"]').val();
    var asset_group_id = form.find('select[name="asset_group_id"]').val();
    var location_id = form.find('select[name="location_id"]').val();
    var asset_item_id = form.find('select[name="asset_item_id"]').val();
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();

    if (report_type != '' && from != '' && to != '') {
        start_spinner();
        $.post(
            base_url + "assets/reports",
            {
                report_type: report_type,
                location_id: location_id,
                asset_item_id: asset_item_id,
                asset_group_id: asset_group_id,
                from: from,
                to: to
            }, function (data) {
                $('#report_container').html(data);
            }
        ).complete(function () {
            stop_spinner();
        });
    } else {
        toast('error', 'Make sure the dates are filled correctly');
    }
});

$('#generate_procurement_report').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var report_type = form.find('select[name="report_type"]').val();
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();

    if (report_type != '' && from != '' && to != '') {
        start_spinner();
        $.post(
            base_url + "procurements/reports",
            {
                report_type: report_type,
                from: from,
                to: to
            }, function (data) {
                box.find('#report_container').html(data);
                stop_spinner();
            }
        );
    } else {
        display_form_fields_error()
    }
});

$('#generate_finance_inventory_report').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var report_type = form.find('select[name="report_type"]').val();
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();

    if (report_type != '' && from != '' && to != '') {
        start_spinner();
        $.post(
            base_url + "finance/reports",
            {
                report_type: report_type,
                from: from,
                to: to
            }, function (data) {
                box.find('#report_container').html(data);
                stop_spinner();
            }
        );
    } else {
        display_form_fields_error()
    }
});

$('#generate_journal').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();
    var currency_id = form.find('select[name="currency_id"]').val();
    if (currency_id != '') {
        start_spinner();
        $.post(
            base_url + "finance/journal",
            {
                currency_id: currency_id,
                from: from,
                to: to
            }, function (data) {
                box.find('#report_container').html(data);
                stop_spinner();
            }
        );
    } else {
        display_form_fields_error();
    }
});

$('#generate_services_report').click(function () {
    var box = $(this).closest('.box');
    var form = $(this).closest('form');
    var from = form.find('input[name="from"]').val();
    var to = form.find('input[name="to"]').val();
    var client_ids = form.find('.client_ids').val();

    if (from != '' && to != '') {
        start_spinner();
        $.post(
            base_url + "reports/services",
            {
                client_ids: client_ids,
                from: from,
                to: to,
                generate: true
            }, function (data) {
                box.find('#service_report_container').html(data.table_view);
                initialize_common_js();
                stop_spinner();
            }, 'json'
        );

    } else {
        toast('error', 'Please Make sure all parameters are filled correctly');
    }
});


/**************************************************************
 * ASSETS
 ***************************************************************/

$('#asset_items_lists').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "assets/asset_items_list",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching asset items found</div>",
                "emptyTable": "<div class='alert alert-info'>No asset items found</div>"
            }, "drawCallback": function () {

                $('.save_asset_item').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');
                            var asset_item_id = modal.find("input[name='asset_item_id']").val();
                            var asset_name = modal.find("input[name='asset_name']").val();
                            var part_number = modal.find("input[name='part_number']").val();
                            var description = modal.find("textarea[name='description']").val();
                            var asset_group_id = modal.find("select[name='asset_group_id']").val();

                            if (asset_name.trim() != '' && asset_group_id.trim() != '') {
                                start_spinner();
                                modal.modal('hide');
                                $.post(
                                    base_url + "assets/save_asset_item",
                                    {
                                        asset_name: asset_name,
                                        asset_item_id: asset_item_id,
                                        asset_group_id: asset_group_id,
                                        part_number: part_number,
                                        description: description
                                    }, function (data) {
                                        toast('success', 'Successfully Saved');
                                        modal.find('form')[0].reset();
                                        stop_spinner();
                                        $('#asset_items_lists').DataTable().draw('page');
                                    }
                                );
                            } else {
                                display_form_fields_error();
                            }
                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.multiple_asset_form').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        function initialize_remove_button(button) {
                            button.click(function () {

                                $(this).closest('tr').remove();
                            });
                        }

                        initialize_remove_button(modal.find('.row_remover'));

                        modal.find('.row_adder').click(function () {
                            var tbody = modal.find('tbody');
                            var new_row = modal.find('.row_template').clone();
                            new_row.removeAttr('style').removeClass('row_template').addClass('artificial_row').appendTo(tbody);
                            new_row.find('select').select2();
                            initialize_remove_button(new_row.find('.row_remover'));
                            initialize_common_js();
                        });
                        modal.find('.save_multiple_asset').click(function () {
                            var asset_names = new Array();
                            var part_numbers = new Array();
                            var asset_group_ids = new Array();
                            var descriptions = new Array();
                            var i = 0, error = 0;
                            modal.find('tbody tr').each(function () {
                                var row = $(this);
                                var asset_name = row.find('input[name="asset_name"]').val();
                                var asset_group_id = row.find('select[name="asset_group_id"]').val();
                                if (asset_name != '' && asset_group_id != '') {
                                    asset_names[i] = asset_name;
                                    asset_group_ids[i] = asset_group_id;
                                    part_numbers[i] = row.find('input[name="part_number"]').val();
                                    descriptions[i] = row.find('textarea[name="description"]').val();
                                    i++;
                                } else {
                                    error++;
                                }
                            });

                            if (error == 0) {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "assets/save_multiple_assets",
                                    {
                                        asset_names: asset_names,
                                        asset_group_ids: asset_group_ids,
                                        part_numbers: part_numbers,
                                        descriptions: descriptions,
                                    }, function (data) {
                                        stop_spinner();
                                        modal.find('form')[0].reset();
                                        modal.find('.artificial_row').remove();
                                        $('#asset_items_lists').DataTable().draw('page');

                                    }
                                ).complete();
                            } else {
                                display_form_fields_error();
                            }

                        });
                        modal.attr('initialized', 'true');
                    }
                });

                //Delete Asset Group
                $('.delete_asset_item').each(function () {
                    var button = $(this);
                    if (button.attr('active') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Asset Item',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger btn-xs',
                                        action: function () {
                                            $.post(
                                                base_url + "assets/delete_asset_item",
                                                {
                                                    asset_item_id: button.attr('asset_item_id')
                                                }, function () {
                                                    $('#asset_items_lists').DataTable().draw('page');
                                                }
                                            ).complete(function () {
                                                stop_spinner();
                                            });
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default btn-xs'
                                    }
                                }
                            });
                        });
                        button.attr('active', 'true');
                    }
                });

                $('a[href="#asset_groups"]').on('shown.bs.tab', function (e) {
                    var table = $('#asset_group_lists');
                    if (table.attr('initialized') != 'true') {
                        table.DataTable({
                            "processing": true,
                            "serverSide": true,
                            "ajax": {
                                url: base_url + "assets/asset_group_list",
                                type: 'POST'
                            },
                            "columns": [
                                { "orderable": true },
                                { "orderable": true },
                                { "orderable": false }
                            ],
                            "language": {
                                "zeroRecords": "<div class='alert alert-info'>No matching asset groups found</div>",
                                "emptyTable": "<div class='alert alert-info'>No asset groups found</div>"
                            },
                            "drawCallback": function () {

                                $('.save_asset_group').each(function () {
                                    var button = $(this);
                                    if (button.attr('initialized') != 'true') {
                                        button.click(function () {
                                            var modal = button.closest('.modal');
                                            var group_id = modal.find("input[name='group_id']").val();
                                            var group_name = modal.find("input[name='group_name']").val();
                                            var description = modal.find("textarea[name='description']").val();
                                            var parent_id = modal.find("select[name='parent_id']").val();

                                            if (group_name.trim() != '') {
                                                start_spinner();
                                                modal.modal('hide');
                                                $.post(
                                                    base_url + "assets/save_asset_group",
                                                    {
                                                        group_name: group_name,
                                                        group_id: group_id,
                                                        parent_id: parent_id,
                                                        description: description
                                                    }, function () {
                                                        button.closest('form')[0].reset();
                                                        button.closest('form').find('select').change();
                                                        stop_spinner();
                                                        $('#asset_group_lists').DataTable().draw('page');
                                                    }
                                                );
                                            } else {
                                                toast('warning', 'Group Name Must be filled ');
                                            }
                                        });
                                        button.attr('initialized', 'true');
                                    }
                                });

                                //Delete Asset Group
                                $('.delete_asset_group').each(function () {
                                    var button = $(this);
                                    if (button.attr('active') != 'true') {
                                        button.click(function () {
                                            if (confirm('Are you sure?')) {
                                                start_spinner();
                                                $.post(
                                                    base_url + "assets/delete_asset_group",
                                                    {
                                                        group_id: button.attr('delete_asset_group_id')
                                                    }, function () {
                                                        toast('success', 'Successfully Saved');
                                                        modal.find('form')[0].reset();
                                                        $('#asset_group_lists').DataTable().draw('page');
                                                    }
                                                ).complete(function () {
                                                    stop_spinner();
                                                });
                                            }
                                        });
                                        button.attr('active', 'true');
                                    }
                                });


                                $(this).find('tr').each(function () {
                                    $(this).find('td:last-child').attr('nowrap', 'nowrap');
                                });

                                initialize_common_js();
                            }
                        });
                        table.attr('initialized', 'true');
                    } else {
                        table.attr('initialized', 'true')
                    }
                });

                $(this).find('tr').each(function () {
                    $(this).find('td:last-child').attr('nowrap', 'nowrap');
                });

                initialize_common_js();
            }
        })
        table.attr('initialized', 'true');
    }
});

$('.upload_asset_registration_excel').each(function () {
    var button = $(this);
    if (button.attr('initialized') != 'true') {
        button.click(function () {
            var form = button.closest('form');
            var file_field = form.find('input[name="asset_registration_excel"]');
            var captured = file_field[0];
            var asset_group_id = file_field.attr('asset_group_id');
            var file = captured.files[0], form_data = false;
            var path = base_url + 'assets/upload_asset_registration_excel/';
            if (window.FormData) {
                button.attr('disabled', 'disabled');
                start_spinner();
                form_data = new FormData();
                if (form_data) {
                    form_data.append("file", file);
                    form_data.append("asset_group_id", asset_group_id);

                    $.ajax({
                        url: path,
                        type: "POST",
                        timeout: 250000,
                        cache: false,
                        data: form_data,
                        processData: false,
                        contentType: false,
                        success: function (data) {
                            $('#asset_items_lists').DataTable().draw('page');
                        },
                        complete: function () {
                            button.removeAttr('disabled');
                            form[0].reset();
                            stop_spinner();
                        }
                    });
                }
            }
        });

        button.attr('initialized', 'true');
    }
});

$('#hired_asset_list').each(function () {
    var list_container = $(this);
    if (list_container.attr('initialized') != 'true') {
        var list_type = list_container.attr('list_type');
        var columns = list_type == "clients" ? [
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": false }
        ] : [
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": true },
            { "orderable": false }
        ];
        list_container.DataTable({
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "assets/hired_assets/" + list_type,
                type: 'POST'
            },
            "columns": columns,
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching assets found</div>",
                "emptyTable": "<div class='alert alert-info'>No assets found</div>"
            }, "drawCallback": function () {

                $('.hired_asset_form').each(function () {
                    var modal = $(this);
                    modal.on('show.bs.modal', function (e) {
                        if (modal.attr('initialized') != 'true') {
                            var project = modal.find('select[name="project_id"]');
                            var save_hired_assets = function (button) {
                                var form = button.closest('form');
                                var hired_asset_id = button.attr('hired_asset_id');
                                var item_id = form.find('select[name="item_id"]').val();
                                var other_end_id = form.find('select[name="other_end_id"]').val();
                                var project_id = form.find('select[name="project_id"]').val();
                                var sub_location_id = form.find('select[name="sub_location_id"]').val();
                                var hiring_cost = form.find('input[name="amount"]').unmask();
                                var hired_date = form.find('input[name="hired_date"]').val();
                                var dead_line = form.find('input[name="dead_line"]').val();
                                var type = form.find('input[name="type"]').val();
                                var description = form.find('textarea[name="description"]').val();

                                if (item_id == null && asset_code == null && group_id == null && other_end_id == null &&
                                    project_id == null && sub_location_id == null && hiring_cost == null && hired_date == null && dead_line == null) {
                                    display_form_fields_error();
                                } else {
                                    modal.modal('hide');
                                    start_spinner();
                                    $.post(
                                        base_url + 'assets/save_hired_assets',
                                        {
                                            item_id: item_id,
                                            hired_asset_id: hired_asset_id,
                                            other_end_id: other_end_id,
                                            project_id: project_id,
                                            sub_location_id: sub_location_id,
                                            hiring_cost: hiring_cost,
                                            hired_date: hired_date,
                                            dead_line: dead_line,
                                            type: type,
                                            description: description
                                        }, function () {
                                            stop_spinner();
                                            toast('success', 'Saved');
                                            form[0].reset();
                                            $('#hired_asset_list').DataTable().draw('page');
                                        }
                                    )
                                }
                            };

                            project.change(function () {
                                var project_id = project.val();
                                start_spinner();
                                $.post(
                                    base_url + 'assets/load_project_sub_locations',
                                    {
                                        project_id: project_id
                                    }, function (data) {
                                        modal.find('select[name="sub_location_id"]').html(data).trigger('change');
                                        stop_spinner();
                                    }
                                )
                            });

                            modal.find('.save_hired_assets').each(function () {
                                var button = $(this);
                                if (button.attr('initialized') != 'true') {
                                    button.click(function () {
                                        save_hired_assets(button);
                                    });
                                    button.attr('initialized', 'true');
                                }
                            });
                            modal.attr('initialized', 'true');

                        }
                    });

                });

                $('.deactivate_hired_asset').each(function () {
                    var button = $(this);
                    button.click(function () {
                        var hired_asset_id = button.attr('hired_asset_id');
                        $.post(
                            base_url + 'assets/deactivate_hired_asset',
                            {
                                hired_asset_id: hired_asset_id
                            }, function () {
                                toast('success', 'DEACTIVATED');
                                $('#hired_asset_list').DataTable().draw('page');
                            }
                        )
                    })
                })

                $('.activate_hired_asset').each(function () {
                    var button = $(this);
                    button.click(function () {
                        var hired_asset_id = button.attr('hired_asset_id');
                        $.post(
                            base_url + 'assets/activate_hired_asset',
                            {
                                hired_asset_id: hired_asset_id
                            }, function () {
                                toast('success', 'ACTIVATED');
                                $('#hired_asset_list').DataTable().draw('page');
                            }
                        )
                    })
                });

                initialize_common_js();
            }
        });

        list_container.attr('initialized', 'true')
    }
});





/********************************************************
 *  SUPPORT API
 ********************************************************/
$('#support_tickets').DataTable({
    colReorder: true,
    "processing": true,
    "serverSide": true,
    "ordering": false,
    "ajax": {
        url: base_url + "support/tickets/",
        type: 'POST'
    },
    "columns": [
        { "orderable": false },
        { "orderable": false },
        { "orderable": false },
        { "orderable": false },
        { "orderable": false },
        { "orderable": false },
        { "orderable": false }
    ],
    "language": {
        "zeroRecords": "<div class='alert alert-info'>No matching tickets found</div>",
        "emptyTable": "<div class='alert alert-info'>No tickets found</div>"
    }

});

function rating(ticket_id) {

    var rate = 0;

    var buttons = jQuery('<div>')
        .append(createStar());

    swal({
        title: "How was your experience getting help with this issue?",
        html: buttons,
        showCancelButton: false,
        showConfirmButton: true,
        confirmButtonText: "Submit"
    }).then((result) => {

        start_spinner();
        $.post(
            base_url + "support/close_tickets/",
            {
                ticket_id: ticket_id,
                rates: rate
            }, function (data) {
                $('#support_tickets').DataTable().draw('page');
                stop_spinner();

            }
        )
    });

    function createStar() {

        return $('<span class="star-rating star-5"> ' +
            ' <input type="radio" name="rating" class="rating" value="1"><i></i> ' +
            '<input type="radio" name="rating" class="rating" value="2"><i></i> ' +
            '<input type="radio" name="rating" class="rating" value="3"><i></i>' +
            ' <input type="radio" name="rating" class="rating" value="4"><i></i> ' +
            ' <input type="radio" name="rating" class="rating" value="5"><i></i> ' +
            '</span>');
    }

    jQuery('.rating').each(function () {
        var rating = jQuery(this);
        rating.click(function () {
            rate = rating.val();
        })
    })
}

$('.conversation_texts').each(function () {

    if ($('.conversation_texts').attr('status') != 'Active') {
        $('.conversations_replay').hide();  // hiding closed tickets
    }
});

$('.save_conversation').click(function () {

    var button = $(this);
    var form = button.closest('.modal');
    var subject = button.attr('subject');
    var message = $('#message_replied').val();
    var ticket_id = button.attr('ticket_id');
    var caption = $('#caption').val();


    if (subject != '') {
        var final_message = '';
        if (message != '' || caption != '') {
            if (message != '' && caption != '') {
                final_message = message + '</br></br>' + caption;
            } else if (message != '' && caption == '') {
                final_message = message;
            } else if (message == '' && caption != '') {
                final_message = caption;
            } else {
                toast('error', 'Message or Caption cannot be empty', 'Error');
            }
        } else {
            toast('error', 'Message or Caption cannot be empty', 'Error');
        }

        if (final_message != '') {

            start_spinner();

            if (window.FormData) {

                formdata = new FormData();


                for (var i = 0; i < $('#files').get(0).files.length; ++i) {
                    formdata.append('file' + i, $('#files').get(0).files[i]);
                }

                formdata.append('ticket_id', ticket_id);
                formdata.append('subject', subject);
                formdata.append('message', final_message);

                if (formdata) {
                    $.ajax({
                        url: base_url + 'support/save_tickets/',
                        type: "POST",
                        timeout: 250000,
                        cache: false,
                        data: formdata,
                        processData: false,
                        contentType: false,
                        success: function (data) {
                            $(".message_form_conversation textarea").val("");
                            $(".upload_file_form_conversation input").val("");
                            $(".upload_file_form_conversation textarea").val("");
                            toast('success', '', 'Sent');
                            stop_spinner();
                        },
                        complete: function () {
                            window.location = base_url + 'support/conversations/' + ticket_id;



                        }
                    });
                }

            }

        }


    } else {
        toast('error', 'Subject is empty', 'Error');
    }



});

$('.save_ticket').click(function () {

    var button = $(this);
    var form = button.closest('.modal');
    var subject = form.find('input[name="subject"]').val();
    var message = form.find('textarea[name="message"]').val();
    var caption = form.find('textarea[name="caption"]').val();
    var captured = $('#uploaded_file')[0];
    var carbon_copy = form.find('select[name="carbon_copies"]').val();

    if (subject != '') {
        var final_message = '';
        if (message != '' || caption != '') {
            if (message != '' && caption != '') {
                final_message = message + '\n' + caption;
            } else if (message != '' && caption == '') {
                final_message = message;
            } else if (message == '' && caption != '') {
                final_message = caption;
            } else {
                toast('error', 'Message or Caption cannot be empty', 'Error');
            }
        } else {
            toast('error', 'Message or Caption cannot be empty', 'Error');
        }

        if (final_message != '') {

            start_spinner();

            if (window.FormData) {

                formdata = new FormData();


                for (var i = 0; i < $('#uploaded_file').get(0).files.length; ++i) {
                    formdata.append('file' + i, $('#uploaded_file').get(0).files[i]);
                }

                formdata.append('ticket_id', '');
                formdata.append('subject', subject);
                formdata.append('message', final_message);
                formdata.append('carbon_copy', carbon_copy);


                if (formdata) {
                    $.ajax({
                        url: base_url + 'support/save_tickets/',
                        type: "POST",
                        timeout: 250000,
                        cache: false,
                        data: formdata,
                        processData: false,
                        contentType: false,
                        success: function (data) {
                            $('#support_tickets').DataTable().draw('page');
                            stop_spinner();
                        },
                        complete: function () {

                            toast('success', '', 'Sent');
                            $(".upload_file_form input").val("");
                            $(".ticket_form input").val("");
                            $(".ticket_form select").val("");
                            $(".upload_file_form textarea").val("");
                            $(".ticket_form textarea").val("");
                            form.modal('hide');


                        }
                    });
                }

            }

        }


    } else {
        toast('error', 'Subject is empty', 'Error');
    }

});


// $("#content_div").each(function(){
//     var div = $(this);
//     div.scrollTop($("#content_div")[0].scrollHeight);  ///// scrolling to the last message
// });

$('#services_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "processing": true,
            "serverSide": true,
            "order": [[0, 'desc']],
            "ajax": {
                url: base_url + "projects/services",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching service found</div>",
                "emptyTable": "<div class='alert alert-info'>No service found</div>"
            },
            "drawCallback": function () {

                $('.service_form').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        modal.on('show.bs.modal', function () {

                            function initialize_row_remover(tr) {
                                tr.find('.remove_row').each(function () {
                                    $(this).click(function () {
                                        $(this).closest('tr').remove();
                                        calculate_table_total_amount(modal.find('table'));
                                    });
                                });
                            }
                            initialize_row_remover(modal.find('tbody tr'));
                            calculate_table_total_amount(modal.find('table'));
                            modal.delegate(' input[name="rate"],  input[name="quantity"] ', 'change keyup', function () {
                                calculate_table_total_amount(modal.find('table'));
                            });

                            modal.find('tbody tr').each(function () {
                                $(this).find('select[name="unit_id"]').select2({ width: '100px' });
                                initialize_form_amount_calculator($(this), 2);
                            });

                            modal.find('.row_adder').each(function () {
                                if ($(this).attr('initialized') != 'true') {
                                    $(this).unbind().bind('click', function () {
                                        var tbody = modal.find('tbody');
                                        var new_row = modal.find('.row_template').clone();
                                        new_row.removeAttr('style').removeClass('row_template').addClass('artificial_row').appendTo(tbody);
                                        new_row.find('select[name="unit_id"]').select2({ width: '100px' });
                                        new_row.find('number_format').priceFormat();
                                        initialize_form_amount_calculator(new_row, 1);
                                        calculate_table_total_amount(modal.find('table'));
                                        initialize_row_remover(new_row);
                                        initialize_common_js();
                                    });
                                }
                            });

                            modal.find('.save_service_items').each(function () {
                                var button = $(this);
                                if (button.attr('active') != 'true') {
                                    button.unbind().bind('click', function () {
                                        var service_date = modal.find('input[name="service_date"]').val();
                                        var client_id = modal.find('select[name="client_id"]').val();
                                        var currency_id = modal.find('select[name="currency_id"]').val();
                                        var location = modal.find('input[name="location"]').val();
                                        var service_id = modal.find('input[name="service_id"]').val();
                                        var remarks = modal.find('textarea[name="remarks"]').val();

                                        var descriptions = new Array(), quantities = new Array(), unit_ids = new Array(), rates = new Array();

                                        var i = 0;
                                        modal.find('tbody tr').each(function () {
                                            var row = $(this);
                                            descriptions[i] = row.find('textarea[name="description"]').val();
                                            quantities[i] = row.find('input[name="quantity"]').val();
                                            unit_ids[i] = row.find('select[name="unit_id"]').val();
                                            rates[i] = row.find('input[name="rate"]').unmask();
                                            i++;
                                        });

                                        if (service_date != '' && client_id != '' && currency_id != '' && location != '' && descriptions.length > 0 && quantities.length > 0 && unit_ids.length > 0 && rates.length > 0) {
                                            modal.modal('hide');
                                            start_spinner();

                                            $.post(
                                                base_url + "projects/save_services",
                                                {
                                                    service_id: service_id,
                                                    service_date: service_date,
                                                    client_id: client_id,
                                                    currency_id: currency_id,
                                                    location: location,

                                                    descriptions: descriptions,
                                                    quantities: quantities,
                                                    unit_ids: unit_ids,
                                                    rates: rates,
                                                    remarks: remarks

                                                }, function (data) {
                                                    modal.find('form')[0].reset();
                                                }
                                            ).complete(function () {
                                                stop_spinner();
                                                modal.find('form')[0].reset();
                                                modal.find('.artificial_row').remove();
                                                table.DataTable().draw('page');

                                            });

                                        } else {
                                            display_form_fields_error();
                                        }
                                    });
                                    button.attr('active', 'true');
                                }
                            });

                        });
                        modal.attr('initialized', 'true');
                    }
                });

                $('.delete_services').each(function () {
                    var button = $(this);
                    if (button.attr('active') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete This Service',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger btn-xs',
                                        action: function () {
                                            $.post(
                                                base_url + "projects/delete_services",
                                                {
                                                    service_id: button.attr('service_id')
                                                }, function () {
                                                    $('#services_list').DataTable().draw('page');
                                                }
                                            ).complete(function () {
                                                stop_spinner();
                                            });
                                        }
                                    },
                                    cancel: {
                                        text: "Cancel",
                                        btnClass: 'btn btn-default btn-xs'
                                    }
                                }
                            });
                        });
                        button.attr('active', 'true');
                    }
                });

                initialize_common_js();
            }
        });
        table.attr('initialized', 'true');
    }
});


/********************************************************
 *  DASHBOARD
 ********************************************************/
function load_store_value_pie_chart() {
    $('.jm_spinner_store_values').jmspinner('small');
    $.post(
        base_url + 'inventory/material_values',
        {

        }, function (data) {
            console.log(data);
            $('#requisition_pie_chart_container').attr('style', 'min-height: 260px; text-align: center;');
            Highcharts.chart('requisition_pie_chart_container', {
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: false,
                    type: 'pie'
                },
                title: {
                    text: 'STORE VALUES'
                },
                tooltip: {
                    pointFormat: '{series.name}: <b> {point.formated_value} </b>'
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: false,
                            format: ' {point.percentage:.1f}%',
                            style: {
                                color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                            }
                        }
                    },

                    series: {
                        cursor: 'pointer',
                        point: {
                            events: {
                                click: function () {
                                    location.href = base_url + "inventory/location_profile/" + this.options.key;
                                }
                            }
                        }
                    }
                },
                series: [{
                    name: 'Store Value',
                    colorByPoint: true,
                    data: data.locations
                }]
            });

        }, 'JSON'
    );

    $('.jm_spinner_store_values').removeAttr('style');

}

$('#requisition_pie_chart_container').each(function () {
    load_store_value_pie_chart();
});

$('#requisition_pie_chart_container').each(function () {
    var container = $(this);
    $(window).resize(function () {
        var chart = container.highcharts();

        console.log('redraw');
        var w = container.closest(".wrapper").width()
        // setsize will trigger the graph redraw
        chart.setSize(
            w, w * (3 / 4), false
        );
    });
});

$('#dashboard_requisition_table').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            colReorder: true,
            "order": [[1, "DESC"]],
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "app/requisitions",
                type: 'POST'
            },
            "lengthMenu": [[4], [4]],
            "columns": [
                { "orderable": true },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching requisition found</div>",
                "emptyTable": "<div class='alert alert-info'>No requisition found</div>"
            }

        });
        table.attr('initialized', 'true');
    }
});

$('#dashboard_purchase_orders_table').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "app/purchase_orders",
                type: 'POST',
                data: function (d) {
                    d.status = 'pending'
                }
            },
            "lengthMenu": [[4], [4]],
            "columns": [
                { "orderable": false },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching requisition found</div>",
                "emptyTable": "<div class='alert alert-info'>No requisition found</div>"
            }
        });
        table.attr('initialized', 'true');
    };
});

$('#exchange_rate_privilege').each(function () {
    var exchange_rate_privilege = $('#exchange_rate_privilege').attr("exchange_rate_privilege");
    if (exchange_rate_privilege == 'true' && hasOneDayPassed()) {
        $('#update_exchange_rates').each(function () {
            var modal = $(this);
            modal.attr('data-backdrop', 'static');
            modal.attr('data-keyboard', 'false');
            $('#close_btn').removeAttr('data-dismiss');
            modal.modal("show");

        });
        save_exchange_rates();
    }
});

function save_exchange_rates() {
    $('#save_exchange_rates').each(function () {
        var button = $(this);
        if (button.attr('initialized') != 'true') {
            button.click(function () {
                var modal = button.closest('.modal');
                var date = modal.find('input[name="date"]').val();
                var currency_ids = Array(), exchange_rates = Array();
                var i = 0;
                modal.find(' input[name="currency_id"]').each(function () {
                    var exchange_rate = $(this).closest('tr').find('input[name="exchange_rate"]').unmask();
                    if (parseFloat(exchange_rate) > 0) {
                        currency_ids[i] = $(this).val();
                        exchange_rates[i] = exchange_rate;
                    }
                    i++;
                });

                if (currency_ids.length > 0) {
                    start_spinner();
                    modal.modal('hide');
                    $.post(
                        base_url + "finance/update_exchange_rates",
                        {
                            date: date,
                            currency_ids: currency_ids,
                            exchange_rates: exchange_rates
                        }, function () {
                            stop_spinner();
                            toast('success', 'Exchange rates has been updated');
                            $('#currencies_table').DataTable().draw('page');
                        }
                    );
                }

            });
            button.attr('initialized', 'true');
        }
    });
}

$('#approved_payments_chart_container').each(function () {

    $.post(
        base_url + 'finance/approved_cash_requisitions_list_on_dashboard',
        {
        }, function (data) {
            Highcharts.chart('approved_payments_chart_container', {
                chart: {
                    type: 'bar'
                },
                title: {
                    text: '<a style="font-size:12px" href="' + base_url + 'finance/transactions">APPROVED PAYMENTS</a>'
                },
                xAxis: {
                    categories: ['Payments']
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: 'Number Of Payments'
                    }
                },
                legend: {
                    reversed: true
                },
                plotOptions: {
                    series: {
                        stacking: 'normal'
                    },

                    cursor: 'pointer',
                    point: {
                        events: {
                            click: function () {
                                location.href = base_url + "finance/approved_cash_requisitions" + this.options.key;
                            }
                        }
                    }
                }
                ,
                series: data.payments
            });

        }, 'JSON'
    );

});


/********************************************************
 *  ATTENDANCES
 ********************************************************/
$('#attendances_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable();
        table.attr('initialized', 'true');
    }
});


/********************************************************
 *  HSE
 ********************************************************/
$('#hse_categories_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[0, "asc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/hse_categories_list/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching category found</div>",
                "emptyTable": "<div class='alert alert-info'>No category found</div>"
            }, "drawCallback": function () {

                $('.save_category').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');

                            var category_id = modal.find('input[name="category_id"]').val();
                            var category_name = modal.find('input[name="category_name"]').val();
                            var description = modal.find('textarea[name="description"]').val();

                            if (category_name != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_category",
                                    {
                                        category_id: category_id,
                                        category_name: category_name,
                                        description: description
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Category saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_category').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Category.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_category",
                                                {
                                                    category_id: button.attr('category_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Category Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });


                initialize_common_js();

            }
        });
    }
});

$('#category_parameters_list').each(function () {
    var table = $(this);
    var category_id = table.attr('category_id');
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/category_parameters_list/" + category_id,
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching category parameter found</div>",
                "emptyTable": "<div class='alert alert-info'>No category parameter found</div>"
            }, "drawCallback": function () {

                $('.save_parameter').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');

                            var category_id = modal.find('input[name="category_id"]').val();
                            var parameter_id = modal.find('input[name="parameter_id"]').val();
                            var parameter_name = modal.find('input[name="parameter_name"]').val();
                            var description = modal.find('textarea[name="description"]').val();

                            if (parameter_name != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_parameter",
                                    {
                                        category_id: category_id,
                                        parameter_id: parameter_id,
                                        parameter_name: parameter_name,
                                        description: description
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Parameter saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_parameter').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Parameter.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_parameter",
                                                {
                                                    parameter_id: button.attr('parameter_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Parameter Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });

                $('.parameter_type_form').each(function () {
                    var modal = $(this);
                    if (modal.attr('initialized') != 'true') {
                        var load_available_parameter = function (container) {
                            container.on('shown.bs.modal', function () {
                                var category_parameter_id = modal.find('input[name="category_parameter_id"]').val();
                                start_spinner();
                                $.post(
                                    base_url + "hse/category_parameter_types",
                                    {
                                        category_parameter_id: category_parameter_id
                                    }, function (data) {
                                        container.find('.parameter_type_container').html(data.table_view);
                                        initialize_common_js();
                                        container.find('.delete_parameter_type').each(function () {
                                            var button = $(this);
                                            if (button.attr('initialized') != 'true') {
                                                button.click(function () {
                                                    $.confirm({
                                                        title: 'Delete Parameter Type.',
                                                        content: 'This action is irreversible! Are you sure?',
                                                        buttons: {
                                                            confirm: {
                                                                text: 'Confirm Delete',
                                                                btnClass: 'btn btn-danger',
                                                                action: function () {
                                                                    start_spinner();
                                                                    $.post(
                                                                        base_url + "hse/delete_parameter_type",
                                                                        {
                                                                            category_parameter_id: button.attr('category_parameter_id'),
                                                                            parameter_type__id: button.attr('parameter_type__id')
                                                                        }, function (data) {
                                                                            stop_spinner();
                                                                            toast('success', 'Category Parameter Type Deleted!');
                                                                            load_available_parameter(container);
                                                                        }, 'json'
                                                                    );
                                                                }
                                                            },
                                                            cancel: {
                                                                text: "Cancel",
                                                                btnClass: 'btn btn-default'
                                                            }
                                                        }
                                                    });
                                                });
                                                button.attr('initialized', 'true')
                                            }
                                        });
                                        stop_spinner();
                                    }, 'json'
                                );
                            });
                        };

                        load_available_parameter(modal);

                        modal.find('.save_parameter_type').each(function () {
                            var button = $(this);
                            if (button.attr('initialized') != 'true') {
                                button.click(function () {
                                    var category_parameter_id = modal.find('input[name="category_parameter_id"]').val();
                                    var parameter_type_name = modal.find('input[name="parameter_type_name"]').val();
                                    var description = modal.find('textarea[name="description"]').val();

                                    start_spinner();
                                    $.post(
                                        base_url + "hse/category_parameter_types",
                                        {
                                            category_parameter_id: category_parameter_id,
                                            parameter_type_name: parameter_type_name,
                                            description: description
                                        }, function (data) {
                                            modal.find('form')[0].reset();
                                            modal.find('.parameter_type_container').html(data.table_view);
                                            modal.find('.delete_parameter_type').each(function () {
                                                var button = $(this);
                                                if (button.attr('initialized') != 'true') {
                                                    button.click(function () {
                                                        $.confirm({
                                                            title: 'Delete Parameter Type.',
                                                            content: 'This action is irreversible! Are you sure?',
                                                            buttons: {
                                                                confirm: {
                                                                    text: 'Confirm Delete',
                                                                    btnClass: 'btn btn-danger',
                                                                    action: function () {
                                                                        start_spinner();
                                                                        $.post(
                                                                            base_url + "hse/delete_parameter_type",
                                                                            {
                                                                                category_parameter_id: button.attr('category_parameter_id'),
                                                                                parameter_type__id: button.attr('parameter_type__id')
                                                                            }, function (data) {
                                                                                stop_spinner();
                                                                                toast('success', 'Category Parameter Type Deleted!');
                                                                                load_available_parameter(container);
                                                                            }, 'json'
                                                                        );
                                                                    }
                                                                },
                                                                cancel: {
                                                                    text: "Cancel",
                                                                    btnClass: 'btn btn-default'
                                                                }
                                                            }
                                                        });
                                                    });
                                                    button.attr('initialized', 'true')
                                                }
                                            });
                                            initialize_common_js();
                                            stop_spinner();
                                            toast('success', 'Parameter type saved!');
                                        }, 'json'
                                    )
                                });
                                button.attr('initialized', 'true');
                            }
                        });
                        modal.attr('initialized', 'true');
                    }
                });

                initialize_common_js();
            }
        });
    }
});

$('#inspections_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        var category_id = table.attr('category_id');
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/inspections_list/",
                type: 'POST',
                data: { category_id: category_id }

            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching inspection found</div>",
                "emptyTable": "<div class='alert alert-info'>No inspection found</div>"
            }, "drawCallback": function () {

                // load_data(category_id);

                function load_data(query, category_id) {
                    $.ajax({
                        url: base_url + "hse/fetch_parameters",
                        method: "POST",
                        data: { query: query, category_id: category_id },
                        success: function (data) {
                            $('.parameter_result_' + category_id).html(data).trigger('change');
                        }
                    });
                }

                $('.categories').each(function () {
                    var category = $(this);
                    var category_id = category.find('#category_id').val();
                    var search_text = category.find('#search_text_' + category_id);
                    search_text.on('keyup', function () {
                        var search = $(this).val();
                        if (search != '') {
                            load_data(search, category_id);
                        }
                        else {
                            load_data(category_id);
                        }
                    });

                });

                $('.save_Inspection').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {

                        button.click(function () {
                            var modal = button.closest('.modal');

                            var inspection_date = modal.find('input[name="inspection_date"]').val();
                            var inspection_id = modal.find('input[name="inspection_id"]').val();
                            var inspector_id = modal.find('select[name="inspector_id"]').val();
                            var site_id = modal.find('select[name="site_id"]').val();
                            var status = modal.find('select[name="status"]').val();
                            var location = modal.find('input[name="location"]').val();
                            var category_id = modal.find('input[name="category_id"]').val();
                            var inspection_type = modal.find('input[name="inspection_type"]').val();
                            var description = modal.find('textarea[name="description"]').val();
                            var parameter_ids = new Array();
                            var remarks = new Array();
                            var parameter_type_ids = new Array();
                            var is_checkeds = new Array();
                            var i = 0;
                            modal.find('.parameter_categories').each(function () {
                                var parameter_category = $(this);
                                var parameter_id = parameter_category.find('#parameter_id').val();
                                is_checkeds[i] = [];
                                parameter_type_ids[i] = [];
                                var j = 0;
                                parameter_category.find('table tr').each(function () {
                                    var parameter_type_row = $(this);
                                    var parameter_type_id = parameter_type_row.find('input[name="parameter_type_id"]');
                                    if (parameter_type_id.is(":checked")) {
                                        is_checkeds[i][j] = 1;
                                    } else {
                                        is_checkeds[i][j] = 0;
                                    }
                                    parameter_type_ids[i][j] = parameter_type_id.val();
                                    j++;
                                });
                                parameter_ids[i] = parameter_id;
                                i++;
                            });

                            if (inspector_id != '' && site_id != '' && inspection_date != '' && status != '' && location != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_inspection",
                                    {
                                        inspection_date: inspection_date,
                                        inspection_id: inspection_id,
                                        inspector_id: inspector_id,
                                        site_id: site_id,
                                        location: location,
                                        status: status,
                                        inspection_type: inspection_type,
                                        category_id: category_id,
                                        category_parameter_ids: parameter_ids,
                                        is_checkeds: is_checkeds,
                                        parameter_type_ids: parameter_type_ids,
                                        remarks: remarks,
                                        description: description
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Inspection saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error();
                            }
                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_inspection').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Inspection.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_inspection",
                                                {
                                                    inspection_id: button.attr('inspection_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Inspection Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });

                initialize_common_js();

            }
        });
    }
});

$('#inspection_job_cards_list').each(function () {
    var table = $(this);
    var inspection_id = table.attr('inspection_id');
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/inspection_job_cards_list/" + inspection_id,
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching job card found</div>",
                "emptyTable": "<div class='alert alert-info'>No job card found</div>"
            }, "drawCallback": function () {

                $('.save_job_card').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');

                            var inspection_id = modal.find('input[name="inspection_id"]').val();
                            var job_card_id = modal.find('input[name="job_card_id"]').val();
                            var job_type = modal.find('input[name="job_type"]').val();
                            var date = modal.find('input[name="date"]').val();
                            var priority = modal.find('select[name="priority"]').val();
                            var remarks = modal.find('textarea[name="remarks"]').val();

                            if (inspection_id != '' && date != '' && priority != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_job_card",
                                    {
                                        inspection_id: inspection_id,
                                        priority: priority,
                                        job_type: job_type,
                                        job_card_id: job_card_id,
                                        date: date,
                                        remarks: remarks
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Job Card Saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_job_card').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Job Card.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_job_card",
                                                {
                                                    job_card_id: button.attr('job_card_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Job Card Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });


                initialize_common_js();

            }
        });
    }
});

$('#all_job_cards_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/all_job_cards_list/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching job card found</div>",
                "emptyTable": "<div class='alert alert-info'>No job card found</div>"
            }, "drawCallback": function () {


                initialize_common_js();

            }
        });
    }
});

$('#hse_incidents_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/hse_incidents_list/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching incident found</div>",
                "emptyTable": "<div class='alert alert-info'>No incident found</div>"
            }, "drawCallback": function () {

                $('.save_incident').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');
                            var incident_date = modal.find('input[name="incident_date"]').val();
                            var incident_id = modal.find('input[name="incident_id"]').val();
                            var site_id = modal.find('select[name="site_id"]').val();
                            var reference = modal.find('input[name="reference"]').val();
                            var is_reported = modal.find('select[name="is_reported"]').val();
                            var causative_agent = modal.find('select[name="causative_agent"]').val();
                            var type = modal.find('select[name="type"]').val();
                            var location = modal.find('input[name="location"]').val();
                            var description = modal.find('textarea[name="description"]').val();

                            if (incident_date != '' && site_id != '' && is_reported != '' && causative_agent != '' && type != '' && location != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_incident",
                                    {
                                        incident_date: incident_date,
                                        incident_id: incident_id,
                                        site_id: site_id,
                                        reference: reference,
                                        is_reported: is_reported,
                                        causative_agent: causative_agent,
                                        type: type,
                                        location: location,
                                        description: description
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Incident Saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_incident').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Incident.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_incident",
                                                {
                                                    incident_id: button.attr('incident_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Incident Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });

                initialize_common_js();

            }
        });
    }
});

$('#incident_job_cards_list').each(function () {
    var table = $(this);
    var incident_id = table.attr('incident_id');
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/incident_job_cards_list/" + incident_id,
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching job card found</div>",
                "emptyTable": "<div class='alert alert-info'>No job card found</div>"
            }, "drawCallback": function () {

                $('.save_job_card').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');

                            var incident_id = modal.find('input[name="incident_id"]').val();
                            var job_card_id = modal.find('input[name="job_card_id"]').val();
                            var job_type = modal.find('input[name="job_type"]').val();
                            var date = modal.find('input[name="date"]').val();
                            var priority = modal.find('select[name="priority"]').val();
                            var remarks = modal.find('textarea[name="remarks"]').val();

                            if (incident_id != '' && date != '' && priority != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_job_card",
                                    {
                                        incident_id: incident_id,
                                        job_type: job_type,
                                        priority: priority,
                                        job_card_id: job_card_id,
                                        date: date,
                                        remarks: remarks
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Job Card Saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_job_card').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Job Card.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_job_card",
                                                {
                                                    job_card_id: button.attr('job_card_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Job Card Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });


                initialize_common_js();

            }
        });
    }
});

$('#job_card_labours_and_activities_list').each(function () {
    var table = $(this);
    var job_card_id = table.attr('job_card_id');
    var type = table.attr('type');
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/job_card_labours_and_activities_list",
                type: 'POST',
                data: { type: type, job_card_id: job_card_id }
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching category parameter found</div>",
                "emptyTable": "<div class='alert alert-info'>No category parameter found</div>"
            }, "drawCallback": function () {


                $('.service_row_adder').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var tbody = $(this).closest('form').find('tbody');
                            var new_row = tbody.closest('table').find('.service_row_template').clone().removeAttr('style')
                                .removeClass('service_row_template').addClass('service_artificial_row').appendTo(tbody);
                            new_row.find('select[name="activity_id"]').select2({ width: '100%' });
                            new_row.find('.service_row_remover').click(function () {
                                jQuery(this).closest('tr').remove();
                            });

                            $('.service_row_remover').click(function () {
                                jQuery(this).closest('tr').remove();
                            });
                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.save_job_card_labour_and_activity').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');
                            var labour_id = modal.find('select[name="labour_id"]').val();
                            var job_card_labour_id = modal.find('input[name="job_card_labour_id"]').val();
                            var job_card_service_id = modal.find('input[name="job_card_service_id"]').val();
                            var job_card_id = modal.find('input[name="job_card_id"]').val();
                            var activity_ids = new Array();
                            var i = 0;
                            var tbody = modal.find('tbody');
                            tbody.find('select[name="activity_id"]').each(function () {
                                activity_ids[i] = $(this).val();
                                i++;
                            });

                            if (labour_id != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_job_card_labour_and_service",
                                    {
                                        employee_id: labour_id,
                                        activity_ids: activity_ids,
                                        job_card_service_id: job_card_labour_id,
                                        job_card_labour_id: job_card_labour_id,
                                        job_card_id: job_card_id
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Parameter saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_job_card_labour_and_service').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Labour and Activity.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_job_card_labour_and_service",
                                                {
                                                    job_card_labour_id: button.attr('job_card_labour_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Labour and Activity Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });


                initialize_common_js();

            }
        });
    }
});

$('#generate_job_card_report').off('click').on('click', function () {
    var table_container = $('#job_card_report_container');
    var form_container = $(this).parent().parent();
    var job_card_type = form_container.find('select[name="job_card_type"]').val();
    var from = form_container.find('input[name="from"]').val();
    var to = form_container.find('input[name="to"]').val();
    if (from != '' && to != '') {
        start_spinner();
        $.post(
            base_url + "hse/job_card_reports",
            {
                generate: "true",
                job_card_type: job_card_type,
                from: from,
                to: to
            }, function (data) {
                table_container.html(data)
                stop_spinner();
            }
        );
    } else {
        display_form_fields_error();
    }
});

$('#hse_certificates_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/hse_certificates_list/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching hse certificate found</div>",
                "emptyTable": "<div class='alert alert-info'>No hse certificate found</div>"
            }, "drawCallback": function () {

                $('.save_hse_certificate').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');

                            var certificate_name = modal.find('input[name="certificate_name"]').val();
                            var hse_certificate__id = modal.find('input[name="hse_certificate__id"]').val();
                            var type = modal.find('select[name="type"]').val();
                            var description = modal.find('textarea[name="description"]').val();

                            if (certificate_name != '' && type != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_hse_certificate",
                                    {
                                        hse_certificate__id: hse_certificate__id,
                                        certificate_name: certificate_name,
                                        type: type,
                                        description: description
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Certificate saved !');

                                    }
                                )

                            } else {
                                display_form_fields_error();
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_hse_certificate').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Certificate.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_hse_certificate",
                                                {
                                                    hse_certificate_id: button.attr('hse_certificate_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Certificate Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });


                initialize_common_js();

            }
        });
    }
});

$('#registered_certificates_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/registered_certificates_list/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching registered certificate found</div>",
                "emptyTable": "<div class='alert alert-info'>No registered certificate found</div>"
            }, "drawCallback": function () {

                $('.save_registered_certificate').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');

                            var hse_certificate_id = modal.find('select[name="hse_certificate_id"]').val();
                            var registered_certificate_id = modal.find('input[name="registered_certificate_id"]').val();
                            var employee_id = modal.find('select[name="employee_id"]').val();
                            var company_id = modal.find('select[name="company"]').val();

                            if (hse_certificate_id != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_registered_hse_certificate",
                                    {
                                        hse_certificate_id: hse_certificate_id,
                                        registered_certificate_id: registered_certificate_id,
                                        employee_id: employee_id,
                                        company_id: company_id
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Certificate saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_hse_registered_certificate').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Certificate.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_registered_certificate",
                                                {
                                                    registered_certificate_id: button.attr('registered_certificate_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Certificate Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });


                initialize_common_js();

            }
        });
    }
});

$('#deployments_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/deployments_list/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching deployment found</div>",
                "emptyTable": "<div class='alert alert-info'>No deployment found</div>"
            }, "drawCallback": function () {

                $('.deployment_attachment').each(function () {
                    var button = $(this);
                    var button = $(this);
                    var modal = button.closest('.modal');
                    if (button.attr('active') != 'true') {
                        button.click(function () {
                            start_spinner();
                            var form = $(this).closest('form')[0];

                            if (window.FormData) {
                                formdata = new FormData(form);

                                if (formdata) {

                                    $.ajax({
                                        url: base_url + 'attachments/save_deployment_attachment/',
                                        type: "POST",
                                        timeout: 250000,
                                        cache: false,
                                        data: formdata,
                                        processData: false,
                                        contentType: false,
                                        success: function (data) {
                                            modal.find('button').removeAttr('disabled');
                                            form.reset();
                                            modal.modal('hide');
                                            modal.find('.artificial_row').remove();
                                            table.DataTable().draw('page');
                                        },
                                        complete: function () {
                                            stop_spinner();
                                        }
                                    });

                                }
                            }
                        });
                        button.attr('active', 'true');
                    }
                });

                $('.add_upload_attach').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.attr('initialized', 'true');
                        var modal = button.closest('.modal');
                        button.click(function () {
                            var new_row = modal.find('.row_template').clone().removeAttr('style')
                                .removeClass('row_template hidden').addClass('artificial_row').appendTo(modal.find('tbody'));

                            new_row.find('.row_remover').click(function () {
                                $(this).closest('tr').remove();
                            });
                        });
                    }
                });

                $('.delete_deployment').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Deployment.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_deployment",
                                                {
                                                    deployment_id: button.attr('deployment_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Deployment Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });

                $('.delete_attachment').each(function () {
                    delete_attachment($(this), 'deployment_attachment');
                });

                initialize_common_js();

            }
        });
    }
});

$('.persenger_row_adder').each(function () {
    var button = $(this);
    if (button.attr('initialized') != 'true') {
        button.click(function () {
            var tbody = $(this).closest('table').find('tbody');
            var new_row = tbody.closest('table').find('.persenger_row_template').clone().removeAttr('style')
                .removeClass('persenger_row_template').addClass('persenger_artificial_row').appendTo(tbody);

            new_row.find('.persenger_row_remover').click(function () {
                jQuery(this).closest('tr').remove();
            });
        });
        button.attr('initialized', 'true');
    }
});

$('.persenger_row_remover').click(function () {
    jQuery(this).closest('tbody tr').remove();
});

$('.save_deployments').click(function () {
    var container_box = $(this).closest('.box');

    var name = container_box.find('input[name="name"]').val();
    var departure = container_box.find('input[name="departure"]').val();
    var deployment_id = container_box.find('input[name="deployment_id"]').val();
    var arrival_time = container_box.find('input[name="arrival_time"]').val();
    var relax_station = container_box.find('input[name="relax_station"]').val();
    var registration_number = container_box.find('input[name="registration_number"]').val();
    var driver = container_box.find('input[name="driver"]').val();
    var category_parameter_ids = new Array(), persengers = new Array();
    var answers = new Array();
    var descriptions = new Array();
    var i = 0;
    var category_par = container_box.find('#category_parameter');
    category_par.find('tbody tr').each(function () {
        var row = $(this);
        answers[i] = row.find('select[name="answer"]').val();
        descriptions[i] = row.find('textarea[name="description"]').val();
        category_parameter_ids[i] = row.find('input[name="category_parameter_id"]').val();
        i++;
    });
    var j = 0;
    var paserngers = container_box.find('#paserngers');
    paserngers.find('tbody tr').each(function () {
        var row = $(this);
        persengers[j] = row.find('input[name="persenger"]').val();
        j++;
    });

    if (departure != '' && name != '' && relax_station != '' && registration_number != '' && driver != '' && arrival_time != '') {

        $.post(
            base_url + "hse/save_deployment",
            {
                departure: departure,
                name: name,
                deployment_id: deployment_id,
                relax_station: relax_station,
                driver: driver,
                registration_number: registration_number,
                arrival_time: arrival_time,
                descriptions: descriptions,
                category_parameter_ids: category_parameter_ids,
                persengers: persengers,
                answers: answers
            }, function (data) {

            }
        ).complete(function () {
            window.location.replace(base_url + "hse/deployment");
        });
    } else {
        display_form_fields_error()
    }

});

$('#fik_inspections_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/fik_inspections_list/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching fik inspection found</div>",
                "emptyTable": "<div class='alert alert-info'>No fik inspection found</div>"
            }, "drawCallback": function () {

                $('.save_fik_inspection').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {

                        button.click(function () {
                            var modal = button.closest('.modal');

                            var inspection_date = modal.find('input[name="inspection_date"]').val();
                            var inspection_id = modal.find('input[name="inspection_id"]').val();
                            var inspector_id = modal.find('select[name="inspector_id"]').val();
                            var site_id = modal.find('select[name="site_id"]').val();
                            var status = modal.find('select[name="status"]').val();
                            var location = modal.find('input[name="location"]').val();
                            var category_id = modal.find('input[name="category_id"]').val();
                            var inspection_type = modal.find('input[name="inspection_type"]').val();
                            var description = modal.find('textarea[name="description"]').val();
                            var parameter_ids = new Array();
                            var remarks = new Array();
                            var parameter_type_ids = new Array();
                            var is_checkeds = new Array();
                            var i = 0;
                            modal.find('.parameter_categories').each(function () {
                                var parameter_category = $(this);
                                var parameter_id = parameter_category.find('#parameter_id').val();
                                is_checkeds[i] = [];
                                parameter_type_ids[i] = [];
                                var j = 0;
                                parameter_category.find('table tr').each(function () {
                                    var parameter_type_row = $(this);
                                    var parameter_type_id = parameter_type_row.find('input[name="parameter_type_id"]');
                                    if (parameter_type_id.is(":checked")) {
                                        is_checkeds[i][j] = 1;
                                    } else {
                                        is_checkeds[i][j] = 0;
                                    }
                                    parameter_type_ids[i][j] = parameter_type_id.val();
                                    j++;
                                });
                                parameter_ids[i] = parameter_id;
                                i++;
                            });

                            if (inspector_id != '' && site_id != '' && inspection_date != '' && status != '' && location != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_inspection",
                                    {
                                        inspection_date: inspection_date,
                                        inspection_id: inspection_id,
                                        inspector_id: inspector_id,
                                        site_id: site_id,
                                        location: location,
                                        status: status,
                                        inspection_type: inspection_type,
                                        category_id: category_id,
                                        category_parameter_ids: parameter_ids,
                                        is_checkeds: is_checkeds,
                                        parameter_type_ids: parameter_type_ids,
                                        remarks: remarks,
                                        description: description
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Inspection saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error();
                            }
                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_fik_inspection').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Inspection.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_inspection",
                                                {
                                                    inspection_id: button.attr('inspection_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Inspection Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });

                initialize_common_js();
            }
        });
    }
});

$('#toolbox_talk_registers_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/toolbox_talk_registers_list/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching toolbox talk register found</div>",
                "emptyTable": "<div class='alert alert-info'>No toolbox talk register found</div>"
            }, "drawCallback": function () {

                $('.topic_row_adder').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var tbody = $(this).closest('table').find('tbody');
                            var new_row = tbody.closest('table').find('.topics_row_template').clone().removeAttr('style')
                                .removeClass('topics_row_template').addClass('topic_artificial_row').appendTo(tbody);

                            new_row.find('select[name="topic_id"]').select2();

                            new_row.find('.topic_row_remover').click(function () {
                                jQuery(this).closest('tr').remove();
                            });
                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.topic_row_remover').click(function () {
                    jQuery(this).closest('tr').remove();
                });

                $('.member_row_adder').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var tbody = $(this).closest('table').find('tbody');
                            var new_row = tbody.closest('table').find('.member_row_template').clone().removeAttr('style')
                                .removeClass('member_row_template').addClass('member_artificial_row').appendTo(tbody);

                            new_row.find('.member_row_remover').click(function () {
                                jQuery(this).closest('tr').remove();
                            });
                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.member_row_remover').click(function () {
                    jQuery(this).closest('tr').remove();
                });

                $('.save_toolbox_talk_register').each(function () {
                    var button = $(this);
                    var modal = button.closest('.modal');
                    modal.find('select[name="site_id"]').on('change keyup', function () {
                        var project_id = $(this).val();
                        var activity_field = modal.find('select[name="activity_id"]');
                        if (project_id != '') {
                            start_spinner();
                            $.post(
                                base_url + "hse/load_activities_dropdown_options",
                                {
                                    project_id: project_id
                                }, function (data) {
                                    activity_field.html(data).change();
                                    stop_spinner();
                                }
                            ).complete();
                        } else {
                            toast('error', 'Please Select A Project !');
                        }

                    });

                    if (button.attr('initialized') != 'true') {

                        button.click(function () {
                            var modal = button.closest('.modal');
                            var date = modal.find('input[name="date"]').val();
                            var toolbox_talk_register_id = modal.find('input[name="toolbox_talk_register_id"]').val();
                            var site_id = modal.find('select[name="site_id"]').val();
                            var activity_id = modal.find('select[name="activity_id"]').val();
                            var supervisor_id = modal.find('select[name="supervisor_id"]').val();
                            var member_names = new Array();
                            var topic_ids = new Array();
                            var selected_items = new Array();
                            var tbody = modal.find('tbody');
                            var error = 0;
                            var i = 0;
                            tbody.find('input[name="selected_item"]').each(function () {
                                var selected_item = $(this).val();
                                var row = $(this).closest('tr');
                                var topic = row.find('select[name="topic_id"]').val();
                                var member = row.find('input[name="member_name"]').val();
                                if (selected_item != '') {
                                    selected_items[i] = selected_item;
                                    topic_ids[i] = selected_item == 'topic' ? topic : '';
                                    member_names[i] = selected_item == 'member' ? member : '';
                                } else {
                                    error++;
                                }
                                i++;
                            });

                            if (date != '' && site_id != '' && supervisor_id != '' && activity_id != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_toolbox_talk_register",
                                    {
                                        date: date,
                                        supervisor_id: supervisor_id,
                                        toolbox_talk_register_id: toolbox_talk_register_id,
                                        site_id: site_id,
                                        activity_id: activity_id,
                                        topic_ids: topic_ids,
                                        member_names: member_names,
                                        selected_items: selected_items
                                    }, function (data) {

                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Certificate saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });


                $('.delete_talk_register').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Talk Register.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_toolbox_talk_register",
                                                {
                                                    toolbox_talk_register_id: button.attr('toolbox_talk_register_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Toolbox Talk Register Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });

                initialize_common_js();

            }
        });
    }
});

$('#hse_topics_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/hse_topics_list/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching topic found</div>",
                "emptyTable": "<div class='alert alert-info'>No topic found</div>"
            }, "drawCallback": function () {

                $('.save_topic').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');
                            var topic_id = modal.find('input[name="topic_id"]').val();
                            var topic_name = modal.find('input[name="topic_name"]').val();
                            var description = modal.find('textarea[name="description"]').val();
                            if (topic_name != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_topic",
                                    {
                                        topic_id: topic_id,
                                        topic_name: topic_name,
                                        description: description
                                    }, function (data) {
                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Topic saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_topic').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Topic.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_topic",
                                                {
                                                    topic_id: button.attr('topic_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Topic Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });


                initialize_common_js();

            }
        });
    }
});

$('#site_diary_compliances_list').each(function () {
    var table = $(this);
    if (table.attr('initialized') != 'true') {
        table.DataTable({
            "order": [[2, "desc"]],
            colReorder: true,
            "processing": true,
            "serverSide": true,
            "ajax": {
                url: base_url + "hse/site_diary_compliances_list/",
                type: 'POST'
            },
            "columns": [
                { "orderable": true },
                { "orderable": true },
                { "orderable": true },
                { "orderable": false },
                { "orderable": false }
            ],
            "language": {
                "zeroRecords": "<div class='alert alert-info'>No matching diary found</div>",
                "emptyTable": "<div class='alert alert-info'>No diary found</div>"
            }, "drawCallback": function () {

                $('.site_work_row_adder').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var tbody = $(this).closest('table').find('tbody');
                            var new_row = tbody.closest('table').find('.site_work_row_template').clone().removeAttr('style')
                                .removeClass('site_work_row_template').addClass('artificial_row').appendTo(tbody);

                            new_row.find('.site_work_row_remover').click(function () {
                                jQuery(this).closest('tr').remove();
                            });
                        });
                        button.attr('initialized', 'true');
                    }
                });
                $('.site_work_row_remover').click(function () {
                    jQuery(this).closest('tr').remove();
                });

                $('.save_site_diary_compliance').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            var modal = button.closest('.modal');
                            var date = modal.find('input[name="date"]').val();
                            var site_id = modal.find('select[name="site_id"]').val();
                            var supervisor_id = modal.find('select[name="supervisor_id"]').val();
                            var site_diary_compliance_id = modal.find('input[name="site_diary_compliance_id"]').val();
                            var remarks = modal.find('textarea[name="remarks"]').val();

                            var tbody = modal.find('tbody');
                            var descriptions = new Array();
                            var comments = new Array();
                            var statuses = new Array();
                            var i = 0;
                            tbody.find('textarea[name="description"]').each(function () {
                                var description = $(this).val();
                                var row = $(this).closest('tr');
                                var comment = row.find('textarea[name="comments"]').val();
                                var status = row.find('input[name="status"]');
                                if (status.is(":checked")) {
                                    statuses[i] = status.val();
                                } else {
                                    statuses[i] = '';
                                }
                                comments[i] = comment;
                                descriptions[i] = description;
                                i++;
                            });

                            if (date != '' && site_id != '' && supervisor_id != '') {
                                modal.modal('hide');
                                start_spinner();
                                $.post(
                                    base_url + "hse/save_site_diary_compliance",
                                    {
                                        date: date,
                                        site_id: site_id,
                                        supervisor_id: supervisor_id,
                                        site_diary_compliance_id: site_diary_compliance_id,
                                        comments: comments,
                                        descriptions: descriptions,
                                        statuses: statuses,
                                        remarks: remarks,
                                    }, function (data) {
                                        modal.find('form')[0].reset();
                                        table.DataTable().draw('page');
                                        stop_spinner();
                                        toast('success', 'Site Diary Compliance Saved!');

                                    }
                                )

                            } else {
                                display_form_fields_error()
                            }

                        });
                        button.attr('initialized', 'true');
                    }
                });

                $('.delete_site_diary_compliance').each(function () {
                    var button = $(this);
                    if (button.attr('initialized') != 'true') {
                        button.click(function () {
                            $.confirm({
                                title: 'Delete Diary.',
                                content: 'This action is irreversible! Are you sure?',
                                buttons: {
                                    confirm: {
                                        text: 'Confirm Delete',
                                        btnClass: 'btn btn-danger',
                                        action: function () {
                                            start_spinner();
                                            $.post(
                                                base_url + "hse/delete_site_diary_compliance",
                                                {
                                                    site_diary_compliance_id: button.attr('site_diary_compliance_id')
                                                }, function (data) {
                                                    table.DataTable().draw('page');
                                                    stop_spinner();
                                                    toast('success', 'Diary Deleted!');
                                                }
                                            );
                                        }
                                    },
                                    cancel: {
                                        text: "Don't Delete",
                                        btnClass: 'btn btn-default'
                                    }
                                }
                            });
                        });
                        button.attr('initialized', 'true')
                    }
                });


                initialize_common_js();

            }
        });
    }
});







